{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# **2D Gastruloids (Example 1)**\n"],"metadata":{"id":"EbLMNgDE90ou"}},{"cell_type":"markdown","source":["- **Data File:**\n","  - https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE262081\n","  - GSE262081_adata_timeseries_old_48-96h_filtered_qc.h5ad\n","  - https://pubmed.ncbi.nlm.nih.gov/38585971/\n","- **User Instructions:**\n","  - Link to Google Drive\n","  - Modify file paths as needed\n","- **Steps**\n","  - Setup\n","  - Preprocessing\n","  - CNA Detection Pipeline\n","  - Visualization of Results\n","  - Comparison to Known CNVs"],"metadata":{"id":"vMiCV79y-qIj"}},{"cell_type":"markdown","source":["# **Setup**"],"metadata":{"id":"8XVjC71--ruz"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"gawoxi7wzocL","executionInfo":{"status":"ok","timestamp":1746670391439,"user_tz":240,"elapsed":2752,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"91ae085a-cc06-4466-8bb8-b2440064a187"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scanpy in /usr/local/lib/python3.11/dist-packages (1.11.1)\n","Requirement already satisfied: python-igraph in /usr/local/lib/python3.11/dist-packages (0.11.8)\n","Requirement already satisfied: leidenalg in /usr/local/lib/python3.11/dist-packages (0.10.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.2)\n","Requirement already satisfied: umap-learn in /usr/local/lib/python3.11/dist-packages (0.5.7)\n","Requirement already satisfied: anndata in /usr/local/lib/python3.11/dist-packages (0.11.4)\n","Requirement already satisfied: hmmlearn in /usr/local/lib/python3.11/dist-packages (0.3.3)\n","Requirement already satisfied: mygene in /usr/local/lib/python3.11/dist-packages (3.2.2)\n","Requirement already satisfied: h5py>=3.7 in /usr/local/lib/python3.11/dist-packages (from scanpy) (3.13.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from scanpy) (1.4.2)\n","Requirement already satisfied: legacy-api-wrap>=1.4 in /usr/local/lib/python3.11/dist-packages (from scanpy) (1.4.1)\n","Requirement already satisfied: matplotlib>=3.7 in /usr/local/lib/python3.11/dist-packages (from scanpy) (3.10.0)\n","Requirement already satisfied: natsort in /usr/local/lib/python3.11/dist-packages (from scanpy) (8.4.0)\n","Requirement already satisfied: networkx>=2.7 in /usr/local/lib/python3.11/dist-packages (from scanpy) (3.4.2)\n","Requirement already satisfied: numba>=0.57 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.60.0)\n","Requirement already satisfied: numpy>=1.24 in /usr/local/lib/python3.11/dist-packages (from scanpy) (2.0.2)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from scanpy) (24.2)\n","Requirement already satisfied: pandas>=1.5 in /usr/local/lib/python3.11/dist-packages (from scanpy) (2.2.2)\n","Requirement already satisfied: patsy!=1.0.0 in /usr/local/lib/python3.11/dist-packages (from scanpy) (1.0.1)\n","Requirement already satisfied: pynndescent>=0.5 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.5.13)\n","Requirement already satisfied: scikit-learn<1.6.0,>=1.1 in /usr/local/lib/python3.11/dist-packages (from scanpy) (1.5.2)\n","Requirement already satisfied: seaborn>=0.13 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.13.2)\n","Requirement already satisfied: session-info2 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.1.2)\n","Requirement already satisfied: statsmodels>=0.13 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.14.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from scanpy) (4.67.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from scanpy) (4.13.2)\n","Requirement already satisfied: igraph==0.11.8 in /usr/local/lib/python3.11/dist-packages (from python-igraph) (0.11.8)\n","Requirement already satisfied: texttable>=1.6.2 in /usr/local/lib/python3.11/dist-packages (from igraph==0.11.8->python-igraph) (1.7.0)\n","Requirement already satisfied: array-api-compat!=1.5,>1.4 in /usr/local/lib/python3.11/dist-packages (from anndata) (1.11.2)\n","Requirement already satisfied: biothings-client>=0.2.6 in /usr/local/lib/python3.11/dist-packages (from mygene) (0.4.1)\n","Requirement already satisfied: httpx>=0.22.0 in /usr/local/lib/python3.11/dist-packages (from biothings-client>=0.2.6->mygene) (0.28.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (2.9.0.post0)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.57->scanpy) (0.43.0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5->scanpy) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5->scanpy) (2025.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<1.6.0,>=1.1->scanpy) (3.6.0)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (4.9.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (2025.4.26)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (1.0.9)\n","Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (3.10)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.22.0->biothings-client>=0.2.6->mygene) (0.16.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.7->scanpy) (1.17.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.22.0->biothings-client>=0.2.6->mygene) (1.3.1)\n"]}],"source":["!pip install scanpy python-igraph leidenalg scipy umap-learn anndata hmmlearn mygene"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/My Drive/CSCB_Final/\n","%ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzYilXYH8uAq","executionInfo":{"status":"ok","timestamp":1746670393190,"user_tz":240,"elapsed":772,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"02e88086-42e8-4a71-9339-0cc3c2e5fdcd"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/My Drive/CSCB_Final\n"," cna_by_chr_type.csv                      neurons_annot_with_calls_cleaned.h5ad\n"," cna_by_region.csv                        nikhil_final.ipynb\n"," cna_summary.csv                         \u001b[0m\u001b[01;34m'Old Notebooks'\u001b[0m/\n"," cna_task3_test2_neurons_heatmap.png     'Paper Draft.gdoc'\n"," cna_task3_test3_embryoids_heatmap.png   'Presentation Draft.gslides'\n"," \u001b[01;34mData\u001b[0m/                                   \u001b[01;34m'Task 2A'\u001b[0m/\n"," embryoid_annot_with_calls_cleaned.h5ad   task3_test1_2dGastruloids\n"," embryoid_annot_with_calls.h5ad           task3_test2_neurons.ipynb\n"," example_package_usage_benchmark          task3_test3_embryoid_bodies\n"," Final_Pipeline.ipynb\n"]}]},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","import os, sys\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import scanpy as sc\n","import anndata as ad\n","from sklearn.metrics import f1_score\n","import seaborn as sns\n","from typing import List, Dict, Optional, Tuple\n","from scipy.stats import zscore\n","from scipy.sparse import csr_matrix, issparse\n","import re\n","from sklearn.cluster import KMeans\n","from hmmlearn import hmm\n","import mygene"],"metadata":{"id":"OzENXwvP8t-Y","executionInfo":{"status":"ok","timestamp":1746670409361,"user_tz":240,"elapsed":14123,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Import data\n","gastruloids_data = ad.read_h5ad('/content/drive/My Drive/CSCB_Final/Data/GSE262081_adata_timeseries_old_48-96h_filtered_qc.h5ad')"],"metadata":{"id":"DI9CUEnw8t8F","executionInfo":{"status":"ok","timestamp":1746670424716,"user_tz":240,"elapsed":15354,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Basic data exploration\n","display(gastruloids_data.obs)\n","display(gastruloids_data.var)\n","display(gastruloids_data.X.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":829},"id":"sU8iUDmlAp9g","executionInfo":{"status":"ok","timestamp":1746670424742,"user_tz":240,"elapsed":27,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"c04c395c-5777-46de-df40-edb5e18f7955"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["                               sample_labels\n","AAACAAGCAACGACTAATCATGTG-1_48h         48h-2\n","AAACAAGCAGCAATTGATCATGTG-1_48h         48h-2\n","AAACAAGCATCAGGACATCATGTG-1_48h         48h-2\n","AAACAAGCATCCCTCTATCATGTG-1_48h         48h-2\n","AAACAAGCATTCATGCATCATGTG-1_48h         48h-2\n","...                                      ...\n","TTTGGTTTCGATGGAG-1_96h                 96h-1\n","TTTGTTGAGGTACAAT-1_96h                 96h-1\n","TTTGTTGAGGTCATAA-1_96h                 96h-1\n","TTTGTTGTCATTATCC-1_96h                 96h-1\n","TTTGTTGTCCGTTTCG-1_96h                 96h-1\n","\n","[46508 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-4c7bf7c7-05ee-497b-a78d-f4f8c7574911\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sample_labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>AAACAAGCAACGACTAATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","    </tr>\n","    <tr>\n","      <th>AAACAAGCAGCAATTGATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","    </tr>\n","    <tr>\n","      <th>AAACAAGCATCAGGACATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","    </tr>\n","    <tr>\n","      <th>AAACAAGCATCCCTCTATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","    </tr>\n","    <tr>\n","      <th>AAACAAGCATTCATGCATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>TTTGGTTTCGATGGAG-1_96h</th>\n","      <td>96h-1</td>\n","    </tr>\n","    <tr>\n","      <th>TTTGTTGAGGTACAAT-1_96h</th>\n","      <td>96h-1</td>\n","    </tr>\n","    <tr>\n","      <th>TTTGTTGAGGTCATAA-1_96h</th>\n","      <td>96h-1</td>\n","    </tr>\n","    <tr>\n","      <th>TTTGTTGTCATTATCC-1_96h</th>\n","      <td>96h-1</td>\n","    </tr>\n","    <tr>\n","      <th>TTTGTTGTCCGTTTCG-1_96h</th>\n","      <td>96h-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>46508 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c7bf7c7-05ee-497b-a78d-f4f8c7574911')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4c7bf7c7-05ee-497b-a78d-f4f8c7574911 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4c7bf7c7-05ee-497b-a78d-f4f8c7574911');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d6e0c11d-3167-4fd6-b328-a84016ff3206\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6e0c11d-3167-4fd6-b328-a84016ff3206')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d6e0c11d-3167-4fd6-b328-a84016ff3206 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(gastruloids_data\",\n  \"rows\": 46508,\n  \"fields\": [\n    {\n      \"column\": \"sample_labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"48h-2\",\n          \"72h-2\",\n          \"96h-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [GDPD2 (ENSG00000130055), RTCB (ENSG00000100220), GINS3 (ENSG00000181938), RSPH9 (ENSG00000172426), RNF214 (ENSG00000167257), SLC25A52 (ENSG00000141437), ITSN2 (ENSG00000198399), GSX2 (ENSG00000180613), C20orf96 (ENSG00000196476), PET117 (ENSG00000232838), RPRD2 (ENSG00000163125), EHHADH (ENSG00000113790), EFNB1 (ENSG00000090776), SLC27A3 (ENSG00000143554), AVPR2 (ENSG00000126895), ADH6 (ENSG00000172955), MIA3 (ENSG00000154305), PHKG1 (ENSG00000164776), TP53I11 (ENSG00000175274), FGL2 (ENSG00000127951), MUCL1 (ENSG00000172551), CNOT4 (ENSG00000080802), ITGAL (ENSG00000005844), ITPRID2 (ENSG00000138434), PRSS3 (ENSG00000010438), CABP4 (ENSG00000175544), SIRT1 (ENSG00000096717), BDH2 (ENSG00000164039), GNB3 (ENSG00000111664), BET1L (ENSG00000177951), ITPA (ENSG00000125877), IL20RB (ENSG00000174564), NCOA1 (ENSG00000084676), SAP130 (ENSG00000136715), AIFM2 (ENSG00000042286), USP34 (ENSG00000115464), HSD3B2 (ENSG00000203859), FBXO5 (ENSG00000112029), LBH (ENSG00000213626), SMIM41 (ENSG00000284791), RAB39A (ENSG00000179331), LY6G5C (ENSG00000204428), ACTRT1 (ENSG00000123165), HS3ST3B1 (ENSG00000125430), NLGN1 (ENSG00000169760), ZNF706 (ENSG00000120963), MSS51 (ENSG00000166343), SCN1A (ENSG00000144285), PCGF5 (ENSG00000180628), S100A11 (ENSG00000163191), GATC (ENSG00000257218), PPP2R2B (ENSG00000156475), VWA1 (ENSG00000179403), PANK3 (ENSG00000120137), PKIB (ENSG00000135549), HP (ENSG00000257017), EIF1 (ENSG00000173812), PAK5 (ENSG00000101349), RASGEF1B (ENSG00000138670), SSBP4 (ENSG00000130511), VWA5B2 (ENSG00000145198), RBM38 (ENSG00000132819), ABHD4 (ENSG00000100439), CCDC50 (ENSG00000152492), FITM1 (ENSG00000139914), FAM91A1 (ENSG00000176853), HAPLN2 (ENSG00000132702), HNRNPAB (ENSG00000197451), CNKSR1 (ENSG00000142675), PARP10 (ENSG00000178685), DNAJB12 (ENSG00000148719), DMTN (ENSG00000158856), LARGE2 (ENSG00000165905), PAFAH2 (ENSG00000158006), RSPO3 (ENSG00000146374), DNAJC4 (ENSG00000110011), MLH1 (ENSG00000076242), SH2D5 (ENSG00000189410), SOWAHA (ENSG00000198944), VPS18 (ENSG00000104142), TBC1D31 (ENSG00000156787), KIFAP3 (ENSG00000075945), ZNF347 (ENSG00000197937), ECI2 (ENSG00000198721), LGALS7B (ENSG00000178934), GAMT (ENSG00000130005), ATF1 (ENSG00000123268), XRRA1 (ENSG00000166435), GBA2 (ENSG00000070610), PMVK (ENSG00000163344), TOR1AIP2 (ENSG00000169905), TMEM160 (ENSG00000130748), ERN2 (ENSG00000134398), RANBP10 (ENSG00000141084), MYOG (ENSG00000122180), SNAPC4 (ENSG00000165684), TFB1M (ENSG00000029639), CXCL3 (ENSG00000163734), WHRN (ENSG00000095397), RSBN1L (ENSG00000187257), ...]\n","\n","[16233 rows x 0 columns]"],"text/html":["\n","  <div id=\"df-27bc0658-9f19-4b62-8b26-8788126c9de9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>GDPD2 (ENSG00000130055)</th>\n","    </tr>\n","    <tr>\n","      <th>RTCB (ENSG00000100220)</th>\n","    </tr>\n","    <tr>\n","      <th>GINS3 (ENSG00000181938)</th>\n","    </tr>\n","    <tr>\n","      <th>RSPH9 (ENSG00000172426)</th>\n","    </tr>\n","    <tr>\n","      <th>RNF214 (ENSG00000167257)</th>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","    </tr>\n","    <tr>\n","      <th>SGCE (ENSG00000127990)</th>\n","    </tr>\n","    <tr>\n","      <th>KCNJ1 (ENSG00000151704)</th>\n","    </tr>\n","    <tr>\n","      <th>CDC45 (ENSG00000093009)</th>\n","    </tr>\n","    <tr>\n","      <th>CHAC1 (ENSG00000128965)</th>\n","    </tr>\n","    <tr>\n","      <th>MSH2 (ENSG00000095002)</th>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>16233 rows × 0 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27bc0658-9f19-4b62-8b26-8788126c9de9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-27bc0658-9f19-4b62-8b26-8788126c9de9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-27bc0658-9f19-4b62-8b26-8788126c9de9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ece0e326-dd0e-4d36-a736-efa46610aafe\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ece0e326-dd0e-4d36-a736-efa46610aafe')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ece0e326-dd0e-4d36-a736-efa46610aafe button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(gastruloids_data\",\n  \"rows\": 16233,\n  \"fields\": []\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["(46508, 16233)"]},"metadata":{}}]},{"cell_type":"code","source":["# Subset the dataset because it is quite large (3 GB)\n","np.random.seed(0)\n","subset = np.random.choice(gastruloids_data.obs_names, 1000, replace=False)\n","gastruloids_data_subset = gastruloids_data[subset].copy()\n"],"metadata":{"id":"aAwLpxabq0Bq","executionInfo":{"status":"ok","timestamp":1746670609328,"user_tz":240,"elapsed":622,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["del gastruloids_data"],"metadata":{"id":"IkrLVxVrqz_j","executionInfo":{"status":"ok","timestamp":1746670614501,"user_tz":240,"elapsed":13,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"tpfS7Hcpqz63"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Preprocessing**"],"metadata":{"id":"YQQtQWpeACuT"}},{"cell_type":"code","source":["def preprocess_anndata(\n","    ad,\n","    mt_filter=True,\n","    count_filter=True,\n","    normalize=True,\n","    use_pcs=True,\n","    n_pcs=10,\n","    n_neighbors=20,\n","    marker_genes_dict=None,\n","    leiden_resolution=0.1\n","):\n","    \"\"\"\n","    Run a flexible single-cell RNA-seq analysis pipeline with optional QC, normalization, clustering, and plotting.\n","\n","    Parameters:\n","    - ad (AnnData): Input AnnData object.\n","    - mt_filter (bool): Whether to filter cells with high mitochondrial percentage.\n","    - count_filter (bool): Whether to filter cells with too few genes or too many counts.\n","    - normalize (bool): Whether to normalize and log-transform expression values.\n","    - use_pcs (bool): Whether to use PCA for kNN graph construction.\n","    - n_pcs (int): Number of principal components.\n","    - n_neighbors (int): Number of neighbors for graph construction.\n","    - marker_genes_dict (dict): Dictionary of marker genes by cell type for plotting.\n","    - leiden_resolution (float): Resolution parameter for Leiden clustering.\n","\n","    Returns:\n","    - AnnData: Processed and clustered AnnData object.\n","    \"\"\"\n","    print(\"Step 1: Copying AnnData object...\")\n","    ad_analys = ad.copy()\n","\n","    print(\"Step 2: Calculating QC metrics...\")\n","    ad_analys.var['mt'] = ad_analys.var_names.str.upper().str.startswith('MT-')\n","    sc.pp.calculate_qc_metrics(ad_analys, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\n","\n","    adClean = ad_analys.copy()\n","    if mt_filter:\n","        print(\"Step 3: Applying mitochondrial filter (<20%)...\")\n","        adClean = adClean[adClean.obs['pct_counts_mt'] < 20].copy()\n","\n","    if count_filter:\n","        print(\"Step 4: Applying cell count filters (min_genes=500, max_counts=30000)...\")\n","        sc.pp.filter_cells(adClean, min_genes=500)\n","        sc.pp.filter_cells(adClean, max_counts=30000)\n","\n","    print(\"Step 5: Filtering genes expressed in at least 3 cells...\")\n","    sc.pp.filter_genes(adClean, min_cells=3)\n","\n","    print(\"Step 6: Normalizing data and selecting highly variable genes...\")\n","    adNorm = adClean.copy()\n","    if normalize:\n","        sc.pp.normalize_total(adNorm, target_sum=1e4)\n","        sc.pp.log1p(adNorm)\n","        sc.pp.highly_variable_genes(adNorm, min_mean=0.0125, max_mean=6, min_disp=0.25)\n","    else:\n","        print(\"Skipping normalization and HVG selection...\")\n","\n","    print(\"Step 7: Performing PCA...\")\n","    if normalize:\n","        sc.tl.pca(adNorm, use_highly_variable=True)\n","    else:\n","        sc.tl.pca(adNorm)\n","\n","    print(\"Step 8: Building neighborhood graph...\")\n","    if use_pcs:\n","        sc.pp.neighbors(adNorm, n_neighbors=n_neighbors, n_pcs=n_pcs)\n","    else:\n","        sc.pp.neighbors(adNorm, n_neighbors=n_neighbors)\n","\n","    print(\"Step 9: Running Leiden clustering and UMAP embedding...\")\n","    sc.tl.leiden(adNorm, resolution=leiden_resolution)\n","    sc.tl.paga(adNorm)\n","    sc.pl.paga(adNorm, plot=False)\n","    sc.tl.umap(adNorm, init_pos='paga')\n","\n","    print(\"Step 10: Plotting UMAP and Dotplot...\")\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(11, 5), gridspec_kw={'wspace': 0.4})\n","    ax1_dict = sc.pl.umap(adNorm, color=['leiden'], alpha=0.75, s=10, legend_loc='on data', ax=ax1, show=False)\n","    ax2_dict = sc.pl.dotplot(adNorm, marker_genes_dict, 'leiden', dendrogram=True,ax=ax2, show=False)\n","    plt.show()\n","\n","    print(\"Analysis complete.\")\n","    return adNorm\n","\n"],"metadata":{"id":"lGkV1lh58t5g","executionInfo":{"status":"ok","timestamp":1746670662203,"user_tz":240,"elapsed":11,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Before running preprocessing function, we need to split the index and create new columns\n","# for the gene name and gene id\n","\n","# Import libraries\n","import pandas as pd\n","import re\n","\n","# Create empty lists to store gene names and IDs\n","gene_names = []\n","gene_ids = []\n","\n","# Extract gene names and IDs from the combined format\n","for idx in gastruloids_data_subset.var_names:\n","    match = re.match(r'(.+) \\((.+)\\)', idx)\n","    if match:\n","        gene_names.append(match.group(1))\n","        gene_ids.append(match.group(2))\n","    else:\n","        gene_names.append(idx)\n","        gene_ids.append(None)\n","\n","# Add the new columns to the var DataFrame\n","gastruloids_data_subset.var['gene_name'] = gene_names\n","gastruloids_data_subset.var['gene_id'] = gene_ids\n","\n","# Display the first few rows to verify\n","print(gastruloids_data_subset.var[['gene_name', 'gene_id']].head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0rrXSNGhbl4f","executionInfo":{"status":"ok","timestamp":1746670651791,"user_tz":240,"elapsed":55,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"044c1427-249f-466f-f106-b9cddffaa8ae"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["                         gene_name          gene_id\n","GDPD2 (ENSG00000130055)      GDPD2  ENSG00000130055\n","RTCB (ENSG00000100220)        RTCB  ENSG00000100220\n","GINS3 (ENSG00000181938)      GINS3  ENSG00000181938\n","RSPH9 (ENSG00000172426)      RSPH9  ENSG00000172426\n","RNF214 (ENSG00000167257)    RNF214  ENSG00000167257\n"]}]},{"cell_type":"markdown","source":["- **Literature for Marker Gene Selection:**\n","  - https://pmc.ncbi.nlm.nih.gov/articles/PMC6570500/\n","  - https://doi.org/10.1038/s41467-024-49380-0\n","  - https://compscbio.github.io/cscb-2025/hws/hw_4.html"],"metadata":{"id":"GbfutkK-lpTx"}},{"cell_type":"code","source":["marker_genes_dict_gastruloids = {\n","    \"Epiblast\": [\"UTF1 (ENSG00000171794)\", \"SLC7A3 (ENSG00000165349)\", \"POU3F1 (ENSG00000185668)\"],\n","    \"Mesoderm\": [\"MESP1 (ENSG00000166823)\", \"FGF3 (ENSG00000186895)\", \"SNAI1 (ENSG00000124216)\"],\n","    \"APS\": [\"FOXA2 (ENSG00000125798)\", \"GSC (ENSG00000133937)\", \"SOX17 (ENSG00000164736)\"],\n","    \"Endoderm\": [\"DAB2 (ENSG00000153071)\", \"CUBN (ENSG00000107611)\", \"GATA6 (ENSG00000141448)\"],\n","    \"Ectoderm\": [\"TUBB3 (ENSG00000258947)\", \"NES (ENSG00000132688)\", \"OTX2 (ENSG00000165588)\"]\n","\n","}\n"],"metadata":{"id":"argk3vSuUcCg","executionInfo":{"status":"ok","timestamp":1746670654208,"user_tz":240,"elapsed":4,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Run proprocessing function on dataset\n","adata_processed = preprocess_anndata(\n","    ad=gastruloids_data_subset,\n","    marker_genes_dict=marker_genes_dict_gastruloids,\n","    leiden_resolution=0.45,\n","    n_pcs=15\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":906},"id":"-fbr6GIpUrjR","outputId":"974b12d4-14d7-41be-c32c-3b6f4aaac042","executionInfo":{"status":"ok","timestamp":1746670778267,"user_tz":240,"elapsed":4601,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Step 1: Copying AnnData object...\n","Step 2: Calculating QC metrics...\n","Step 3: Applying mitochondrial filter (<20%)...\n","Step 4: Applying cell count filters (min_genes=500, max_counts=30000)...\n","Step 5: Filtering genes expressed in at least 3 cells...\n","Step 6: Normalizing data and selecting highly variable genes...\n","Step 7: Performing PCA...\n","Step 8: Building neighborhood graph...\n","Step 9: Running Leiden clustering and UMAP embedding...\n","Step 10: Plotting UMAP and Dotplot...\n","WARNING: dendrogram data not found (using key=dendrogram_leiden). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\n","WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\n","categories: 0, 1, 2, etc.\n","var_group_labels: Epiblast, Mesoderm, APS, etc.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1100x500 with 8 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Analysis complete.\n"]}]},{"cell_type":"markdown","source":["**Interpretation:**\n","\n","Based on the above results, many of the clusters exhibit expression for marker genes of a distinct cell type, which we can leverage to annotate the cells.\n","\n","Current assignments (Cluster 0-4):\n","- Mesoderm: 1\n","- APS: 6\n","- Endoderm: 0\n","- Ectoderm: 3, 4, 5, 2\n","\n","Manual annotation cell typing results will be added to a new column in .obs \"cell_type\"."],"metadata":{"id":"7lul-nIAnpuI"}},{"cell_type":"code","source":["# Define valid clusters to keep\n","tokeep = [\"0\", \"1\", \"2\", \"3\", \"4\"]\n","adata_processed_clust = adata_processed[adata_processed.obs['leiden'].isin(tokeep)].copy()\n","\n","# Define new combined cell type annotations\n","cell_dict = {\n","    'APS': ['6'],\n","    'Mesoderm': ['1'],\n","    'Endoderm': ['0'],\n","    'Ectoderm': ['3','4','5','2']\n","  }\n","\n","\n","# Re-annotate cell types\n","new_obs_name = 'cell_type'\n","adata_processed_clust.obs[new_obs_name] = np.nan\n","for cell_type, clusters in cell_dict.items():\n","    ind = adata_processed_clust.obs['leiden'].isin(clusters)\n","    adata_processed_clust.obs.loc[ind, new_obs_name] = cell_type\n","\n","# Convert to categorical\n","adata_processed_clust.obs['cell_type'] = adata_processed_clust.obs['cell_type'].astype(\"category\")\n","\n","# Check distribution\n","print(adata_processed_clust.obs['cell_type'].value_counts())"],"metadata":{"id":"ujSsnP18Urg4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746670858129,"user_tz":240,"elapsed":57,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"19b6cb41-68f6-4c96-cfa9-f4b643c3f2ad"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["cell_type\n","Ectoderm    524\n","Endoderm    211\n","Mesoderm    189\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["# **CNA Detection Pipeline**"],"metadata":{"id":"HYDKbxYkUreh"}},{"cell_type":"code","source":["!pip install git+https://github.com/nik548/cscbfinalprojectS25.git\n","import genecnv as gcnv"],"metadata":{"id":"rXRBaH-efgzh","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1746670943309,"user_tz":240,"elapsed":4826,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"2879db54-44d7-4799-8794-b0dca0469ac0"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting git+https://github.com/nik548/cscbfinalprojectS25.git\n","  Cloning https://github.com/nik548/cscbfinalprojectS25.git to /tmp/pip-req-build-7z6l3qav\n","  Running command git clone --filter=blob:none --quiet https://github.com/nik548/cscbfinalprojectS25.git /tmp/pip-req-build-7z6l3qav\n","  Resolved https://github.com/nik548/cscbfinalprojectS25.git to commit f07c4ea819d165f351d85b9de5653354d4d076c3\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy>=1.19 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (2.0.2)\n","Requirement already satisfied: pandas>=1.1 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (2.2.2)\n","Requirement already satisfied: scanpy>=1.9 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (1.11.1)\n","Requirement already satisfied: anndata>=0.7 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.11.4)\n","Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (1.15.2)\n","Requirement already satisfied: scikit-learn>=0.24 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (1.5.2)\n","Requirement already satisfied: hmmlearn>=0.2 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.3.3)\n","Requirement already satisfied: matplotlib>=3.3 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (3.10.0)\n","Requirement already satisfied: seaborn>=0.11 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.13.2)\n","Requirement already satisfied: python-igraph>=0.9 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.11.8)\n","Requirement already satisfied: mygene>=3.2 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (3.2.2)\n","Requirement already satisfied: array-api-compat!=1.5,>1.4 in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (1.11.2)\n","Requirement already satisfied: h5py>=3.7 in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (3.13.0)\n","Requirement already satisfied: natsort in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (8.4.0)\n","Requirement already satisfied: packaging>=24.2 in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (24.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (2.9.0.post0)\n","Requirement already satisfied: biothings-client>=0.2.6 in /usr/local/lib/python3.11/dist-packages (from mygene>=3.2->genecnv==0.1.0) (0.4.1)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1->genecnv==0.1.0) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1->genecnv==0.1.0) (2025.2)\n","Requirement already satisfied: igraph==0.11.8 in /usr/local/lib/python3.11/dist-packages (from python-igraph>=0.9->genecnv==0.1.0) (0.11.8)\n","Requirement already satisfied: texttable>=1.6.2 in /usr/local/lib/python3.11/dist-packages (from igraph==0.11.8->python-igraph>=0.9->genecnv==0.1.0) (1.7.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (1.4.2)\n","Requirement already satisfied: legacy-api-wrap>=1.4 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (1.4.1)\n","Requirement already satisfied: networkx>=2.7 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (3.4.2)\n","Requirement already satisfied: numba>=0.57 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.60.0)\n","Requirement already satisfied: patsy!=1.0.0 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (1.0.1)\n","Requirement already satisfied: pynndescent>=0.5 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.5.13)\n","Requirement already satisfied: session-info2 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.1.2)\n","Requirement already satisfied: statsmodels>=0.13 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.14.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (4.67.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (4.13.2)\n","Requirement already satisfied: umap-learn!=0.5.0,>=0.5 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.5.7)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.24->genecnv==0.1.0) (3.6.0)\n","Requirement already satisfied: httpx>=0.22.0 in /usr/local/lib/python3.11/dist-packages (from biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (0.28.1)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.57->scanpy>=1.9->genecnv==0.1.0) (0.43.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.3->genecnv==0.1.0) (1.17.0)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (4.9.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (2025.4.26)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (1.0.9)\n","Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (3.10)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (0.16.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (1.3.1)\n","Building wheels for collected packages: genecnv\n","  Building wheel for genecnv (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for genecnv: filename=genecnv-0.1.0-py3-none-any.whl size=12569 sha256=46a85714995e2f63f2ac483867685c051e4a86b7536eefc787237022575c53ae\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-wb4p1a_t/wheels/07/07/23/7aaef129afafd97bc8ace0b5ef55ed4cbc3756a9e062a9db35\n","Successfully built genecnv\n","Installing collected packages: genecnv\n","Successfully installed genecnv-0.1.0\n"]}]},{"cell_type":"code","source":["# Create copy to run through CNA detection steps\n","gastruloids_preprocessed = adata_processed_clust.copy()"],"metadata":{"id":"MP-P-4h5UraO","executionInfo":{"status":"ok","timestamp":1746670867277,"user_tz":240,"elapsed":19,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Annotate genes if coordinates missing\n","gastruloids_annot = gcnv.annotate_genes_mygene(gastruloids_preprocessed, gene_col='gene_name')"],"metadata":{"id":"mHd6AxyDfgwp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746671102349,"user_tz":240,"elapsed":37882,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"8fc7299e-98b1-4c83-ed23-5ee163d0697b"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:biothings.client:querying 1-1000 ...\n"]},{"output_type":"stream","name":"stdout","text":["Preparing to query 15173 gene identifiers...\n","Querying MyGene.info for 15169 unique gene identifiers...\n"]},{"output_type":"stream","name":"stderr","text":["INFO:biothings.client:querying 1001-2000 ...\n","INFO:biothings.client:querying 2001-3000 ...\n","INFO:biothings.client:querying 3001-4000 ...\n","INFO:biothings.client:querying 4001-5000 ...\n","INFO:biothings.client:querying 5001-6000 ...\n","INFO:biothings.client:querying 6001-7000 ...\n","INFO:biothings.client:querying 7001-8000 ...\n","INFO:biothings.client:querying 8001-9000 ...\n","INFO:biothings.client:querying 9001-10000 ...\n","INFO:biothings.client:querying 10001-11000 ...\n","INFO:biothings.client:querying 11001-12000 ...\n","INFO:biothings.client:querying 12001-13000 ...\n","INFO:biothings.client:querying 13001-14000 ...\n","INFO:biothings.client:querying 14001-15000 ...\n","INFO:biothings.client:querying 15001-15169 ...\n","INFO:biothings.client:Finished.\n","WARNING:biothings.client:20 input query terms found dup hits:\t[('CDR1', 2), ('TRIM16L', 2), ('TRBC2', 2), ('TEC', 2), ('ATP6AP1L', 2), ('TRDC', 2), ('PRSS45P', 2)\n","WARNING:biothings.client:392 input query terms found no hit:\t['CENPJ', 'AC253572', 'FAM155A', 'ZBED8', 'AC007906', 'FAM183A', 'HIST1H1D', 'KIAA1109', 'RNF165', '\n"]},{"output_type":"stream","name":"stdout","text":["Annotation summary:\n","  Total genes: 15173\n","  Successfully annotated: 14780 (97.4%)\n","  Standard chromosomes (1-22,X,Y): 14607 (96.3%)\n","Returning filtered AnnData with 14607 genes\n"]}]},{"cell_type":"code","source":["# Run the full CNV pipeline\n","gastruloid_annot_with_calls, bins, centers, calls = gcnv.run_adaptive_cnv_pipeline(\n","    gastruloids_annot,\n","    cell_type_key=\"cell_type\",\n","    target_genes_per_bin=100,\n","    decay_scale=1e6,\n","    decay_radius=10,\n","    reference_frac=0.15,\n","    min_run=2,\n",")"],"metadata":{"id":"DEAiTtEffgt-","executionInfo":{"status":"ok","timestamp":1746671279195,"user_tz":240,"elapsed":127036,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Annotate .obs of AnnData object with CNA calls\n","gcnv.annotate_cnv_calls(gastruloid_annot_with_calls, calls, bins, centers)"],"metadata":{"id":"7k9eZBdjfgrL","executionInfo":{"status":"ok","timestamp":1746671416536,"user_tz":240,"elapsed":132374,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# Now, we can see our CNA call present in the \"cnv_regions\" column!\n","gastruloid_annot_with_calls.obs"],"metadata":{"id":"bOqviGiAfgmA","colab":{"base_uri":"https://localhost:8080/","height":597},"executionInfo":{"status":"ok","timestamp":1746671416547,"user_tz":240,"elapsed":12,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"18d6d343-b510-450e-b340-af3d053e586c"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               sample_labels  n_genes_by_counts  total_counts  \\\n","AGCCTTCAGACAAAGGATTCGGTT-1_96h         96h-2               5839       14184.0   \n","ATATAGGTCAATGTGAATCATGTG-1_48h         48h-2               7356       23312.0   \n","AGCTTCTCACAGCAACATTCGGTT-1_96h         96h-2               6907       21453.0   \n","CTGAGCGAGAGCTGCA-1_48h                 48h-1               5345       20947.0   \n","CCTATGATCTTTAGCGAACGCCGA-1_72h         72h-2               6160       15185.0   \n","...                                      ...                ...           ...   \n","CTAACCGGTTGGCGAGATCATGTG-1_48h         48h-2               5947       14954.0   \n","TGTTGGAAGATACGAT-1_72h                 72h-1               6857       29224.0   \n","CCTTAAAGTATGTTGCATTCGGTT-1_96h         96h-2               6676       21298.0   \n","ATAACCCGTCGAATCTAACGCCGA-1_72h         72h-2               6237       16077.0   \n","GTCCTCACAGCTACTA-1_96h                 96h-1               4497       12121.0   \n","\n","                                total_counts_mt  pct_counts_mt  n_genes  \\\n","AGCCTTCAGACAAAGGATTCGGTT-1_96h             80.0       0.564016     5839   \n","ATATAGGTCAATGTGAATCATGTG-1_48h            377.0       1.617193     7356   \n","AGCTTCTCACAGCAACATTCGGTT-1_96h             35.0       0.163147     6907   \n","CTGAGCGAGAGCTGCA-1_48h                   1774.0       8.468993     5345   \n","CCTATGATCTTTAGCGAACGCCGA-1_72h            141.0       0.928548     6160   \n","...                                         ...            ...      ...   \n","CTAACCGGTTGGCGAGATCATGTG-1_48h             68.0       0.454728     5947   \n","TGTTGGAAGATACGAT-1_72h                   1727.0       5.909526     6857   \n","CCTTAAAGTATGTTGCATTCGGTT-1_96h             10.0       0.046953     6676   \n","ATAACCCGTCGAATCTAACGCCGA-1_72h             71.0       0.441625     6237   \n","GTCCTCACAGCTACTA-1_96h                    598.0       4.933586     4497   \n","\n","                                n_counts leiden cell_type  \\\n","AGCCTTCAGACAAAGGATTCGGTT-1_96h   14184.0      0  Endoderm   \n","ATATAGGTCAATGTGAATCATGTG-1_48h   23312.0      4  Ectoderm   \n","AGCTTCTCACAGCAACATTCGGTT-1_96h   21453.0      0  Endoderm   \n","CTGAGCGAGAGCTGCA-1_48h           20947.0      1  Mesoderm   \n","CCTATGATCTTTAGCGAACGCCGA-1_72h   15185.0      4  Ectoderm   \n","...                                  ...    ...       ...   \n","CTAACCGGTTGGCGAGATCATGTG-1_48h   14954.0      4  Ectoderm   \n","TGTTGGAAGATACGAT-1_72h           29224.0      1  Mesoderm   \n","CCTTAAAGTATGTTGCATTCGGTT-1_96h   21298.0      0  Endoderm   \n","ATAACCCGTCGAATCTAACGCCGA-1_72h   16077.0      0  Endoderm   \n","GTCCTCACAGCTACTA-1_96h           12121.0      1  Mesoderm   \n","\n","                                                                      cnv_regions  \n","AGCCTTCAGACAAAGGATTCGGTT-1_96h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","ATATAGGTCAATGTGAATCATGTG-1_48h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","AGCTTCTCACAGCAACATTCGGTT-1_96h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","CTGAGCGAGAGCTGCA-1_48h          1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","CCTATGATCTTTAGCGAACGCCGA-1_72h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","...                                                                           ...  \n","CTAACCGGTTGGCGAGATCATGTG-1_48h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","TGTTGGAAGATACGAT-1_72h          1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","CCTTAAAGTATGTTGCATTCGGTT-1_96h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","ATAACCCGTCGAATCTAACGCCGA-1_72h  1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","GTCCTCACAGCTACTA-1_96h          1:923923-10381603 (gain), 1:10398592-20661544 ...  \n","\n","[924 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-f98dd061-0781-4b5c-920a-a592eaf05296\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sample_labels</th>\n","      <th>n_genes_by_counts</th>\n","      <th>total_counts</th>\n","      <th>total_counts_mt</th>\n","      <th>pct_counts_mt</th>\n","      <th>n_genes</th>\n","      <th>n_counts</th>\n","      <th>leiden</th>\n","      <th>cell_type</th>\n","      <th>cnv_regions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>AGCCTTCAGACAAAGGATTCGGTT-1_96h</th>\n","      <td>96h-2</td>\n","      <td>5839</td>\n","      <td>14184.0</td>\n","      <td>80.0</td>\n","      <td>0.564016</td>\n","      <td>5839</td>\n","      <td>14184.0</td>\n","      <td>0</td>\n","      <td>Endoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>ATATAGGTCAATGTGAATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","      <td>7356</td>\n","      <td>23312.0</td>\n","      <td>377.0</td>\n","      <td>1.617193</td>\n","      <td>7356</td>\n","      <td>23312.0</td>\n","      <td>4</td>\n","      <td>Ectoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>AGCTTCTCACAGCAACATTCGGTT-1_96h</th>\n","      <td>96h-2</td>\n","      <td>6907</td>\n","      <td>21453.0</td>\n","      <td>35.0</td>\n","      <td>0.163147</td>\n","      <td>6907</td>\n","      <td>21453.0</td>\n","      <td>0</td>\n","      <td>Endoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>CTGAGCGAGAGCTGCA-1_48h</th>\n","      <td>48h-1</td>\n","      <td>5345</td>\n","      <td>20947.0</td>\n","      <td>1774.0</td>\n","      <td>8.468993</td>\n","      <td>5345</td>\n","      <td>20947.0</td>\n","      <td>1</td>\n","      <td>Mesoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>CCTATGATCTTTAGCGAACGCCGA-1_72h</th>\n","      <td>72h-2</td>\n","      <td>6160</td>\n","      <td>15185.0</td>\n","      <td>141.0</td>\n","      <td>0.928548</td>\n","      <td>6160</td>\n","      <td>15185.0</td>\n","      <td>4</td>\n","      <td>Ectoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>CTAACCGGTTGGCGAGATCATGTG-1_48h</th>\n","      <td>48h-2</td>\n","      <td>5947</td>\n","      <td>14954.0</td>\n","      <td>68.0</td>\n","      <td>0.454728</td>\n","      <td>5947</td>\n","      <td>14954.0</td>\n","      <td>4</td>\n","      <td>Ectoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>TGTTGGAAGATACGAT-1_72h</th>\n","      <td>72h-1</td>\n","      <td>6857</td>\n","      <td>29224.0</td>\n","      <td>1727.0</td>\n","      <td>5.909526</td>\n","      <td>6857</td>\n","      <td>29224.0</td>\n","      <td>1</td>\n","      <td>Mesoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>CCTTAAAGTATGTTGCATTCGGTT-1_96h</th>\n","      <td>96h-2</td>\n","      <td>6676</td>\n","      <td>21298.0</td>\n","      <td>10.0</td>\n","      <td>0.046953</td>\n","      <td>6676</td>\n","      <td>21298.0</td>\n","      <td>0</td>\n","      <td>Endoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>ATAACCCGTCGAATCTAACGCCGA-1_72h</th>\n","      <td>72h-2</td>\n","      <td>6237</td>\n","      <td>16077.0</td>\n","      <td>71.0</td>\n","      <td>0.441625</td>\n","      <td>6237</td>\n","      <td>16077.0</td>\n","      <td>0</td>\n","      <td>Endoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","    <tr>\n","      <th>GTCCTCACAGCTACTA-1_96h</th>\n","      <td>96h-1</td>\n","      <td>4497</td>\n","      <td>12121.0</td>\n","      <td>598.0</td>\n","      <td>4.933586</td>\n","      <td>4497</td>\n","      <td>12121.0</td>\n","      <td>1</td>\n","      <td>Mesoderm</td>\n","      <td>1:923923-10381603 (gain), 1:10398592-20661544 ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>924 rows × 10 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f98dd061-0781-4b5c-920a-a592eaf05296')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f98dd061-0781-4b5c-920a-a592eaf05296 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f98dd061-0781-4b5c-920a-a592eaf05296');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-37a26f0b-ac4f-49c4-9dde-5852b68958b8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37a26f0b-ac4f-49c4-9dde-5852b68958b8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-37a26f0b-ac4f-49c4-9dde-5852b68958b8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"gastruloid_annot_with_calls\",\n  \"rows\": 924,\n  \"fields\": [\n    {\n      \"column\": \"sample_labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"96h-2\",\n          \"48h-2\",\n          \"96h-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_genes_by_counts\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 817,\n        \"samples\": [\n          4019,\n          6660,\n          5855\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_counts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4742.645838410851,\n        \"min\": 7252.0,\n        \"max\": 29950.0,\n        \"num_unique_values\": 904,\n        \"samples\": [\n          29073.0,\n          17190.0,\n          17098.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_counts_mt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 484.1639714339354,\n        \"min\": 0.0,\n        \"max\": 2702.0,\n        \"num_unique_values\": 536,\n        \"samples\": [\n          122.0,\n          667.0,\n          929.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pct_counts_mt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4734189380984364,\n        \"min\": 0.0,\n        \"max\": 10.179146990480474,\n        \"num_unique_values\": 923,\n        \"samples\": [\n          4.621642471421558,\n          0.19222682765663485,\n          5.847076461769116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_genes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 995,\n        \"min\": 2870,\n        \"max\": 7689,\n        \"num_unique_values\": 817,\n        \"samples\": [\n          4019,\n          6660,\n          5855\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_counts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4742.645838410851,\n        \"min\": 7252.0,\n        \"max\": 29950.0,\n        \"num_unique_values\": 904,\n        \"samples\": [\n          29073.0,\n          17190.0,\n          17098.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"leiden\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"4\",\n          \"3\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cell_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Endoderm\",\n          \"Ectoderm\",\n          \"Mesoderm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnv_regions\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 175,\n        \"samples\": [\n          \"1:923923-10381603 (gain), 1:10398592-20661544 (gain), 6:75749201-110254275 (gain), 6:110609978-139180802 (gain), 6:139239083-170407067 (gain), 6:497258-170584692 (gain), 7:23310209-45112047 (gain), 7:45157791-80679277 (gain), 7:80742538-100434126 (gain), 7:100435282-120858402 (gain), 7:120950763-142753072 (gain), 7:232137-159144867 (gain), 8:10764961-30177208 (gain), 8:30156319-64798737 (gain), 8:65602458-96336995 (gain), 8:96493813-133102912 (gain), 8:14475-145066685 (gain), 9:4984390-35675866 (gain), 9:35673928-90642862 (gain), 9:90801787-113164140 (gain), 9:113161006-128204383 (gain), 9:128191655-136359605 (gain), 9:46888-138124624 (gain), 10:13099449-44995891 (gain), 10:44970981-73169055 (gain), 10:73168119-95291012 (gain), 10:95311771-103458900 (gain), 10:103472804-127452517 (gain), 10:167784-133561220 (gain), 11:5146824-18367045 (gain), 11:18412318-47330031 (gain), 11:47331406-62787342 (gain), 11:62771629-66277492 (gain), 11:66278175-73876901 (gain), 11:73876699-96389956 (gain), 11:96389989-118958559 (gain), 11:66767-134412242 (gain), 12:911736-11171573 (gain), 12:11171194-42459715 (gain), 12:42456757-53299452 (gain), 12:53307456-57818734 (gain), 12:57819927-94650557 (gain), 12:94895297-111369121 (gain), 12:111405923-123409353 (gain), 12:19633659-133214832 (gain), 13:29509414-52450634 (gain), 13:52455429-113864076 (gain), 13:20256558-114337626 (gain), 17:41812680-46757679 (gain), 17:46762506-58007346 (gain), 17:58083419-74484798 (gain), 17:74609878-81222999 (gain), 17:158383-83095122 (gain), 18:12661833-54357964 (gain), 18:281040-80247514 (gain), 19:1275530-4831712 (gain), 19:4838341-10288522 (gain), 19:10289952-13880757 (gain), 19:13906201-18621039 (gain), 19:18637025-35124324 (gain), 19:35124513-38975742 (gain), 19:38990714-44089613 (gain), 19:44094361-48287608 (gain), 19:48321310-51369003 (gain), 19:51388289-55674716 (gain), 19:270863-58573575 (gain), 20:2658393-23826729 (gain)\",\n          \"1:923923-10381603 (gain), 1:10398592-20661544 (gain), 1:20664014-27959157 (gain), 1:27959588-37484377 (gain), 1:37489993-45328710 (gain), 1:45329163-62451804 (gain), 1:62454298-92298987 (gain), 1:92299059-112620825 (gain), 1:112619805-150579738 (gain), 1:150600851-155614951 (gain), 1:155659446-163076802 (gain), 1:163111121-184629019 (gain), 1:184690237-206684419 (gain), 1:206684905-227781826 (gain), 1:38814-248919946 (gain), 2:217730-27070622 (gain), 2:27070472-44361862 (gain), 2:44361947-70768225 (gain), 2:70900576-95386077 (gain), 2:95402708-113209396 (gain), 2:113215997-154858354 (gain), 6:43037617-75718281 (gain), 6:75749201-110254275 (gain), 6:110609978-139180802 (gain), 6:139239083-170407067 (gain), 6:497258-170584692 (gain), 7:23310209-45112047 (gain), 7:45157791-80679277 (gain), 7:80742538-100434126 (gain), 7:100435282-120858402 (gain), 7:120950763-142753072 (gain), 7:232137-159144867 (gain), 8:10764961-30177208 (gain), 8:30156319-64798737 (gain), 8:65602458-96336995 (gain), 8:96493813-133102912 (gain), 8:14475-145066685 (gain), 9:4984390-35675866 (gain), 9:35673928-90642862 (gain), 9:90801787-113164140 (gain), 9:113161006-128204383 (gain), 9:128191655-136359605 (gain), 9:46888-138124624 (gain), 10:13099449-44995891 (gain), 10:44970981-73169055 (gain), 10:73168119-95291012 (gain), 10:95311771-103458900 (gain), 10:103472804-127452517 (gain), 10:167784-133561220 (gain), 11:5146824-18367045 (gain), 11:18412318-47330031 (gain), 11:47331406-62787342 (gain), 11:62771629-66277492 (gain), 11:66278175-73876901 (gain), 11:73876699-96389956 (gain), 11:96389989-118958559 (gain), 11:66767-134412242 (gain), 12:911736-11171573 (gain), 12:11171194-42459715 (gain), 12:42456757-53299452 (gain), 12:53307456-57818734 (gain), 12:57819927-94650557 (gain), 12:94895297-111369121 (gain), 12:111405923-123409353 (gain), 12:19633659-133214832 (gain), 13:29509414-52450634 (gain), 13:52455429-113864076 (gain), 13:20256558-114337626 (gain), 14:26443090-55701526 (gain), 14:56117814-73595766 (gain), 14:73610945-94116695 (gain), 14:22773063-105530198 (gain), 15:30624494-43618800 (gain), 15:43628503-62165285 (gain), 15:62390526-74956772 (gain), 15:74957219-89912952 (gain), 15:46407-101652391 (gain), 16:1706166-8869012 (gain), 19:4838341-10288522 (gain), 19:10289952-13880757 (gain), 19:13906201-18621039 (gain), 19:18637025-35124324 (gain), 19:35124513-38975742 (gain), 19:38990714-44089613 (gain), 19:44094361-48287608 (gain), 19:48321310-51369003 (gain), 19:51388289-55674716 (gain), 19:270863-58573575 (gain), 20:2658393-23826729 (gain), 20:23875934-38578859 (gain), 20:38601809-51562831 (gain), 20:14216130-64100643 (gain), 21:26917922-45287898 (gain), 21:16961936-46665685 (gain), 22:26169462-37693476 (gain), 22:37697048-44010531 (gain), 22:276322-50783667 (gain), X:14690388-47619857 (gain), X:47582408-71073426 (gain), X:71095851-103832257 (gain), X:103918896-132489968 (gain), X:132626015-155239841 (gain), X:5000226-155943769 (gain)\",\n          \"1:923923-10381603 (gain), 1:10398592-20661544 (gain), 1:20664014-27959157 (gain), 1:27959588-37484377 (gain), 1:37489993-45328710 (gain), 1:45329163-62451804 (gain), 1:62454298-92298987 (gain), 1:92299059-112620825 (gain), 1:112619805-150579738 (gain), 1:150600851-155614951 (gain), 1:155659446-163076802 (gain), 1:163111121-184629019 (gain), 1:184690237-206684419 (gain), 1:206684905-227781826 (gain), 1:38814-248919946 (gain), 2:217730-27070622 (gain), 2:27070472-44361862 (gain), 2:44361947-70768225 (gain), 2:70900576-95386077 (gain), 2:95402708-113209396 (gain), 2:113215997-154858354 (gain), 2:156324437-181538940 (gain), 2:181535041-207173856 (gain), 2:207529737-227561217 (gain), 2:196763-241902551 (gain), 3:6770001-30894661 (gain), 3:31532638-47346816 (gain), 3:47381011-52246788 (gain), 3:52245759-97944984 (gain), 3:97941818-123884332 (gain), 3:123897305-142807888 (gain), 3:142815922-179588407 (gain), 3:179604690-197573323 (gain), 3:53286-198043720 (gain), 4:15703065-55636698 (gain), 4:55819790-87459455 (gain), 4:87473335-122898236 (gain), 4:123396795-165208549 (gain), 4:92168-189963202 (gain), 5:14143342-60844274 (gain), 5:60866454-83582303 (gain), 5:83637805-128659185 (gain), 5:128538013-141012347 (gain), 5:140801028-150679368 (gain), 5:150690792-176630556 (gain), 5:291630-181261150 (gain), 6:10694972-32153083 (gain), 6:32180968-43034156 (gain), 6:43037617-75718281 (gain), 6:75749201-110254275 (gain), 6:110609978-139180802 (gain), 6:139239083-170407067 (gain), 6:497258-170584692 (gain), 7:23310209-45112047 (gain), 7:45157791-80679277 (gain), 7:80742538-100434126 (gain), 7:100435282-120858402 (gain), 7:120950763-142753072 (gain), 7:232137-159144867 (gain), 8:10764961-30177208 (gain), 8:30156319-64798737 (gain), 8:65602458-96336995 (gain), 8:96493813-133102912 (gain), 8:14475-145066685 (gain), 9:4984390-35675866 (gain), 10:103472804-127452517 (gain), 10:167784-133561220 (gain), 11:5146824-18367045 (gain), 11:18412318-47330031 (gain), 11:47331406-62787342 (gain), 11:62771629-66277492 (gain), 11:66278175-73876901 (gain), 11:73876699-96389956 (gain), 11:96389989-118958559 (gain), 11:66767-134412242 (gain), 12:911736-11171573 (gain), 12:11171194-42459715 (gain), 12:42456757-53299452 (gain), 12:53307456-57818734 (gain), 12:57819927-94650557 (gain), 12:94895297-111369121 (gain), 12:111405923-123409353 (gain), 12:19633659-133214832 (gain), 13:29509414-52450634 (gain), 13:52455429-113864076 (gain), 13:20256558-114337626 (gain), 14:26443090-55701526 (gain), 14:56117814-73595766 (gain), 14:73610945-94116695 (gain), 14:22773063-105530198 (gain), 15:30624494-43618800 (gain), 15:43628503-62165285 (gain), 15:62390526-74956772 (gain), 15:74957219-89912952 (gain), 15:46407-101652391 (gain), 16:1706166-8869012 (gain), 16:8892097-28539008 (gain), 16:28553915-48448402 (gain), 16:48538726-67289499 (gain), 16:67289428-75623300 (gain), 16:142789-90019890 (gain), 17:1420689-7252491 (gain), 17:7251416-16777881 (gain), 17:17042457-31382116 (gain), 17:31391675-41812604 (gain), 17:41812680-46757679 (gain), 17:46762506-58007346 (gain), 17:58083419-74484798 (gain), 17:74609878-81222999 (gain), 17:158383-83095122 (gain), 18:12661833-54357964 (gain), 18:281040-80247514 (gain), 19:1275530-4831712 (gain), 19:4838341-10288522 (gain), 19:10289952-13880757 (gain), 19:13906201-18621039 (gain), 19:18637025-35124324 (gain), 19:35124513-38975742 (gain), 19:38990714-44089613 (gain), 19:44094361-48287608 (gain), 19:48321310-51369003 (gain), 19:51388289-55674716 (gain), 19:270863-58573575 (gain), 20:2658393-23826729 (gain), 20:23875934-38578859 (gain), 20:38601809-51562831 (gain), 20:14216130-64100643 (gain), 21:26917922-45287898 (gain), 21:16961936-46665685 (gain), 22:26169462-37693476 (gain), 22:37697048-44010531 (gain), 22:276322-50783667 (gain), X:14690388-47619857 (gain), X:47582408-71073426 (gain), X:71095851-103832257 (gain), X:103918896-132489968 (gain), X:132626015-155239841 (gain), X:5000226-155943769 (gain)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Create copy and save data files\n","adata_copy = gastruloid_annot_with_calls.copy()\n","# Convert problematic .var columns to strings\n","for col in ['gene_ids', 'start', 'end', 'genomic_pos']:\n","    if col in adata_copy.var.columns:\n","        adata_copy.var[col] = adata_copy.var[col].astype(str)\n","# Save the modified copy to file\n","adata_copy.write(r'/content/drive/My Drive/CSCB_Final/Data/gastruloid_annot_with_calls_cleaned.h5ad')"],"metadata":{"id":"jZiGJ88CuJUF","executionInfo":{"status":"ok","timestamp":1746671464366,"user_tz":240,"elapsed":2160,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":["# **Visualization of Results**"],"metadata":{"id":"6-knu7V6uJSI"}},{"cell_type":"code","source":["def plot_cna_heatmap(\n","    adata,\n","    cna_col='cnv_regions',  # Updated column name\n","    figsize=(16, 10),\n","    chromosomes=None,\n","    sort_cells=True,\n","    cluster_cells=False,\n","    group_by=None,\n","    cmap='coolwarm',\n","    title='Copy Number Alterations Across Cells',\n","    show_chromosome_labels=True,\n","    min_cells_for_chrom=1,\n","    max_cells=1000  # Added parameter to limit visualization for very large datasets\n","):\n","    \"\"\"\n","    Generate a heatmap visualization of CNAs across cells from an AnnData object.\n","\n","    Parameters\n","    ----------\n","    adata : AnnData\n","        AnnData object with CNA calls\n","    cna_col : str, default='cnv_regions'\n","        Column in adata.obs containing CNA region annotations\n","    figsize : tuple, default=(16, 10)\n","        Figure size (width, height)\n","    chromosomes : list, optional\n","        List of chromosomes to include, in display order. If None, will be inferred from data\n","    sort_cells : bool, default=True\n","        Whether to sort cells by CNA pattern similarity\n","    cluster_cells : bool, default=False\n","        Whether to hierarchically cluster cells by CNA pattern\n","    group_by : str, optional\n","        Column in adata.obs to group cells by (e.g., 'leiden', 'cell_type')\n","    cmap : str, default='coolwarm'\n","        Colormap for heatmap (blue=loss, red=gain)\n","    title : str, default='Copy Number Alterations Across Cells'\n","        Plot title\n","    show_chromosome_labels : bool, default=True\n","        Whether to show chromosome labels\n","    min_cells_for_chrom : int, default=1\n","        Minimum number of cells with CNAs on a chromosome to include it in the heatmap\n","    max_cells : int, default=1000\n","        Maximum number of cells to include in the heatmap (randomly sampled if exceeded)\n","\n","    Returns\n","    -------\n","    fig : matplotlib.figure.Figure\n","        Figure containing the heatmap\n","    ax : matplotlib.axes.Axes\n","        Axes containing the heatmap\n","    cna_matrix : pd.DataFrame\n","        DataFrame with the CNA matrix used for plotting\n","    \"\"\"\n","    import matplotlib.pyplot as plt\n","    import pandas as pd\n","    import numpy as np\n","    import re\n","    from scipy.cluster.hierarchy import linkage, dendrogram\n","    import seaborn as sns\n","\n","    if cna_col not in adata.obs.columns:\n","        raise ValueError(f\"Column '{cna_col}' not found in adata.obs. Available columns: {adata.obs.columns.tolist()}\")\n","\n","    # Check if there are any non-empty CNA annotations\n","    non_empty = adata.obs[cna_col].astype(str).str.strip() != \"\"\n","    if non_empty.sum() == 0:\n","        print(f\"No CNA data found in '{cna_col}' column. All entries are empty.\")\n","        return None, None, None\n","\n","    print(f\"Found {non_empty.sum()} cells with non-empty CNA annotations\")\n","\n","    # Extract CNA information from annotations\n","    # Initialize dictionaries to store CNA data\n","    cell_chrom_cna = {}  # {cell_id: {chrom: value}}\n","    all_chroms = set()\n","\n","    # Parse CNA region strings\n","    print(\"Parsing CNA annotations...\")\n","    for cell_id, cna_str in adata.obs[cna_col].items():\n","        if pd.isna(cna_str) or cna_str == \"\":\n","            continue\n","\n","        cell_chrom_cna.setdefault(cell_id, {})\n","\n","        # Split into individual CNA events\n","        cna_events = cna_str.split(\", \")\n","\n","        for event in cna_events:\n","            # Parse the event string using regex\n","            # Format: \"1:9588911-20196050 (gain)\" or \"X:12500000-15000000 (loss)\"\n","            match = re.match(r\"([^:]+):(\\d+)-(\\d+)\\s+\\(([a-z]+)\\)\", event)\n","            if not match:\n","                continue\n","\n","            chrom = match.group(1)\n","            start = int(match.group(2))\n","            end = int(match.group(3))\n","            state = match.group(4)\n","\n","            all_chroms.add(chrom)\n","\n","            # Assign CNA value\n","            cna_value = 1 if state == \"gain\" else -1 if state == \"loss\" else 0\n","\n","            # Store the CNA value for this chromosome\n","            # For simplicity, we'll use the dominant state (most events)\n","            current_value = cell_chrom_cna[cell_id].get(chrom, 0)\n","            if abs(cna_value) > abs(current_value):\n","                cell_chrom_cna[cell_id][chrom] = cna_value\n","\n","    # Prepare chromosomes list if not provided\n","    if chromosomes is None:\n","        # Sort chromosomes numerically then X, Y, others\n","        def chrom_key(c):\n","            if c.isdigit():\n","                return (0, int(c))\n","            elif c == 'X':\n","                return (1, 0)\n","            elif c == 'Y':\n","                return (1, 1)\n","            else:\n","                return (2, c)\n","        chromosomes = sorted(all_chroms, key=chrom_key)\n","\n","    # Create CNA matrix\n","    cells_with_cna = list(cell_chrom_cna.keys())\n","\n","    if not cells_with_cna:\n","        print(\"No CNAs found in the dataset. Check your annotations format.\")\n","        return None, None, None\n","\n","    print(f\"Found CNAs in {len(cells_with_cna)} cells across {len(all_chroms)} chromosomes\")\n","\n","    # Limit the number of cells for visualization if needed\n","    if len(cells_with_cna) > max_cells:\n","        print(f\"Limiting visualization to {max_cells} randomly selected cells (out of {len(cells_with_cna)})\")\n","        np.random.seed(42)  # For reproducibility\n","        cells_with_cna = np.random.choice(cells_with_cna, max_cells, replace=False).tolist()\n","\n","    # Create DataFrame of CNA values\n","    # Note: using objects as indices to avoid numeric conversion issues\n","    cna_matrix = pd.DataFrame(0, index=pd.Index(cells_with_cna, dtype=object), columns=chromosomes)\n","\n","    # Fill in CNA values\n","    for cell, chrom_dict in cell_chrom_cna.items():\n","        if cell in cna_matrix.index:  # Only process cells that are in our matrix (if we sampled)\n","            for chrom, value in chrom_dict.items():\n","                if chrom in chromosomes:\n","                    cna_matrix.at[cell, chrom] = value\n","\n","    # Filter chromosomes with insufficient cells\n","    if min_cells_for_chrom > 1:\n","        chrom_counts = (cna_matrix != 0).sum(axis=0)\n","        keep_chroms = chrom_counts[chrom_counts >= min_cells_for_chrom].index.tolist()\n","        if len(keep_chroms) < len(chromosomes):\n","            print(f\"Filtering out {len(chromosomes) - len(keep_chroms)} chromosomes with < {min_cells_for_chrom} cells\")\n","            cna_matrix = cna_matrix[keep_chroms]\n","            chromosomes = keep_chroms\n","\n","    # Handle grouping by a column in obs\n","    if group_by is not None and group_by in adata.obs.columns:\n","        # Get group for each cell\n","        cell_groups = {}\n","        for cell in cells_with_cna:\n","            if cell in adata.obs_names:\n","                group = adata.obs.at[cell, group_by]\n","                cell_groups[cell] = group\n","\n","        # Sort by group\n","        if cell_groups:\n","            # Convert to Series for sorting\n","            grouping = pd.Series(cell_groups)\n","            # Sort cells by group\n","            cna_matrix = cna_matrix.loc[cna_matrix.index.intersection(grouping.index)]\n","            grouping = grouping.loc[cna_matrix.index]\n","            cna_matrix = cna_matrix.loc[grouping.sort_values().index]\n","\n","            # For plotting group labels later\n","            groups = grouping.loc[cna_matrix.index]\n","            group_positions = {}\n","            current_pos = 0\n","\n","            # Calculate position for each group\n","            for group in groups.unique():\n","                group_cells = groups[groups == group].index\n","                group_positions[group] = (current_pos, current_pos + len(group_cells) - 1)\n","                current_pos += len(group_cells)\n","\n","    # Handle cell ordering (clustering/sorting) if not grouped\n","    elif cna_matrix.shape[0] > 1:  # Only if we have multiple cells\n","        if cluster_cells:\n","            try:\n","                # Hierarchical clustering\n","                Z = linkage(cna_matrix.values, method='ward')\n","                # Get the order of cells from clustering\n","                leaves = dendrogram(Z, no_plot=True)['leaves']\n","                cna_matrix = cna_matrix.iloc[leaves]\n","            except Exception as e:\n","                print(f\"Error during clustering: {e}. Falling back to sorting.\")\n","                sort_cells = True\n","\n","        if sort_cells:\n","            # Sort cells by similarity (sum of CNAs across chromosomes)\n","            try:\n","                cna_matrix = cna_matrix.iloc[cna_matrix.sum(axis=1).sort_values().index]\n","            except Exception as e:\n","                print(f\"Error during sorting: {e}. Using original order.\")\n","\n","    # Create plot\n","    fig, ax = plt.subplots(figsize=figsize)\n","\n","    # Plot heatmap\n","    sns.heatmap(cna_matrix, cmap=cmap, center=0, vmin=-1, vmax=1,\n","                cbar_kws={'label': 'Copy Number State', 'shrink': 0.5},\n","                yticklabels=False, ax=ax)\n","\n","    # Add group labels if grouping was applied\n","    if group_by is not None and 'group_positions' in locals():\n","        # Add horizontal lines at group boundaries\n","        for group, (start, end) in group_positions.items():\n","            if start > 0:  # Don't draw line at the top\n","                ax.axhline(y=start, color='black', linewidth=1)\n","\n","            # Add group labels at the midpoint of each group\n","            midpoint = (start + end) / 2\n","            ax.text(-0.05, midpoint, str(group),\n","                   verticalalignment='center', horizontalalignment='right',\n","                   transform=ax.get_yaxis_transform(), fontsize=10, fontweight='bold')\n","\n","    # Customize appearance\n","    ax.set_title(title, fontsize=14)\n","    ax.set_xlabel('Chromosome', fontsize=12)\n","    ax.set_ylabel('Cells', fontsize=12)\n","\n","    if not show_chromosome_labels:\n","        ax.set_xticklabels([])\n","\n","    # Add additional information\n","    plt.tight_layout()\n","\n","    # Calculate summary statistics\n","    total_cells = len(adata)\n","    cells_with_cna_count = len(cell_chrom_cna)\n","    cells_in_plot = len(cna_matrix)\n","\n","    print(f\"CNA Summary:\")\n","    print(f\"  Cells with CNAs: {cells_with_cna_count}/{total_cells} ({cells_with_cna_count/total_cells*100:.1f}%)\")\n","    if cells_in_plot < cells_with_cna_count:\n","        print(f\"  Showing {cells_in_plot}/{cells_with_cna_count} cells in plot (sampling applied)\")\n","\n","    # Count chromosomes with CNAs\n","    chrom_counts = (cna_matrix != 0).sum(axis=0)\n","    print(f\"  Chromosomes with CNAs (showing top 5):\")\n","    for chrom, count in chrom_counts.nlargest(5).items():\n","        print(f\"    Chromosome {chrom}: {count} cells ({count/cells_in_plot*100:.1f}%)\")\n","\n","    return fig, ax, cna_matrix"],"metadata":{"id":"viGpQ5vXuJQR","executionInfo":{"status":"ok","timestamp":1746671466112,"user_tz":240,"elapsed":21,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["# Basic usage\n","fig, ax, cna_matrix = plot_cna_heatmap(gastruloid_annot_with_calls, cna_col='cnv_regions')\n","\n","# If you want to group by cell type or cluster\n","if 'cell_type' in gastruloid_annot_with_calls.obs.columns:\n","    fig, ax, cna_matrix = plot_cna_heatmap(\n","        gastruloid_annot_with_calls,\n","        cna_col='cnv_regions',\n","        group_by='cell_type',\n","        figsize=(18, 12)\n","    )\n","\n","# Save the figure\n","fig.savefig('cna_task3_test1_gastruloids_heatmap.png', dpi=300, bbox_inches='tight')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"rxwmH4vpuYsP","executionInfo":{"status":"ok","timestamp":1746671717156,"user_tz":240,"elapsed":3569,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"4b1bc11b-b351-4644-80f3-18c5b17e3c9c"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 731 cells with non-empty CNA annotations\n","Parsing CNA annotations...\n","Found CNAs in 731 cells across 23 chromosomes\n","Error during sorting: invalid literal for int() with base 10: 'GCGAGAAGTAGAGCTG-1_96h'. Using original order.\n","CNA Summary:\n","  Cells with CNAs: 731/924 (79.1%)\n","  Chromosomes with CNAs (showing top 5):\n","    Chromosome 1: 694 cells (94.9%)\n","    Chromosome 19: 692 cells (94.7%)\n","    Chromosome 17: 686 cells (93.8%)\n","    Chromosome 18: 680 cells (93.0%)\n","    Chromosome 12: 679 cells (92.9%)\n","Found 731 cells with non-empty CNA annotations\n","Parsing CNA annotations...\n","Found CNAs in 731 cells across 23 chromosomes\n","CNA Summary:\n","  Cells with CNAs: 731/924 (79.1%)\n","  Chromosomes with CNAs (showing top 5):\n","    Chromosome 1: 694 cells (94.9%)\n","    Chromosome 19: 692 cells (94.7%)\n","    Chromosome 17: 686 cells (93.8%)\n","    Chromosome 18: 680 cells (93.0%)\n","    Chromosome 12: 679 cells (92.9%)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x1200 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABnUAAASlCAYAAAB+wFzDAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAu5NJREFUeJzs3Xl4VOX5P/57AiEglUWQzYVdwA1ckVYFEcWiVlpr1dqKaIvVulI3/CiLS1Gr1rVaFUH9utDaaqtQVKiobRHcV0LL5oKCgiKKAoGc3x/+SE0TloQkk5N5va5rLsg5Z565Z06Smcx77ufJJEmSBAAAAAAAALVaXrYLAAAAAAAAYNOEOgAAAAAAACkg1AEAAAAAAEgBoQ4AAAAAAEAKCHUAAAAAAABSQKgDAAAAAACQAkIdAAAAAACAFBDqAAAAAAAApIBQBwAAAAAAIAWEOgAAUIU6dOgQHTp0yHYZVeakk06KTCYTCxcuzHYpVaaunSOq38KFCyOTycRJJ51Uantd/PkAAKB2E+oAANQBL730UpxyyinRtWvXaNy4cTRq1Cg6d+4cP/3pT+Opp57KdnmVMmHChMhkMpHJZGLs2LHlHnPVVVdFJpOJCRMm1GxxdcBll10WmUwm8vPzY/HixRW67vTp0yOTycTo0aOrp7gtlAtvtD/77LMlPx9//OMfs11OrfDpp5/GFVdcEX369IkWLVpEfn5+bLvttjFgwIC4+eab44svvsh2iQAAsMWEOgAAKVZcXBzDhw+PvffeO+69997o1KlT/OIXv4izzz479tprr5g0aVIceuihcfnll2e71C1y9dVXxyeffJLtMuqMJEli/PjxkclkYu3atXHPPfdku6QaNW3atJg2bVq2y9gi48aNi4iITCYTd999d5aryb5p06ZFly5d4tJLL43PPvssjjnmmLjgggvi6KOPjg8++CDOOuus6NmzZ7bLBACALVY/2wUAAFB5l1xySfz2t7+NXr16xcMPPxydO3cutf+rr76KW265JZYtW5alCrdc586dY968eXHllVfGddddl+1y6oRp06bFwoULY9iwYfHQQw/F3XffHRdeeGG2y6ox//tzkjYrVqyIhx9+OHbfffdo3bp1PPnkk/Hee+/FDjvskO3SsuK1116LI488MiIi/t//+39xwgknlDlm+vTpMWLEiJouDQAAqpxOHQCAlJo7d25cc8010aJFi5gyZUq5b1Q3atQozj///BgzZkyp7UuXLo1zzjknOnbsGAUFBdGqVav40Y9+FG+++WaZMdZPZTV//vy45ppromvXrtGwYcPo2LFjXHbZZVFUVFRy7NSpUyOTycTpp59ebs3z5s2LvLy8GDhw4Gbfz5NOOim6dOkSt956a7z77rubPH5Da1+sl8lkol+/fqW29evXLzKZTKxevTouvvji2HHHHaNRo0ax1157xdSpUyMi4rPPPotf/vKX0a5du2jYsGH06dMnZs2atcE6li9fHqeeemq0adMmGjZsGHvssUc8+OCD5R6bJEncfffd8Z3vfCeaNGkSW221Vey9997ldmCMHj06MplMTJ8+PSZMmBB77rlnbLXVVmXu08as7/IYNmxYHHPMMfHvf/87nnvuuc267ujRo+Oggw6KiIgxY8aUTAH2v9OdrVmzJq6//vrYc889o3HjxrH11lvHAQccEH/961/LjPnN77Hrrrsudt555ygoKCg5hx988EGMGjUq9ttvv2jVqlUUFBREhw4d4vTTT4+PPvqo1FgdOnQo6Tzq2LFjSW3ffHw2tKbOypUrY9SoUdG9e/do2LBhbLPNNnH44YfHP//5z3Ifh/Xn4YEHHohevXpFo0aNom3btnH22WfHV199VeY6f/rTn6Jv377RqlWraNiwYbRr1y4GDBgQf/rTnzb1sJfy4IMPxpdffhknnnhinHjiiVFcXLzRKQg/+uij+NWvfhXdunWLRo0axTbbbBO9e/eOa6+9tuSYb/7czJ49O77//e9HixYtSp3XtWvXxvXXXx89e/aMRo0aRdOmTeOggw6Kxx57rMxtFhcXx1133RX77rtvbLPNNtGoUaPYfvvt48gjj4zp06dX6eNy1llnxVdffRU333xzuYFOxNc/4/97uxFfT2N35JFHRsuWLaOgoCC6du0al1xySXz55ZebddsbUlXnGgAA/pdOHQCAlJowYUKsW7cuTj311GjduvVGjy0oKCj5/8cffxx9+vSJefPmRb9+/eK4446LBQsWxMMPPxyTJk2KJ554Ivbff/8yY5xzzjnxz3/+M370ox/Ft771rXjsscdi1KhR8frrr8fDDz8cEREHH3xwdO7cOR544IG49tprY6uttio1xl133RVJksTPf/7zzb6f9evXjyuvvDKOPfbYuPTSS6t1qrBjjz023njjjfje974XX331Vdx///1xxBFHxD//+c8YNmxYrFmzJo455pj4+OOPY+LEiXHYYYfFggULomnTpqXGWbNmTQwYMCC++OKL+OlPfxorV66MP/zhD/HjH/84li5dGmeeeWbJsUmSxAknnBAPPvhgdO3aNX784x9HgwYN4qmnnopTTjkl3n777VJvvq/3m9/8Jp5++uk46qij4tBDD4169ept1n385JNP4pFHHomdd9459tprrzjxxBNj3LhxMW7cuDjggAM2ef1+/frFwoUL45577om+ffuWCkuaNWsWERGrV6+Oww47LKZPnx69evWKU045JYqKimLSpElx1FFHxc033xxnnHFGmbHPPPPMeP755+Pwww+PI488Mlq1ahURX7/xft1118XBBx8cvXv3jvz8/HjllVfitttuiyeeeCJefvnlknNwzjnnxIQJE+K1116Ls88+u6Sm8kKcb1q1alX0798/Zs2aFXvuuWecc845sWTJkpg4cWI88cQT8eCDD8YxxxxT5nq33HJLTJkyJY466qjo379/TJkyJW666aZYunRp3H///SXH3XbbbXH66adH27ZtSwKTxYsXx6xZs+KRRx6Jo48+epOP/Xrjxo2LevXqxQknnBBNmjSJ0047LcaPHx+XXHJJZDKZUsfOmTMnDjrooPjwww9j//33j8GDB8fKlSvjrbfeil//+tdx3nnnlTp+7ty5sd9++8Vuu+0WJ510UixbtiwaNGgQSZLED3/4w/jLX/4SO+20U/zyl7+MlStXxsSJE+N73/teXH/99XHuueeWjDNixIi45ppronPnzvHjH/84tt5661i0aFH84x//iKlTp5Z832zp4zJ37tx49tlnY4cddoihQ4du9Nhv/h5cf9u//OUvo1mzZiXfby+++GJceeWV8fTTT8fTTz8dDRo02NTpKKMqzzUAAJSRAACQSv369UsiIpk6dWqFrjd06NAkIpIRI0aU2j5p0qQkIpIuXbok69atK9k+ZMiQJCKSbbfdNnnvvfdKtq9evTo58MADk4hIHn744ZLtV199dRIRyYQJE0qNX1RUlLRt2zZp1apVsmbNmk3WOX78+CQikrFjxybFxcXJPvvsk+Tl5SWvvfZayTFjx45NIiIZP358ybYFCxYkEZEMGTKk3HEjIunbt2+pbX379k0iItl///2TL774omT7xIkTk4hImjVrlhxzzDFJUVFRmft53XXXlRqrffv2SUQkBx54YLJ69eqS7e+9917SsmXLpKCgIHn//fdLtt9xxx1JRCRDhw4t9bisXr06OfLII5OISF588cWS7aNGjUoiImncuHHy+uuvb/xBLMdNN91U8rgmSZIUFxcnHTp0SLbaaqvks88+K3P8+vO/YMGCkm1PP/10EhHJqFGjyr2Niy++OImI5NJLL02Ki4tLtq9YsSLZe++9kwYNGiSLFi0qcxvbb7998s4775QZb8mSJcnnn39eZvs999yTRERyxRVXbLLmb2rfvn3Svn37UtvGjBmTRERywgknlKr55ZdfTho0aJA0a9YsWbFiRcn29eehadOmSWFhYcn2L7/8Mtlpp52SvLy8Uvdxzz33TBo0aJAsWbKkTD1Lly4tt87yvP7660lEJAMHDizZduKJJ27wd8Hee++dRERyxx13lNn3zZ/n9T83EZGMHDmyzLHrH+u+ffuW+r5+5513kpYtWyb169dP5s2bV7J9m222Sdq1a5esXLmyzFjLli0r+f+WPi4TJkxIIiL5yU9+ssljv+mtt95K6tevn/Ts2bPM7az/vXLttdeWbNvQ75Xyvteq6lwDAEB5TL8GAJBSixcvjoiI7bfffrOvs2bNmnjwwQejRYsWcckll5TaN2jQoDjkkENi7ty55U43dfbZZ5e6rQYNGsSVV14ZEVFq6qehQ4dGgwYN4q677ip1/UmTJsWHH34YQ4YMifz8/M2uOeLrKdOuvvrqKC4ujosuuqhC162IK6+8Mho3blzy9Q9/+MPIz8+P5cuXx7XXXhv16/+30f3444+PiK/X8yjPr3/961Kf8t9+++3j7LPPjtWrV8dDDz1Usv2WW26Jxo0bx6233lrqcfnm41vetG3Dhg2L3XbbrcL3cdy4cZGXlxc/+clPIuLrx/YnP/lJfPnll6Xqqqzi4uK47bbbonPnziXTs6239dZbx8iRI2PNmjXx5z//ucx1zz///Nhxxx3LbG/VqlV861vfKrP9pz/9aTRp0qRkirwtcc8990R+fn5cddVVpWreY489YsiQIbF8+fJ49NFHy1zv7LPPjm7dupV83ahRozj++OOjuLg4XnrppVLH5ufnl/u936JFi82uc/3UeSeeeGLJtvX/X79vvVmzZsWLL74YBx54YLndceX97mjTpk383//9X5nt6zvkrrnmmlLf1zvuuGOce+65sXbt2lKdSRFffw+X10G2zTbblPp6Sx6XyvwejIj4/e9/H2vXro2bb765zO1ccMEFse22225wusTNURXnGgAAymP6NQCAHFJYWBirVq2Kgw46qMzUaBERBx10UDz11FPx6quvlpmKq7ypufr06RP169ePV155pWTbtttuGz/4wQ/ioYceisLCwujevXtEREnI87Of/axStR900EFx2GGHxd/+9rd45plnom/fvpUaZ2N69epV6uu8vLxo1apVfPnll2XChrZt20bE1+u9/K/69etHnz59ymxf/xiuf7y+/PLLeOONN6Jdu3Zx9dVXlzl+/XpFhYWFZfbtu+++m3GPSnvxxRfjtddei4MPPrjUm+AnnnhiXHHFFTFu3LgYNmxYhcf9pjlz5sSnn34a7dq1K7OWU8TX0/9FVPw+/fnPf47f//738fLLL8enn34a69atK9lX3jmoiBUrVsT8+fOjR48e5YYDBx10UNx5553x6quvxk9/+tNS+/baa68yx68fY/ny5SXbjjvuuLjgggti1113jR//+Mdx0EEHxf777x9NmjTZ7DpXr14d/+///b/Yeuut4/vf/36p+nbYYYd45JFH4tNPP43mzZtHRJSs+XTooYdu9m307Nmz3CnHXnnlldhqq63KPUfr11h69dVXS7Ydd9xx8bvf/S523XXXOO644+Kggw6KPn36RKNGjUpdtyoel8p4/vnnIyLiiSeeiGnTppXZn5+fX+736ObI1n0CACA3CHUAAFKqTZs2UVhYGIsWLSrVKbAxK1asiIjY4Bo864OK9cd9U3nXqVevXrRo0SI+++yzUttPPfXUeOihh+Kuu+6Ka6+9Nj744IP429/+Fn379o2ddtpps2otz1VXXRVPPvlkXHDBBTFz5sxKj7Mh5b3pWr9+/Q1uj/hv8PJNLVu2jLy8sk3x6x/D9Y/Xp59+GkmSxKJFi8oNQNZbuXLlBseqiPK6PCIiunbtGvvtt188//zz8dZbb8Uuu+xS4bHX++STTyIi4q233oq33nprg8dV5D5dd911cd5558W2224bhx56aGy//fYl4cANN9wQq1evrnS9EVv2c7Gx741vBk/nnXdetGjRIm677ba47rrrSjq/Dj/88Pjtb38bHTt23GSdjz76aCxbtiyGDh1aKhzJy8uLE044Ia666qp44IEH4pe//GVE/Pf7bLvtttvk2Ott6DFYsWJF7LDDDuXuK+/xufHGG6Njx44xfvz4uOKKK+KKK66Ihg0bxo9+9KO47rrromXLlhGx5Y9LmzZtIiJi0aJFm30fI/77fbq+G64qVcW5BgCADTH9GgBASn3nO9+JiCj3U+Ybsv4N6CVLlpS7f/1URuW9UV3eddatWxfLli0rWaR+vX79+kX37t3j3nvvjTVr1sT48eNj3bp15U4BVRE9e/aME044IWbNmhV//OMfyz1mfZiydu3aMvv+N3yqLkuXLo3i4uIy29c/husfr/WP81577RVJkmzw8vTTT5cZ65tThG2Or776qmQ6qSFDhkQmkyl1Wd+58L9TeFXU+vt09NFHb/Q+jR8/frPu09q1a+Pyyy+Ptm3bxptvvhn3339/XH311TF69OgYNWpUrFmzZovq/WbNlfm52FyZTCZOPvnkeOGFF+Ljjz+ORx55JH7wgx/EX/7ylzjiiCNKBUAbsv7cjB8/vsz5u+qqq0odExHRrFmziKhY4LGh76smTZrERx99VO6+8h6f+vXrx3nnnRdvvfVWLFq0KB544IE44IAD4t57740TTjih1O1tyeOy/vfg9OnTy/2Z25D1ta5YsWKj36eVURXnGgAANkSoAwCQUieddFLUq1cv7rjjjpIprTZkfSdD9+7do2HDhvHCCy/El19+Wea46dOnR0TZacgiIp577rky22bMmBFr166NPfbYo8y+YcOGxccffxyPPvpo3H333dG8efM4+uijN+Oebdzll18eBQUF8X//93/lBjcbeyP7m9PEVae1a9fGjBkzymxf/xiuf7y23nrr6NGjR8yePbvUVF3V4eGHH47PPvssevXqFaecckq5l4YNG8Z99923yaBk/Top5b053aNHj2jSpEm8+OKL5XYxVdTSpUvjs88+iz59+kSrVq1K7XvxxRfjq6++qlB95WnSpEl06tQp5s6dW+73zcZ+LiqjRYsWMXjw4Jg4cWL0798/3n777Zg7d+5Gr/POO+/EtGnTonXr1hs8fx07doxXXnml5Pt8/VRpTz755BbXvMcee8SXX35ZMqXbN23q8WnXrl0cf/zxMWXKlOjSpUtMnTq13PNWmcelS5cuceCBB8Z7771Xsu7Phnyzo6t3794R8d9p2KpLZe4TAABsjFAHACClunTpEhdccEEsXbo0vvvd78aCBQvKHLNq1aq4/vrrY/To0RHx9cLlxx9/fCxdujTGjh1b6tgpU6bEE088EV26dCn59Ps33XjjjfH++++XfL1mzZqSBdVPOumkMscPGTIkGjZsGOeee27Mnz8/fvrTn0bDhg234B5/rX379nH66afHf/7zn5gwYUKZ/U2aNIlu3brFP/7xj1Jvnn7++ecxYsSILb79zXXxxReXCkfef//9uPHGG6OgoCCOO+64ku1nnXVWfPnll/Hzn/+83CnJFixYEAsXLtzietZ3cFx//fVx1113lXv5/ve/H0uXLo2//vWvGx1r/UL37733Xpl99evXj9NOOy3eeeedOO+888oNdt58880Ndn38r1atWkWjRo3i5ZdfLhVEfvrpp3HmmWdWuL4NGTJkSBQVFcWIESNKdWi8/vrrMWHChGjatGkMHjx4s8f7X9OnTy/T+VFUVFQyDdimfjbGjx8fxcXFceqpp27w/F100UUR8d9zvc8++8Q+++wTzz77bNx5551lxqxIB8+QIUMiImLEiBGlzul7770X119/fdSvX7+kA2f16tXxr3/9q8wYK1eujC+++CLy8/NLOuq29HGJ+Pp3U6NGjeKMM86IiRMnlnvMc889F/379y/5+vTTT4/69evHmWeeGe+++26Z45cvX17pELgq7hMAAGyINXUAAFLsiiuuiFWrVsVvf/vb6NatW/Tv3z923XXXyM/PjwULFsTUqVNj2bJlccUVV5Rc5+qrr45nnnkmrrjiivjXv/4VvXv3joULF8Yf//jH2GqrrWL8+PHlrgez3377Rc+ePePYY4+Nxo0bx2OPPRZz5syJH/zgB+V24GyzzTZxzDHHxH333RcRscVTr33T//3f/8Xdd98d8+bNK3f/r371qxg2bFj06dMnjjnmmCguLo6//e1vsc8++1RZDRvTtm3bWLlyZey+++5x5JFHxsqVK+MPf/hDLFu2LG666aZSa5yceuqp8fzzz8c999wT//znP2PAgAHRrl27WLJkSRQWFsbMmTPjgQceiA4dOlS6nrlz58azzz4bHTp0iH79+m3wuKFDh8aDDz4Y48aNix/+8IcbPK579+7Rrl27eOihh6KgoCC23377yGQyceaZZ0bTpk1jzJgx8fLLL8dNN90UkyZNigMPPDBatWoVixYtijfeeCNee+21mDFjRpnOm/Lk5eXF6aef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AAAAAKSAUAcAAAAAACAFhDoAAAAAAAApINQBAAAAAABIAaEOAAAAAABACtT5UKdfv36RyWSiX79+2S4FAAAAAACg0qos1FkfnpR3efTRRzdrjA4dOkQmk4nRo0dXVVkAAAAAAAB1Qv2qHrBBgwaxxx57lNq2zTbbVPXNZMW6desiIqJevXpZroTarkfh5GyXUO1mdx+U7RIAgBqUC69vSD+vUUkDv08BgC1R5aFO27Zt4/nnny9333/+858YNWpU/P3vf49PPvkkWrVqFccdd1ycccYZ0bFjx5LjxowZE2PGjImIiCRJIiLiH//4R1x++eXx/PPPx6pVq6JTp05x8sknx/Dhw0tClk8//TROPfXUePzxx6Nly5Zx8cUXl1vH6tWr49e//nU88MAD8c4770SzZs3iiCOOiGuuuSZatmwZERGjR4+OMWPGRPv27eOyyy6LMWPGxMKFC2PevHkxevTouOeee6J9+/YxZsyYuOSSS+Kzzz6Lk08+OcaOHRsjRoyI8ePHR9OmTePiiy+OX/ziF1X2+JIO/pgEAOoar28AqobfpwBVp1PRnGyXADWuykOdDZk7d27su+++sXz58qhXr17stNNO8emnn8bUqVPjV7/6VfTu3TteeeWVWLNmTWy33Xax/fbbl1x3+vTpccghh8TatWujefPm0b59+ygsLIwLLrgg/v3vf8edd94ZERE/+9nP4s9//nNERGy11VZx3nnnlVvLD37wg5g8eXLUq1cvdtlll1i4cGGMHz8+Zs6cGS+++GI0atSo5NgPPvggTjrppOjatWu0bt261DgffvhhnH766dG2bdv4/PPP48Ybb4wnn3wyFi1aFE2bNo333nsvfvnLX0bfvn2jR48eVf2QAgAAAAAAOaTK1tRZ75133imzpk5ExK9//etYvnx55Ofnx7PPPhtvv/12fPjhhzF+/PiS7p62bdtGxNfhzPPPP1/S8TNq1KhYu3ZttG/fPubPnx///ve/4+yzz46IiHHjxsX8+fNj3rx5JYHOhRdeGIWFhfHSSy/F6tWrS9X3zDPPxOTJX7c6//3vf4/XXnstCgsLo1GjRvH222/HAw88UOr4oqKi+N3vfhdz5syJRYsWxY477liyb82aNfHkk0/Gv//979hhhx0i4uvw6rXXXou33347GjZsGMXFxfHMM89U9cMMAAAAAADkmBpZUyciYubMmRER0bdv3/j2t79dsr28Y//XCy+8EBERgwYNimbNmkVExI9//OO48cYbI0mSeOmll6KgoKDk+KOPPjoiIrp16xa77757vPzyyyX7Zs2aVfL/vn37lrmt559/Pk455ZSSrxs1ahTDhg2LiCgVUkVENG/ePL7zne9ERMSOO+4Y7733Xuy6667RoUOHiIho1apVvPvuu7FkyZJN3kcAAADAmjN1gSnmAKD61OiaOrVN7969y2xr06ZNqa+33XbbyMsrv6GpSZMmJf+vX79+mW3rA6D16wIBAAAAAABUVo2tqdO7d+94++2345lnnomZM2eWBCqvvfZa9OzZMyK+XgcnImLlypWlrrvPPvvEs88+G5MnT47ly5dHs2bN4sEHH4yIr4OTvfbaK4qLi0uOf+SRR2KfffaJf//73/H666+XGWu9ESNGxFFHHRUREWvXro2pU6dG9+7dSx3/zc4cAAAAoHrp8gAA2LAqX1Pnww8/jP3226/UZeLEiXHxxRdHs2bNoqioKL7zne/ELrvsEtttt10MGTKk5LrrA5Wbbrop9tlnnxg6dGhERIwZMybq168f77zzTnTq1Cl22mmnuOGGGyIi4pRTTolOnTpFly5dYvDgwRERMXbs2OjRo0fsueeeUa9evVL19evXLwYOHBgREYMHD47u3bvHLrvsEs2aNYvvfve7sXDhwqp+SAAAAAAAALZYlYc6a9asiZkzZ5a6fPjhh9GlS5eYNWtWHH/88dGiRYv4z3/+ExERBx98cMl1r7jiithvv/0iLy8vXnzxxXjjjTci4usg5umnn45DDjkk1q1bFwsXLozu3bvH1VdfHbfffnvJ9ceNGxdHH310NGzYMD777LO47LLLYr/99itT46OPPhojR46Mrl27xvz582Px4sXRo0ePuOSSS2LXXXet6ocEAAAAAABgi2USC75Qwybld8t2CQAAAABAyh1eNCfbJUCNq/JOHQAAAAAAAKqeUAcAAAAAACAFhDoAAAAAAAApINQBAAAAAABIAaEOAAAAAABACgh1AAAAAAAAUkCoAwAAAAAAkAJCHQAAAAAAoFZ59tln48gjj4x27dpFJpOJRx99dJPXmT59euy5555RUFAQXbp0iQkTJpQ55tZbb40OHTpEw4YNo3fv3jFr1qyqL74aCXUAAAAAAIBaZeXKldGzZ8+49dZbN+v4BQsW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YYcdVt13o8ro1AEAarUehZOzXQKQA2Z3H5TtEgAAIDvyam/vx8SJE2P48OFx++23R+/eveOGG26IgQMHxpw5c6JVq1Zljp8+fXocf/zx8e1vfzsaNmwYV199dRx66KHx1ltvxXbbbVdy3GGHHRbjx48v+bqgoKBG7k9VyCRJkmS7CHLLpPxu2S4BAAAAAEi5w4vmZLuEOuHLf/6pxm6r3t5HxOrVq0ttKygo2GCo0rt379hnn33illtuiYiI4uLi2GGHHeLMM8+Miy66aJO3t27dumjevHnccsstceKJJ0bE1506y5cvj0cffXTL7kyW1N4IDgAAAAAAqFZJJlNjl7Fjx0bTpk1LXcaOHVtuXWvWrImXXnopBgwYULItLy8vBgwYEDNmzNis+/bll19GUVFRbLPNNqW2T58+PVq1ahXdunWL0047LZYtW1b5B7CGmX4NAAAAAACodiNGjIjhw4eX2rahLp2lS5fGunXronXr1qW2t27dOgoLCzfr9i688MJo165dqWDosMMOix/84AfRsWPHmDdvXlx88cXx3e9+N2bMmBH16tWr4D2qeUIdAAAAAADIVZmam9BrY1OtVbWrrroqHnrooZg+fXo0bNiwZPtxxx1X8v/ddtstdt999+jcuXNMnz49Dj744GqrZ9WqVaXqqCzTrwEAAAAAALVKy5Yto169erFkyZJS25csWRJt2rTZ6HWvvfbauOqqq+LJJ5+M3XfffaPHdurUKVq2bBlz587d4pr/V3FxcVx++eWx3Xbbxbe+9a2YP39+RERceumlMW7cuEqNKdQBAAAAAABqlQYNGsRee+0V06ZNK9lWXFwc06ZNiz59+mzwetdcc01cfvnlMWXKlNh77703eTvvv/9+LFu2LNq2bVsldX/TFVdcERMmTIhrrrkmGjRoULJ91113jbvuuqtSYwp1AAAAAAAgRyWZvBq7VNTw4cPjzjvvjHvuuSdmz54dp512WqxcuTKGDh0aEREnnnhijBgxouT4q6++Oi699NK4++67o0OHDrF48eJYvHhxfPHFFxER8cUXX8T5558fzz//fCxcuDCmTZsWRx11VHTp0iUGDhxYNQ/oN9x7771xxx13xAknnFBqvZ6ePXtu9rpA/8uaOgAAAAAAQK1z7LHHxscffxwjR46MxYsXR69evWLKlCnRunXriIh49913Iy/vv2HRbbfdFmvWrIkf/vCHpcYZNWpUjB49OurVqxevv/563HPPPbF8+fJo165dHHrooXH55ZdXy1o/ixYtii5dupTZXlxcHEVFRZUaU6gDAAAAAJTSo3BytksAakomk+0KNuqMM86IM844o9x906dPL/X1woULNzpWo0aN4oknnqiiyjZt5513jueeey7at29favvDDz8ce+yxR6XGFOoAAAAAAKXM7j4o2yXAJnUqmpPtEmCjRo4cGUOGDIlFixZFcXFx/PnPf445c+bEvffeG48//nilxrSmDgAAAAAA5KjavKZO2h111FHx2GOPxdSpU6Nx48YxcuTImD17djz22GNxyCGHVGpMnToAAAAAAADV4IADDoinnnqqysYT6gAAAAAA1DHWRWKz1fI1ddKsU6dO8cILL0SLFi1KbV++fHnsueeeMX/+/AqPmXv9TgAAAAAAANVs4cKFsW7dujLbV69eHYsWLarUmDp1AAAAAADqmNndB2W7hGrXqWhOtkuoG3JwrZvq9te//rXk/0888UQ0bdq05Ot169bFtGnTokOHDpUaW6gDAAAAAFDHmH4Nsmfw4MEREZHJZGLIkCGl9uXn50eHDh3iuuuuq9TYQh0AAAAAAMhRiTV1qlxxcXFERHTs2DFeeOGFaNmyZZWNLdQBAAAAAKhjTL8G2bdgwYIqH1OoAwAAAAAAucqaOtVq5cqV8cwzz8S7774ba9asKbXvrLPOqvB4Qh0AAAAAAIAq9sorr8SgQYPiyy+/jJUrV8Y222wTS5cuja222ipatWol1CEdLNIGAJA+uTB9B6SBv6cAANLj3HPPjSOPPDJuv/32aNq0aTz//PORn58fP/nJT+Lss8+u1JiZJEmSKq4TNmpSfrdslwAAAAAApNzh1tSpEp+9PLXGbqvpngNq7LZqg2bNmsXMmTOjW7du0axZs5gxY0b06NEjZs6cGUOGDInCwsIKj2myPAAAAAAAgCqWn58feXlfxzCtWrWKd999NyIimjZtGu+9916lxjT9GgAAAAAA5Kgko/ejuuyxxx7xwgsvRNeuXaNv374xcuTIWLp0adx3332x6667VmpMZwsAAAAAAKCK/frXv462bdtGRMSVV14ZzZs3j9NOOy0+/vjj+P3vf1+pMXXqAAAAAABArtKpU2323nvvkv+3atUqpkyZssVjOlsAAAAAAABVrH///rF8+fIy21esWBH9+/ev1Jg6dQAAAAAAIEclmUy2S6izpk+fHmvWrCmzfdWqVfHcc89VakyhDgAAAAAAQBV5/fXXS/7/9ttvx+LFi0u+XrduXUyZMiW22267So0t1AEAAAAAgByVWFOnyvXq1SsymUxkMplyp1lr1KhR3HzzzZUaW6gDAAAAAABQRRYsWBBJkkSnTp1i1qxZse2225bsa9CgQbRq1Srq1atXqbGFOgAAAAAAkKusqVPl2rdvHxERxcXFVT62vioAAAAAAIAq8u9//ztmzZpVatu0adPioIMOin333Td+/etfV3psoQ4AAAAAAEAVufDCC+Pxxx8v+XrBggVx5JFHRoMGDaJPnz4xduzYuOGGGyo1tunXAAAAAAAgRyUZvR9V7cUXX4wLLrig5Ov7778/dtppp3jiiSciImL33XePm2++Oc4555wKj+1sAQAAAAAAVJGlS5fG9ttvX/L1008/HUceeWTJ1/369YuFCxdWamyhDgAAAAAA5KgkMjV2yRXbbLNNfPjhhxERUVxcHC+++GLst99+JfvXrFkTSZJUamyhDgAAAAAAQBXp169fXH755fHee+/FDTfcEMXFxdGvX7+S/W+//XZ06NChUmNbU4caNzdZle0SgBzR8U83ZbuEarfg6LOyXQIAAACQYtbUqXpXXnllHHLIIdG+ffuoV69e3HTTTdG4ceOS/ffdd1/079+/UmNnksr2+EAlZTK502YHAAAAAFQPb21XjY/fmlljt7XtLr1r7Laybe3atfHWW2/FtttuG+3atSu177XXXovtt98+WrRoUeFxdepQ426ot2O2SwAAAAAAICLCh/CrRf369aNnz57l7tvQ9s0at9LXhErqkmmY7RIAAAAAACB1hDoAAAAAAJCjkrCmTpo4WwAAAAAAACkg1AEAAAAAgByVZDI1dskla9eujcsuuyzef//9Kh1XqAMAAAAAAFCF6tevH7/5zW9i7dq1VTtulY4GAAAAAACkRpLR+1Fd+vfvH88880x06NChysYU6gAAAAAAAFSx7373u3HRRRfFG2+8EXvttVc0bty41P7vfe97FR4zkyRJUlUFwuaYlN8t2yXAJvUonJztEgAAICfN7j4o2yUA4e9i0qFT587ZLqFOWFz4So3dVpvue9TYbdUGeXkb7oLKZDKxbt26Co+pUwcAAAAAAHJUEplsl1BnFRcXV/mYQh2Acvh0IAAAALnM38WkQaeiOdkuATbbqlWromHDhls8jhWQAAAAAAAgRyWZvBq75Jp169bF5ZdfHtttt11861vfivnz50dExKWXXhrjxo2r1Ji59ygCAAAAAABUsyuvvDImTJgQ11xzTTRo0KBk+6677hp33XVXpcYU6gAAAAAAQI5KMpkau+Sae++9N+6444444YQTol69eiXbe/bsGYWFhZUaU6jDJr366qvx4IMPltr2xBNPxIEHHhi9e/eOG2+8MUuVAQAAAABA7bRo0aLo0qVLme3FxcVRVFRUqTGFOmzSBRdcEBMnTiz5esGCBfH9738/FixYEBERw4cPjzvuuCNb5QEAAAAAUElJZGrskmt23nnneO6558psf/jhh2OPPfao1Jj1t7Qo6r7XXnstzj///JKv77333qhXr1688sor0bJlyzj22GPj9ttvj2HDhmWxSgAAAAAAqD1GjhwZQ4YMiUWLFkVxcXH8+c9/jjlz5sS9994bjz/+eKXG1KnDJn322WfRokWLkq8nT54chxxySLRs2TIiIg455JCYO3dutsoDAAAAAKCSkkxejV1yzVFHHRWPPfZYTJ06NRo3bhwjR46M2bNnx2OPPRaHHHJIpcbUqcMmtW3bNmbPnh0RER9++GG89NJLMXTo0JL9X3zxReTl5d4PJAAAAAAAbMwBBxwQTz31VJWNJ9Rhk4466qi4+eabY9WqVTFz5swoKCiI73//+yX7X3vttejUqVMWKwQAAACgKvUonJztEoAakotr3dS0F198saRxYuedd4699tqr0mMJddikK664Ij7++OO47777olmzZjFhwoRo3bp1RESsWLEiHn744fjlL3+Z5SoBAAAAqCqzuw/KdgmwSZ2K5mS7BNio999/P44//vj45z//Gc2aNYuIiOXLl8e3v/3teOihh2L77bev8JiZJEmSKq6THFJcXByff/55bLXVVpGfn79Z15mU362aqwIAAAAA6rrDhTpV4p25Nfc4tu+SW+8NH3bYYbF8+fK45557olu3r+/7nDlzYujQodGkSZOYMmVKhcfUqcMWycvLi6ZNm2a7DAAAAAAAqFWeeeaZ+Ne//lUS6EREdOvWLW6++eY44IADKjWmUIcyLrvssgpfJ5PJxKWXXloN1aSTeWehdjBdAGngOQOoKZ4XAQCgZu2www5RVFRUZvu6deuiXbt2lRpTqEMZo0ePrvB1hDoAAAAAAOmTRCbbJdRZv/nNb+LMM8+MW2+9Nfbee++IiHjxxRfj7LPPjmuvvbZSY1pThxqXC2vq+NQ11A4+kQwA/+U1KmnhNRzUDp43SINOnTtnu4Q6YeHcf9fYbXXoslON3Va2NG/ePDKZ/wZlK1eujLVr10b9+l/32Kz/f+PGjeOTTz6p8Pg6daAa+CMEAIDaxmtUACqirj9vCK3gv5JMXrZLqFNuuOGGah1fqAMAAAAAANRKt956a/zmN7+JxYsXR8+ePePmm2+Offfdd4PH//GPf4xLL700Fi5cGF27do2rr746Bg36b1CdJEmMGjUq7rzzzli+fHl85zvfidtuuy26du1aJfUOGTKkSsbZEKEOZXTs2LFUe9jmyGQyMW/evGqqCAAAqpdP69YNJ57zfrZLqHYjpgzLdgkAdUJd70TKFZ2K5mS7hDqhNq+pM3HixBg+fHjcfvvt0bt377jhhhti4MCBMWfOnGjVqlWZ4//1r3/F8ccfH2PHjo0jjjgiHnjggRg8eHC8/PLLseuuu0ZExDXXXBM33XRT3HPPPdGxY8e49NJLY+DAgfH2229Hw4YNq+V+fPTRR/HRRx9FcXFxqe277757hceypg5lnHTSSRUOdSIixo8fv1nH5cKaOgAAAABA9TpcqFMl5tfgh/W32377WL16daltBQUFUVBQUO7xvXv3jn322SduueWWiIgoLi6OHXbYIc4888y46KKLyhx/7LHHxsqVK+Pxxx8v2bbffvtFr1694vbbb48kSaJdu3bxq1/9Ks4777yIiPjss8+idevWMWHChDjuuOOq6q5GRMRLL70UQ4YMidmzZ8f/RjGZTCbWrVtX4TF16lDGhAkTsl0CAAAAAAA1IKnEB/wra+zYsTFmzJhS20aNGhWjR48uc+yaNWvipZdeihEjRpRsy8vLiwEDBsSMGTPKHX/GjBkxfPjwUtsGDhwYjz76aERELFiwIBYvXhwDBgwo2d+0adPo3bt3zJgxo8pDnZNPPjl22mmnGDduXLRu3bpSzRT/S6gDAAAAAABUuxEjRpQJXTbUpbN06dJYt25dtG7dutT21q1bR2FhYbnXWbx4cbnHL168uGT/+m0bOqYqzZ8/P/70pz9Fly5dqmzMvCobiTptxYoVcdVVV8XAgQNjjz32iFmzZkVExCeffBLXX399zJ07N8sVAgAAAABQUUmSqbFLQUFBNGnSpNRlQ6FOXXDwwQfHa6+9VqVj6tRhk95///3o27dvvPfee9G1a9coLCyML774IiIittlmm/j9738f77zzTtx4441ZrhQAAAAAgLqgZcuWUa9evViyZEmp7UuWLIk2bdqUe502bdps9Pj1/y5ZsiTatm1b6phevXpVYfVfu+uuu2LIkCHx5ptvxq677hr5+fml9n/ve9+r8JhCHTbp/PPPj88//zxeffXVaNWqVbRq1arU/sGDB5daeAoAAAAAgHRIaumEXg0aNIi99torpk2bFoMHD46IiOLi4pg2bVqcccYZ5V6nT58+MW3atDjnnHNKtj311FPRp0+fiIjo2LFjtGnTJqZNm1YS4qxYsSJmzpwZp512WpXfhxkzZsQ///nP+Nvf/lZmXyaTiXXr1lV4zNp5tqhVnnzyyTjrrLNi5513Lnchp06dOsV7772XhcoAAAAAAKirhg8fHnfeeWfcc889MXv27DjttNNi5cqVMXTo0IiIOPHEE2PEiBElx5999tkxZcqUuO6666KwsDBGjx4dL774YkkIlMlk4pxzzokrrrgi/vrXv8Ybb7wRJ554YrRr164kOKpKZ555ZvzkJz+JDz/8MIqLi0tdKhPoROjUYTN89dVXse22225w/+eff16D1QAAAAAAUFWSKPtB/tri2GOPjY8//jhGjhwZixcvjl69esWUKVOidevWERHx7rvvRl7ef3tXvv3tb8cDDzwQl1xySVx88cXRtWvXePTRR2PXXXctOeaCCy6IlStXxrBhw2L58uWx//77x5QpU6Jhw4ZVXv+yZcvi3HPPLam3KmSSJEmqbDTqpL333ju6desW999/fyxbtiy23XbbmDp1avTv3z8iIvbff/+oV69ePPPMM5s13qT8btVZLgAAAACQAw4vmpPtEuqEf897t8Zua6fOO9bYbdUGQ4YMiQMOOCB+9rOfVdmYOnXYpHPOOSeGDBkSu+++exxzzDER8fXchXPnzo0xY8bEjBkz4k9/+lOWq6xdehROznYJbKHZ3QdluwQAAAAAIMV22mmnGDFiRPzjH/+I3XbbLfLz80vtP+ussyo8pk4dNsuVV14Zo0ePjiRJori4OPLy8iJJksjLy4srrrgiLrzwws0eKxc6dYQ66SfUAQAAAKjddOpUjTnz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8cU49dRTKzWm6deocaZfAwAAAAC2lOnXqsa/Zn9eY7f17R5b19ht1QaNGzeOJ554Ivbff/9S25977rk47LDDYuXKlRUe0/RrANRZpkSoG2Z3H5TtEgAAgDrG34vwX0mSex00NaVFixblTrHWtGnTaN68eaXGNP0aAAAAAABAFbvkkkti+PDhsXjx4pJtixcvjvPPPz8uvfTSSo1p+jVqnOnXAAAAAIAtZfq1qvGPtys+BVhl7b9z4xq7rdpgjz32iLlz58bq1atjxx13jIiId999NwoKCqJr166ljn355Zc3a0zTrwEAAAAAAFSxwYMHV/mYQh0AAAAAAIAqNmrUqCofU6gDAAAAAAA5qtgCLdXupZdeitmzZ0dExC677BJ77LFHpccS6gAAAAAAAFSxjz76KI477riYPn16NGvWLCIili9fHgcddFA89NBDse2221Z4zLwqrhEAAAAAAEiJJDI1dsk1Z555Znz++efx1ltvxSeffBKffPJJvPnmm7FixYo466yzKjWmTh0AAAAAAIAqNmXKlJg6dWr06NGjZNvOO+8ct956axx66KGVGlOoAwAAAAAAOSpJcq+DpqYUFxdHfn5+me35+flRXFxcqTFNvwYAAAAAAFDF+vfvH2effXZ88MEHJdsWLVoU5557bhx88MGVGlOoAwAAAAAAOSpJau6Sa2655ZZYsWJFdOjQITp37hydO3eOjh07xooVK+Lmm2+u1JimXwMAAAAAAKhiO+ywQ7z88ssxderUKCwsjIiIHj16xIABAyo9plAHAAAAAAByVHFYU6c6ZTKZOOSQQ+KQQw6pkvFMvwYAAAAAAFBF/v73v8fOO+8cK1asKLPvs88+i1122SWee+65So2tUwcAAABSokfh5GyXwBaa3X1QtksAgFKSRKdOVbvhhhvi5z//eTRp0qTMvqZNm8app54a119/fRxwwAEVHlunDgAAAAAAQBV57bXX4rDDDtvg/kMPPTReeumlSo2tUweoFJ8QTD+fEASA3OL1W93gNRwAUNWSJNsV1D1LliyJ/Pz8De6vX79+fPzxx5UaW6gDAACQA4QBAADUVZ988kmceeaZ8dhjj0VeXl4cffTRceONN8a3vvWtDR4/atSoePLJJ+Pdd9+NbbfdNgYPHhyXX355NG3atOS4TKbs1HQPPvhgHHfccRutZ7vttos333wzunTpUu7+119/Pdq2bVuBe/hfpl8DAAAAAABS64QTToi33nornnrqqXj88cfj2WefjWHDhm3w+A8++CA++OCDuPbaa+PNN9+MCRMmxJQpU+KUU04pc+z48ePjww8/LLkMHjx4k/UMGjQoLr300li1alWZfV999VWMGjUqjjjiiArdx/UySaK5ipo1Kb9btksAAAAAAFLu8KI52S6hTnjytTU1dluH9mxQ5WPOnj07dt5553jhhRdi7733joiIKVOmxKBBg+L999+Pdu3abdY4f/zjH+MnP/lJrFy5MurX/3qSs0wmE4888shmBTnftGTJkthzzz2jXr16ccYZZ0S3bl+/J15YWBi33nprrFu3Ll5++eVo3bp1hcaN0KkDAAAAAADUgNWrV8eKFStKXVavXr1FY86YMSOaNWtWEuhERAwYMCDy8vJi5syZmz3OZ599Fk2aNCkJdNb75S9/GS1btox999037r777ticPpnWrVvHv/71r9h1111jxIgR8f3vfz++//3vx8UXXxy77rpr/OMf/6hUoBNhTR0AAAAAAMhZxTU4l9fYsWNjzJgxpbaNGjUqRo8eXekxFy9eHK1atSq1rX79+rHNNtvE4sWLN2uMpUuXxuWXX15myrbLLrss+vfvH1tttVU8+eSTcfrpp8cXX3wRZ5111ibHbN++fUyePDk+/fTTmDt3biRJEl27do3mzZtv/p0rh1AHAAAAAACodiNGjIjhw4eX2lZQUFDusRdd9P+1d+fhUdVn//jvACFssilrETCgJO6KSlHrBkWWutVWsbhgXZ4qVHGrWh+X1rqgbV2oldJal1Zta79iVSiKRVCrokVxDVEshUdleRQBAYVIzu8Pf+ZpisqWzMmZeb2ua64rOXPmzPuTQObM3Of+fC6KsWPHfunxKioqtjjTihUrYtiwYbHjjjuuV1y69NJLa77eY489YtWqVXH99ddvVFHnM+3atYu99957i3N+RlEHAAAAAAAKVJIU5ey5SkqafmER5z+dd955MXLkyC/dp7S0NDp37hxLliyptf2TTz6JpUuXRufOnb/08R9++GEMHjw4ttpqq5g4cWIUFxd/6f79+vWLK6+8MtasWbPR46hrijoAAAAAAECD0qFDh+jQocMG9+vfv38sW7YsZs2aFX379o2IiGnTpkV1dXX069fvCx+3YsWKOPTQQ6OkpCQefPDBaNas2Qafa/bs2dGuXbvUCjoRijoAAAAAAFCwkhyuqVMfysvLY/DgwXHaaafF+PHjo6qqKkaPHh3Dhw+Prl27RkTEO++8EwMGDIi77ror9tlnn1ixYkUMGjQoVq9eHb///e9jxYoVsWLFioj4tJjUuHHjeOihh2Lx4sXx1a9+NZo1axZTp06Nq6++Os4///w0h6uoAwAAAAAAZNfdd98do0ePjgEDBkSjRo3i6KOPjptvvrnm/qqqqqisrIzVq1dHRMQLL7wQM2fOjIiI3r171zrWvHnzomfPnlFcXBy33HJLnHPOOZEkSfTu3Tt+/vOfx2mnnZa7gX2OoiTJeh2OrJlU3CftCAAAAABAxg2rqkw7Ql54+IVPcvZc39hTn8mW8hMENkv5nMlpRwAioqJsaNoRAPKCcxtoOJzfAAB8MUUdYLN4o0UWFMIHdIUwRrLvxDFvpx2h3t11Y7e0I7CFnNsAAFCozOWVLY3SDgAAAAAAAMCG6dQBIG+56hoahovTDpADFWVpJwAAANg8SVKUdgQ2gU4dAAAAAACADFDUAQAAAAAAyADTrwEAAAAAQIGqTtJOwKbQqQMAAAAAAJABOnUAAAAAAKBAJTp1MkWnDgAAAAAAQAbo1AEAAAAAgAKVRFHaEdgEOnUAAAAAAAAyQKcOAAAAAAAUqGpr6mSKTh0AAAAAAIAM0KkDAAAAAAAFKtGpkyk6dQAAAAAAADJApw4AAAAAABQonTrZolMHAAAAAAAgA3TqAABQr8rnTE47Qr2rKBuadgQAAAAKgKIOAAAAAAAUqOqkKO0IbAJFHQAA6pUuFgAAAKgbijoAAAAAAFCgkiTtBGyKRmkHAAAAAAAAYMN06gAAAAAAQIHSqZMtOnUAAAAAAAAyQKcOAAAAAAAUqGqdOpmiqAMAAAAAFJTyOZPTjgCwWRR1AAAAAICCUlE2NO0I1IHSqsq0I+SFJClKOwKbwJo6AAAAAAAAGaBTBwAAAAA2gam7gHySWFMnUxR1AMhb3miRBaZ9AADIHudw0DCYfo1CpKgDAAAAAAAFqlqnTqYo6gCQt1w9BwAAAEA+UdQBgAwzxVz2KT4CAGSP83CywHsNyE+KOgAAAAAAUKAS069liqIOAGSYK68AACD3nIcDkBZFHQAAAAAAKFA6dbKlUdoBAAAAAAAA2DCdOgAAAAAAUKCqdepkik4dAAAAAACADNCpAwAAAAAABcqaOtnSIDt17rjjjigqKoqioqL417/+tcXH69mzZxQVFcXIkSO3+FgAAAAAAABp2OyizkEHHVRTePnP2wMPPFCHEQEAAAAAgPpQXZ27G1tui6dfa9q0aeyxxx61trVv335LD9tgrV27Npo2bZp2DAAAAAAAoMBs8fRrXbp0iWeffbbW7YADDqg1hdrjjz8ee+65ZzRv3jz23HPPePbZZ2sdY9y4cfGVr3wlWrZsGSNGjIjly5d/7nM9+OCDsf/++0erVq2iWbNmsccee8Rtt91Wa5/58+fHoEGDolmzZrHDDjvExIkTP/dYy5cvj7PPPjt69OgRTZs2jW7dusW5554bq1evrtln5MiRUVRUFAcddFBcd9110a1bt2jWrFlE/F+n0kEHHRRjx46Njh07xjbbbBPXXHNNrFixIk444YRo1apVbL/99jqXAAAAAABokJIkdze23BZ36myMIUOGRM+ePeOTTz6JF198MYYPHx5z586NJk2axEMPPRRnnXVWRER06NAhnnzyyfjLX/6y3jF+//vfxwknnBAREZ06dYpmzZrF7Nmz49RTT41FixbFJZdcEkmSxNFHHx2zZs2KRo0aRZMmTeL444+PdevW1TrW2rVr46CDDorZs2dHs2bNory8PN5444244YYb4qWXXorHHnssioqKavZ/5pln4sknn4w+ffrExx9/XOtYzz77bLz44ovRtm3bWLBgQfzwhz+M3/3ud/Hee+9Fq1atYu7cuXH88cfH/PnzY+utt67rHy2kpnzO5LQjsIUqyoamHQEAGoxCOLfx2g8AANm3xZ068+fPX29Nnf90/fXXx5w5c+JnP/tZzWPmzp0bERHXXXddRET06tUr/vnPf8a8efNi7733Xu8Yl1xySURE9OvXL+bPnx/z5s2Lo446KiIirrrqqli9enVMmzYtZs2aFRERt9xyS7z++uvx4IMPxpo1a2od6957743Zs2dH06ZN4+WXX46XXnqppnto2rRpMW3atFr7r127Nh5++OF4/fXXY/HixbXuq66ujpdeeilef/31mmnZ3nvvvXjjjTfi73//e0RErFq1Kp5//vmN/ZECAAAAAEBO6NTJlnpZU+c/fdZhs+OOO9ZsW7x4cZSVlcVrr70WERGHHnpotGrVKiIivvnNb8b06dNr9l2yZEksWLCg5r6SkpKIiBg+fHhMnDgxPvroo3jttddqjhURcfTRR0dExIABA6J9+/axdOnSmvuee+65iPi0WLPDDjusl/fZZ5+NAQMG1Hzfp0+fGDJkSERENG7cuNa+O++8c/Ts2TMiPu00euedd2L//fePtm3bRps2bWqNF/KJKz0BgHzi3AYAAMiCLS7qfLamzpdp27btp0/W5P+eLmkAZbkvKki1a9eu1vedOnX6wmO0bt265uvPxvfZtn/vWmoI4wUAAAAAALJri6df21I77bRTREQ8+uijsWrVqli3bl1MnDix1j4dO3aM7t27R0TE/fffH2vWrIkkSeIPf/hDREQ0b948dtppp5pjRUTNMR5//PFaXToRUTO927p16+KXv/xlPPvss/Hss8/G9OnT44ILLojvfOc7tfb/vCnlAAAAAAAg66qT3N3Ycltc1Fm4cGF89atfrXX74x//uNGPP//88yMiYu7cuVFaWhqlpaXx9NNPr7ffVVddFRERM2fOjB49esR2221XU7i55JJLokWLFnHIIYfUdN6cccYZsdNOO8XQoUOjuLi41rGOO+642HXXXWPdunWx9957x8477xx9+vSJtm3bxre+9a1YtmzZ5vwoAAAAAAAA6s0WF3XWrl0bM2fOrHVbuHDhRj/+iCOOiBtuuCE6d+4cH374Yey1117xk5/8ZL39jj/++PjLX/4S++23X3z44YexaNGi2H333eM3v/lNXHLJJRHxaUfN/fffHwMGDIgmTZrERx99FLfddlt07dq11rFKSkpixowZcdZZZ8W2224bb7zxRnzwwQex1157xVVXXfWl060BAAAAAEC+SJIkZze2XFHiJ0mOTSruk3YEAAAAACDjhlVVph0hL/xicu5KBKOHWupkSzVJOwAAAAAAAJAObR/ZssXTrwEAAAAAAFD/dOoAAAAAAECBqq5OOwGbQqcOAAAAAABABujUAQAAAACAAmVNnWzRqQMAAAAAAGTW0qVLY8SIEdG6deto27ZtnHLKKbFy5covfcxBBx0URUVFtW7f+973au2zYMGCGDZsWLRo0SI6duwYF1xwQXzyySf1OZQN0qkDAAAAAAAFqjoPOnVGjBgRCxcujKlTp0ZVVVWcfPLJcfrpp8c999zzpY877bTT4sc//nHN9y1atKj5et26dTFs2LDo3LlzPP3007Fw4cI48cQTo7i4OK6++up6G8uGKOoAAAAAAAD1bs2aNbFmzZpa20pKSqKkpGSzj1lRURFTpkyJ559/Pvbaa6+IiBg3blwMHTo0fvrTn0bXrl2/8LEtWrSIzp07f+59jz76aLz++uvx2GOPRadOnWL33XePK6+8Mi688MK44ooromnTppudeUuYfg0AAAAAAApUkuTuds0110SbNm1q3a655potyv/MM89E27Ztawo6EREDBw6MRo0axcyZM7/0sXfffXdss802sfPOO8fFF18cq1evrnXcXXbZJTp16lSz7dBDD40VK1bEa6+9tkWZt4ROHQAAAAAAoN5dfPHFce6559batiVdOhERixYtio4dO9ba1qRJk2jfvn0sWrToCx/3ne98J3r06BFdu3aNl19+OS688MKorKyM+++/v+a4/17QiYia77/suPVNUQcAAAAAAKh3mzLV2kUXXRRjx4790n0qKio2O8vpp59e8/Uuu+wSXbp0iQEDBsRbb70VvXr12uzj1jdFHQAAAAAAKFBJdZLDZyva6D3PO++8GDly5JfuU1paGp07d44lS5bU2v7JJ5/E0qVLv3C9nM/Tr1+/iIiYO3du9OrVKzp37hzPPfdcrX0WL14cEbFJx61rijoAAAAAAECD0qFDh+jQocMG9+vfv38sW7YsZs2aFX379o2IiGnTpkV1dXVNoWZjzJ49OyIiunTpUnPcq666KpYsWVIzvdvUqVOjdevWseOOO27iaOpOo9SeGQAAAAAASFV1krtbfSgvL4/BgwfHaaedFs8991z8/e9/j9GjR8fw4cOja9euERHxzjvvRFlZWU3nzVtvvRVXXnllzJo1K/71r3/Fgw8+GCeeeGIccMABseuuu0ZExKBBg2LHHXeME044IV566aV45JFH4r//+79j1KhRW7wO0JZQ1AEAAAAAADLr7rvvjrKyshgwYEAMHTo09t9//5gwYULN/VVVVVFZWRmrV6+OiIimTZvGY489FoMGDYqysrI477zz4uijj46HHnqo5jGNGzeOhx9+OBo3bhz9+/eP448/Pk488cT48Y9/nPPx/buiJElyOWEexKTiPmlHAAAAAAAyblhVZdoR8sLYP1fn7Lku/JY+ky3lJwgAAAAAAJABTdIOAAAAAAAApKO6vha7oV4o6gAAAAAA5JnyOZPTjgDUA0UdAAAAAIA8U1E2NO0I9a7Umjp1ItGokynW1AEAAAAAAMgAnToAAAAAAFCgdOpki04dAAAAAACADNCpAwAAAAAABapaq06m6NQBAAAAAADIAEUdAAAAAACADDD9GgAAAAAAFKikOu0EbApFHagH5XMmpx0BAAAgkyrKhqYdAQCgwVLUgXrgTQgAAAAAkAVJkqQdgU1gTR0AAAAAAIAM0KkDAAAAAAAFqtqaOpmiUwcAAAAAACADdOoAAAAAAECBsqZOtujUAQAAAAAAyACdOgAAAAAAUKCqNepkik4dAAAAAACADNCpAwAAAAAABSrRqpMpijrkXPmcyWlHAAAAyKSKsqFpRwAKhM9vABom068BAAAAAABkgE4dcs6VZQAAAAANm89vyILSqsq0I+SFxOxrmaJTBwAAAAAAIAN06gAAAAAAQIGqrtaqkyU6dQAAAAAAADJApw4AAAAAABSoxKI6maJTBwAAAAAAIAN06gAAAAAAQIFKqtNOwKZQ1AEAAADIkfI5k9OOUO8qyoamHQEA8paiDgAAAAAAFKhqa+pkiqIOAAAAQI7oYoGGoRC65oD8pKgDAAAAABQUBdb8UFpVmXaEvJDo1MmURmkHAAAAAAAAYMN06gAAABtkipLsc0UyAJvCaz8UjupqnTpZoqgDAABskIIAABQWr/1kgenXKESmXwMAAAAAAMgAnToAAAAAAFCgErOvZYpOHQAAAAAAgAzQqQMAAAAAAAUqqdaqkyWKOgAAAACwCcrnTE47AgAFSlEHAAAAADZBRdnQtCMAEVFaVZl2hLxQbVGdTLGmDgAAAAAAQAbo1AEAAAAAgAJlTZ1s0akDAAAAAACQATp1AAAAAACgQOnUyRadOgAAAAAAABmgUwcAaNDK50xOO0K9qigbmnYEAAAACphGnWzRqQMAAAAAAJABOnUAgAZNJwsAAADUH2vqZItOHQAAAAAAgAxQ1AEAAAAAAMgA068BAAAAAECBShLTr2WJog4Aeat8zuS0IwCQEdbvAmBTeK8BQFoUdQAAAAAAoEBVV+vUyRJFHQDylquu84OrILPP/0UAIN84v4GGobSqMu0IkHOKOgBAg+YNMwAAANQfa+pkS6O0AwAAAAAAAGyupUuXxogRI6J169bRtm3bOOWUU2LlypVfuP+//vWvKCoq+tzbfffdV7Pf593/hz/8IRdD+kI6dcg50+gAAAAAQP0y6wEbK8mDNXVGjBgRCxcujKlTp0ZVVVWcfPLJcfrpp8c999zzuftvu+22sXDhwlrbJkyYENdff30MGTKk1vbbb789Bg8eXPN927Zt6zz/plDUIee8oAAAAAAAFJ41a9bEmjVram0rKSmJkpKSzT5mRUVFTJkyJZ5//vnYa6+9IiJi3LhxMXTo0PjpT38aXbt2Xe8xjRs3js6dO9faNnHixDjmmGOiVatWtba3bdt2vX3TZPo1AAAAAAAoUEl1krPbNddcE23atKl1u+aaa7Yo/zPPPBNt27atKehERAwcODAaNWoUM2fO3KhjzJo1K2bPnh2nnHLKeveNGjUqttlmm9hnn33it7/9beprEOnUAQAAAAAA6t3FF18c5557bq1tW9KlExGxaNGi6NixY61tTZo0ifbt28eiRYs26hi33XZblJeXx7777ltr+49//OM45JBDokWLFvHoo4/GmWeeGStXroyzzjprizJvCUUdAAAAAAAoUNU57DzZlKnWLrroohg7duyX7lNRUbHFmT766KO455574tJLL13vvn/ftscee8SqVavi+uuvV9QBAAAAAAD4zHnnnRcjR4780n1KS0ujc+fOsWTJklrbP/nkk1i6dOlGrYXz5z//OVavXh0nnnjiBvft169fXHnllbFmzZot7jDaXIo6AAAAAABQoJLqdNeI+SIdOnSIDh06bHC//v37x7Jly2LWrFnRt2/fiIiYNm1aVFdXR79+/Tb4+Ntuuy0OP/zwjXqu2bNnR7t27VIr6EQo6gAAAAAAABlVXl4egwcPjtNOOy3Gjx8fVVVVMXr06Bg+fHh07do1IiLeeeedGDBgQNx1112xzz771Dx27ty58cQTT8TkyZPXO+5DDz0Uixcvjq9+9avRrFmzmDp1alx99dVx/vnn52xsn0dRBwAAAAAAyKy77747Ro8eHQMGDIhGjRrF0UcfHTfffHPN/VVVVVFZWRmrV6+u9bjf/va30a1btxg0aNB6xywuLo5bbrklzjnnnEiSJHr37h0///nP47TTTqv38XyZoiTJ4SpIEBGTivukHQEAAAAAyLhhVZVpR8gLJ166MGfPddeVXXL2XPmqUdoBAAAAAAAA2DDTrwEAAAAAQIGqrjaZV5bo1AEAAAAAAMgAnToAAAAAQEEpnzM57QjQYCQ6dTJFpw4AAAAAAEAG6NQBAAAAAApKRdnQtCNQB0qrKtOOkBeSRKdOlujUAQAAAAAAyACdOgAAAAAAUKCS6uq0I7AJdOoAAAAAAABkgE4dcq58zuS0IwDkDfNAA0Bh8X4KAKhr1dXW1MkSnToAAAAAAAAZoFOHnHNVOQAAwObxfgoA/k9pVWXaEfJCkujUyRJFHYDPYVqL/OBDDwAoLM7hAOqO91MADZPp1wAAAAAAADJApw455+o5aBhOHPN22hHq3cVpB6BOeN0AqBuFcMV1IYyR7HNuQ1b4twqFI6k2/VqWKOqQc95oQcOg4EFWeN0AAPKJcxuAumNNHQqRog4AAAAAABQonTrZYk0dAAAAAACADNCpQ86ZkxXIFVNbQMPgtR8AAKDhqk6q047AJtCpAwAAAAAAkAE6dcg5V84DQGHx2g8AANSH0qrKtCPkBWvqZItOHQAAAAAAgAzQqQMAAAAAAAVKp0626NQBAAAAAADIAJ06AAAAAABQoJJEp06W6NQBAAAAAADIAEUdAAAAAACADDD9GgAAAAAAFKjq6uq0I7AJdOoAAAAAAABkgE4dAAAAAAAoUEl1knYENoFOHQAAAAAAgAzQqQMAAAAAAAUqSaypkyWKOuRc+ZzJaUcAAGATVZQNTTsCADQYPtsAIC2KOuScDwSgYfAmhKzwugEAAAD1x5o62WJNHQAAAAAAgAzQqUPO6Q4AqDsnjnk77Qj17i6vG9Ag6JoDgP/jdTH7fD4F/0enTrYo6pBzTnwA6s7FaQfIgYqytBMAAAD5xudT+aG0qjLtCJBzijoAAAAAAFCgqpPqtCOwCaypAwAAAAAAkAE6dQAAAAAAoEBZUydbdOoAAAAAAABkgKIOAAAAAABABph+DQAAAAA2QfmcyWlHYAtVlA1NOwI0GEl1ddoR2AQ6dQAAAAAAADJApw4AAAAAUFB0W8H/SaqTtCOwCRR1AAAAAGATmLoLGobSqsq0I0DOKeoAAAAAAECBShJr6mSJog4AAAAAUFBMvwZklaIOAAAAAFBQTKGXH0y/VjeqramTKY3SDgAAAAAAAMCG6dQBAAAAAIAClVRbUydLdOoAAAAAAABkgE4dAAAAAAAoUIk1dTJFpw4AAAAAAEAG6NQBNkv5nMlpR4ANqigbmnYEAAAAgAYtSaypkyU6dQAAAAAAADJApw6wWXRAAAAAAADklk4dAAAAAAAoUEl1krNbfbnqqqti3333jRYtWkTbtm03btxJEpdddll06dIlmjdvHgMHDow333yz1j5Lly6NESNGROvWraNt27ZxyimnxMqVK+thBBtPUQcAAAAAAMistWvXxre//e0444wzNvox1113Xdx8880xfvz4mDlzZrRs2TIOPfTQ+Pjjj2v2GTFiRLz22msxderUePjhh+OJJ56I008/vT6GsNGKkiSpv/IYfI5JxX3SjgAAAAAAZNywqsq0I+SF/Q+bkbPneuqhA+v1+HfccUeMGTMmli1b9qX7JUkSXbt2jfPOOy/OP//8iIhYvnx5dOrUKe64444YPnx4VFRUxI477hjPP/987LXXXhERMWXKlBg6dGi8/fbb0bVr13odyxexpg45Vz5nctoRAAAAaKCs3wkA+WvNmjWxZs2aWttKSkqipKQkpznmzZsXixYtioEDB9Zsa9OmTfTr1y+eeeaZGD58eDzzzDPRtm3bmoJORMTAgQOjUaNGMXPmzDjqqKNymvkzijoAAAAAAFCg6rt75t9dccUV8aMf/ajWtssvvzyuuOKKnGWIiFi0aFFERHTq1KnW9k6dOtXct2jRoujYsWOt+5s0aRLt27ev2ScNijrknKuuANgUOjyzz2s/AAAAEREXX3xxnHvuubW2fVGXzkUXXRRjx4790uNVVFREWVlZneXLAkUdAAAAAACg3m3KVGvnnXdejBw58kv3KS0t3awcnTt3joiIxYsXR5cuXWq2L168OHbfffeafZYsWVLrcZ988kksXbq05vFpUNQh5+YmH6cdAYAMmdvnkLQjAAAAADnWoUOH6NChQ70ce7vttovOnTvH3/72t5oizooVK2LmzJlxxhlnRERE//79Y9myZTFr1qzo27dvRERMmzYtqquro1+/fvWSa2Mo6pBzY9YtSDsCAAAAAJBxZ6cdgAZjwYIFsXTp0liwYEGsW7cuZs+eHRERvXv3jlatWkVERFlZWVxzzTVx1FFHRVFRUYwZMyZ+8pOfxPbbbx/bbbddXHrppdG1a9c48sgjIyKivLw8Bg8eHKeddlqMHz8+qqqqYvTo0TF8+PDo2rVrSiNV1CEFNzbunnYEAAAAAADyxGWXXRZ33nlnzfd77LFHREQ8/vjjcdBBB0VERGVlZSxfvrxmnx/84AexatWqOP3002PZsmWx//77x5QpU6JZs2Y1+9x9990xevToGDBgQDRq1CiOPvrouPnmm3MzqC9QlCRJ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O0K9u+vGbmlHAIAGoxDWuAAAoLDp1AEAAAAAAMiAoiRJkrRDUFgmFfdJOwIAAAAAkHHDqirTjgA5p1MHAAAAAAAgAxR1AAAAAAAAMqBJ2gEgH5XPmZx2hHpnEVoAAAAAgNxS1IF6oOABAAAAAEBdM/0aAAAAAABABijqAAAAAAAAZEDeF3VGjhwZRUVF0bNnz7SjAAAAAAAAbLZNKuocdNBBUVRUFEVFRbHbbrvVuu/999+P5s2b19x/0UUX1WlQAAAAAACAQtZkcx/48ssvxxNPPBEHHHBARET85je/iY8//rjOgjVESZLEJ598EsXFxWlHAQAAAIB6Uz5nctoRAPgcm1XUKS4ujqqqqhg3blwccMABsW7duvjlL39Zs/3fLV++PC677LJ44IEHYuHChdGxY8c45phj4ic/+Um0aNEiIiIqKyvjggsuiGeffTaWL18eHTp0iF122SV+9KMfxT777BMREa+++mpcdtllMWPGjPjwww+jW7duceyxx8Zll10WzZs3j4iINWvWxFlnnRX33ntvNGvWLEaNGhVJkqyXv7q6OsaNGxe//vWvY+7cudG8efMYOHBgXHfddbHddttFRMQdd9wRJ598ckRE/PWvf43zzjsvKisr47HHHovp06fHj370o4iImDx5cpx99tnxzjvvxJFHHhkTJkyIG264IW666aZo0qRJnH766TX78iknBQBQWCrKhqYdATbIOSpZ4W8qkCv+3pAFpVWVaUeAnNusNXV23333KC0tjQceeCDefvvtePDBB2PBggXxrW99q9Z+a9eujYMOOihuvvnmWLJkSZSXl8f7778fN9xwQxx22GE1BZfjjjsuHnroofjkk09ip512iurq6pgyZUq8/vrrERFRUVER/fv3j4kTJ8batWujd+/e8a9//SuuvfbaOOKII2qe74c//GFMmDAhPvzww9hqq63ixhtvjP/3//7fevlHjx4dY8aMiddeey169+4djRs3jj//+c+x7777xpIlS9bb/4gjjojVq1fHtttuu959xxxzTDRq1ChWr14d99xzT+y9995x9dVXR+vWrWPRokXx4x//OB555JHN+TEDAAAAAADU2KxOnUaNGsWoUaPivPPOi1tvvTWeeeaZiIj4/ve/H/fee2/Nfvfee2/Mnj07mjZtGi+//HJsv/328dJLL8Xuu+8e06ZNi2nTpsWAAQPizTffjIiIhx56KPbbb7+IiJg3b14UFRVFRMS1114bK1eujFatWsXrr78e2267bdx4441xzjnnxNSpU+Pxxx+PffbZJ2655ZaIiBg+fHjce++98b//+79RVlYWq1atqsk0b968GD9+fERE3HnnnXHiiSfGypUro7y8PN5+++0YN25cXHnllbXGe84558S1114bERHr1q2L6dOn19w3fvz4GDFiROy///7x97//PSoqKuKpp56K/v37R2lpacyfPz8ef/zxOPTQQzfnR52XXOkBAEBD4xwVAADIgs3q1ImI+O53vxstW7aMcePGxeOPPx59+/aN/v3719rnueeei4hPO3Z22GGHKCoqit13373m/meffTYiIg477LCIiDj44IOjvLw8jj766JgyZUp06dIlIiKef/75iIj42te+VtMt853vfKfmOP/4xz/irbfeijVr1kRExDe/+c2IiOjQoUMcdNBBtTL94x//qOkQOumkk6KoqCi22mqrePvtt2tl+ndjxoyp+bpx48a17vsse8+ePSMiol27drHffvtFo0aNokePHhERsXjx4vV/gAAAAAAAAJtgszp1IiLatm0bxx9/fPzqV7+KiE+7dL5I06ZNY4899lhve7t27SIi4q677orDDz88pk+fHq+//npMnjw57r///nj11Vdrum/qw+677x4lJSW1tn1WiPl3nTp1+sJjtG7dOiIimjRpUuv7iKjpNPq8dX0AAAAAAAA2xWYXdSI+XZvmV7/6VXTo0CGGDx++3v177713RHw6Zdkvf/nL2HPPPSMi4uOPP45JkybFgAEDIiLiySefjKOOOqrmGNdee21cfPHF8cQTT9Qcp6KiIp588sl4++23o1u3bnHPPffUPM9ee+0VvXr1ipKSklizZk088MAD8e1vfzvee++9WlOlRUT07ds3ioqKIkmSGDlyZJx99tkR8Wnh5amnnoo2bdqsN47PijMAAAAAAABp2aKizs477xzvv/9+NGnSZL2Ol4iI4447Lm644YZ4+eWXY++9947y8vKoqqqK+fPnx5o1a2LevHnRtm3bOOGEE2Lp0qWx7bbbRosWLeK1116LiIhdd901IiIuuuiiuP/++2vWvtl2221jzpw5ERHx9a9/PQ4++OCIiDjjjDPixhtvjHvuuSdmzpwZS5cujdWrV9fKVFpaGqeddlpMmDAhxowZ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vz8GDRoUW2+9dRQVFcXs2bNTybklvmyMVVVVceGFF8Yuu+wSLVu2jK5du8aJJ54Y7777bnqBN8OGfo9XXHFFlJWVRcuWLaNdu3YxcODAmDlzZjphN8OmnHN/73vfi6Kiorjxxhtzlq8ubGiMI0eOXO81cvDgwemE3Uwb83usqKiIww8/PNq0aRMtW7aMvffeOxYsWJD7sJtpQ2P8vHOdoqKiuP7669MJvIk2NL6VK1fG6NGjo1u3btG8efPYcccdY/z48emE3UwbGuPixYtj5MiR0bVr12jRokUMHjw4c6/9G/M+/+OPP45Ro0bF1ltvHa1atYqjjz46Fi9enFLiTbMx45swYUIcdNBB0bp16ygqKoply5alE3YzbWiMS5cuje9///vRp0+faN68eXTv3j3OOuusWL58eYqpN9+6deti3333jW9+85u1ti9fvjy23XbbuOSSS1JKBvlNUYe8tWrVqthtt93illtuSTtKvZgxY0aMGjUqnn322Zg6dWpUVVXFoEGDYtWqVWlHqzPdunWLa6+9NmbNmhX/+Mc/4pBDDokjjjgiXnvttbSj1bnnn38+fvWrX8Wuu+6adpQ6t9NOO8XChQtrbk899VTakerUBx98EPvtt18UFxfHX//613j99dfjZz/7WbRr1y7taHXm+eefr/U7nDp1akREfPvb3045Wd0YO3Zs3HrrrfGLX/wiKioqYuzYsXHdddfFuHHj0o5Wp0499dSYOnVq/O53v4tXXnklBg0aFAMHDox33nkn7WibZUOv89ddd13cfPPNMX78+Jg5c2a0bNkyDj300Pj4449znHTzbWiMq1ativ333z/Gjh2b42R158vGuHr16njhhRfi0ksvjRdeeCHuv//+qKysjMMPPzyFpJtvQ7/HHXbYIX7xi1/EK6+8Ek899VT07NkzBg0aFP/7v/+b46SbZ2PPuSdOnBjPPvtsdO3aNUfJ6s7GjHHw4MG1XivvvffeHCbcchsa41tvvRX7779/lJWVxfTp0+Pll1+OSy+9NJo1a5bjpJtvQ2P899/fwoUL47e//W0UFRXF0UcfneOkm2dD4zv33HNjypQp8fvf/z4qKipizJgxMXr06HjwwQdznHTzfdkYkySJI488Mv75z3/GX/7yl3jxxRejR48eMXDgwEy9R96Y9/nnnHNOPPTQQ3HffffFjBkz4t13313vA/WGamPGt3r16hg8eHD88Ic/TDHp5tvQGN999914991346c//Wm8+uqrcccdd8SUKVPilFNOSTn55mncuHHNGO6+++6a7d///vejffv2cfnll6eYDvJYAgUgIpKJEyemHaNeLVmyJImIZMaMGWlHqVft2rVLfvOb36Qdo059+OGHyfbbb59MnTo1OfDAA5Ozzz477Uh15vLLL0922223tGPUqwsvvDDZf//9046RU2effXbSq1evpLq6Ou0odWLYsGHJd7/73VrbvvnNbyYjRoxIKVHdW716ddK4cePk4YcfrrV9zz33TC655JKUUtWd/3ydr66uTjp37pxcf/31NduWLVuWlJSUJPfee28KCbfcl53LzJs3L4mI5MUXX8xpprq2Medrzz33XBIRyfz583MTqo5tzBiXL1+eRETy2GOP5SZUHfqi8b399tvJV77yleTVV19NevTokdxwww05z1ZXPm+MJ510UnLEEUekkqc+fN4Yjz322OT4449PJ1A92Jj/i0cccURyyCGH5CZQHfu88e20007Jj3/841rbsnwe8J9jrKysTCIiefXVV2u2rVu3LunQoUPy61//OoWEdeM/3+cvW7YsKS4uTu67776afSoqKpKISJ555pm0Ym62L/sc4/HHH08iIvnggw9yH6wObcxnNX/605+Spk2bJlVVVTlMVrduuummpF27dsm7776bPPDAA0lxcXEye/bstGNB3tKpA3nis1bd9u3bp5ykfqxbty7+8Ic/xKpVq6J///5px6lTo0aNimHDhsXAgQPTjlIv3nzzzejatWuUlpbGiBEjMjVNx8Z48MEHY6+99opvf/vb0bFjx9hjjz3i17/+ddqx6s3atWvj97//fXz3u9+NoqKitOPUiX333Tf+9re/xRtvvBERES+99FI89dRTMWTIkJST1Z1PPvkk1q1bt94V1c2bN8+77rmIiHnz5sWiRYtq/V1t06ZN9OvXL5555pkUk7Glli9fHkVFRdG2bdu0o9SLtWvXxoQJE6JNmzax2267pR2nTlRXV8cJJ5wQF1xwQey0005px6k306dPj44dO0afPn3ijDPOiPfffz/tSHWmuro6Jk2aFDvssEMceuih0bFjx+jXr1/eTW/97xYvXhyTJk3K7JXzn2ffffeNBx98MN55551IkiQef/zxeOONN2LQoEFpR6sTa9asiYioda7TqFGjKCkpyfS5zn++z581a1ZUVVXVOscpKyuL7t27Z/IcJ98/x4jYuDEuX748WrduHU2aNMlVrDr3/e9/P3bbbbc44YQT4vTTT4/LLrssb85loCFS1IE8UF1dHWPGjIn99tsvdt5557Tj1KlXXnklWrVqFSUlJfG9730vJk6cGDvuuGPaserMH/7wh3jhhRfimmuuSTtKvejXr19NK/att94a8+bNi6997Wvx4Ycfph2tzvzzn/+MW2+9Nbbffvt45JFH4owzzoizzjor7rzzzrSj1YsHHnggli1bFiNHjkw7Sp256KKLYvjw4VFWVhbFxcWxxx57xJgxY2LEiBFpR6szW221VfTv3z+uvPLKePfdd2PdunXx+9//Pp555plYuHBh2vHq3KJFiyIiolOnTrW2d+rUqeY+sufjjz+OCy+8MI477rho3bp12nHq1MMPPxytWrWKZs2axQ033BBTp06NbbbZJu1YdWLs2LHRpEmTOOuss9KOUm8GDx4cd911V/ztb3+LsWPHxowZM2LIkCGxbt26tKPViSVLlsTKlSvj2muvjcGDB8ejjz4aRx11VHzzm9+MGTNmpB2vXtx5552x1VZbZWZKq40xbty42HHHHaNbt27RtGnTGDx4cNxyyy1xwAEHpB2tTnxW2Lj44ovjgw8+iLVr18bYsWPj7bffzuy5zue9z1+0aFE0bdp0vYsbsniOk8+fY3xmY8b43nvvxZVXXhmnn356jtPVraKiorj11lvjb3/7W3Tq1CkuuuiitCNBXstuCRioMWrUqHj11VczfQXSF+nTp0/Mnj07li9fHn/+85/jpJNOihkzZuRFYed//ud/4uyzz46pU6dmaj7yTfHvnQ677rpr9OvXL3r06BF/+tOf8ubKx+rq6thrr73i6quvjoiIPfbYI1599dUYP358nHTSSSmnq3u33XZbDBkyJJNrInyRP/3pT3H33XfHPffcEzvttFPMnj07xowZE127ds2r3+Hvfve7+O53vxtf+cpXonHjxrHnnnvGcccdF7NmzUo7GmxQVVVVHHPMMZEkSdx6661px6lzBx98cMyePTvee++9+PWvfx3HHHNMzJw5Mzp27Jh2tC0ya9asuOmmm+KFF17Im+7OzzN8+PCar3fZZZfYddddo1evXjF9+vQYMGBAisnqRnV1dUREHHHEEXHOOedERMTuu+8eTz/9dIwfPz4OPPDANOPVi9/+9rcxYsSIvDpHHzduXDz77LPx4IMPRo8ePeKJJ56IUaNGRdeuXfNixoDi4uK4//7745RTTon27dtH48aNY+DAgTFkyJBIkiTteJsln9/nR+T/+CI2PMYVK1bEsGHDYscdd4wrrrgit+HqwW9/+9to0aJFzJs3L95+++3o2bNn2pEgb+nUgYwbPXp0PPzww/H4449Ht27d0o5T55o2bRq9e/eOvn37xjXXXBO77bZb3HTTTWnHqhOzZs2KJUuWxJ577hlNmjSJJk2axIwZM+Lmm2+OJk2a5M3Vnf+ubdu2scMOO8TcuXPTjlJnunTpsl6Rsby8PO+mmYuImD9/fjz22GNx6qmnph2lTl1wwQU13Tq77LJLnHDCCXHOOefkXQddr169YsaMGbFy5cr4n//5n3juueeiqqoqSktL045W5zp37hwRn06f8+8WL15ccx/Z8VlBZ/78+TF16tS869KJiGjZsmX07t07vvrVr8Ztt90WTZo0idtuuy3tWFvsySefjCVLlkT37t1rznXmz58f5513Xl5/0FNaWhrbbLNN3pzvbLPNNtGkSZOCOd958skno7KyMq/Odz766KP44Q9/GD//+c/jsMMOi1133TVGjx4dxx57bPz0pz9NO16d6du3b8yePTuWLVsWCxcujClTpsT777+fyXOdL3qf37lz51i7dm0sW7as1v5ZO8fJ988xIjY8xg8//DAGDx4cW221VUycODGKi4tTSFl3nn766bjhhhvi4Ycfjn322SdOOeWUzBZUIQsUdSCjkiSJ0aNHx8SJE2PatGmx3XbbpR0pJ6qrq2vmS866AQMGxCuvvBKzZ8+uue21114xYsSImD17djRu3DjtiHVu5cqV8dZbb0WXLl3SjlJn9ttvv6isrKy17Y033ogePXqklKj+3H777dGxY8cYNmxY2lHq1OrVq6NRo9qnRI0bN665MjnftGzZMrp06RIffPBBPPLII3HEEUekHanObbfddtG5c+f429/+VrNtxYoVMXPmzLxbly3ffVbQefPNN+Oxxx6LrbfeOu1IOZEv5zsnnHBCvPzyy7XOdbp27RoXXHBBPPLII2nHqzdvv/12vP/++3lzvtO0adPYe++9C+Z857bbbou+ffvm1VoQVVVVUVVVVTDnO23atIkOHTrEm2++Gf/4xz8yda6zoff5ffv2jeLi4lrnOJWVlbFgwYJMnOMUwucYGzPGFStWxKBBg6Jp06bx4IMPZr4rcPXq1TFy5Mg444wz4uCDD47bbrstnnvuuRg/fnza0SBvmX6NvLVy5cpaV8fNmzcvZs+eHe3bt4/u3bunmKxujBo1Ku655574y1/+EltttVXN/Llt2rSJ5s2bp5yublx88cUxZMiQ6N69e3z44Ydxzz33xPTp0/PmQ4CtttpqvXl1W7ZsGVtvvXXezCl8/vnnx2GHHRY9evSId999Ny6//PJo3LhxHHfccWlHqzPnnHNO7LvvvnH11VfHMcccE88991xMmDAhJkyYkHa0OlVdXR233357nHTSSZlewPPzHHbYYXHVVVdF9+7dY6eddooXX3wxfv7zn8d3v/vdtKPVqUceeSSSJIk+ffrE3Llz44ILLoiysrI4+eST0462WTb0Oj9mzJj4yU9+Ettvv31st912cemll0bXrl3jyCOPTC/0JtrQGJcuXRoLFiyId999NyKi5gPXzp07Z+Zq3S8bY5cuXeJb3/pWvPDCC/Hwww/HunXras532rdvH02bNk0r9ib5sjFuvfXWcdVVV8Xhhx8eXbp0iffeey9uueWWeOedd+Lb3/52iqk33ob+nf5nIa64uDg6d+4cffr0yXXUzfZlY2zfvn386Ec/iqOPPjo6d+4cb731VvzgBz+I3r17x6GHHppi6k2zod/jBRdcEMcee2wccMABcfDBB8eUKVPioYceiunTp6cXehNtzPvDFStWxH333Rc/+9nP0oq52TY0vgMPPDAuuOCCaN68efTo0SNmzJgRd911V/z85z9PMfWm2dAY77vvvujQoUN07949XnnllTj77LPjyCOPjEGDBqWYetNs6H1+mzZt4pRTTolzzz032rdvH61bt47vf//70b9///jqV7+acvoN25jPMRYtWhSLFi2q+V2/8sorsdVWW0X37t2jffv2qWXfWBsa42cFndWrV8fvf//7WLFiRaxYsSIiIjp06JDJizsvvvjiSJIkrr322oiI6NmzZ/z0pz+N888/P4YMGZLX3bmQmgTy1OOPP55ExHq3k046Ke1odeLzxhYRye233552tDrz3e9+N+nRo0fStGnTpEOHDsmAAQOSRx99NO1Y9erAAw9Mzj777LRj1Jljjz026dKlS9K0adPkK1/5SnLssccmc+fOTTtWnXvooYeSnXfeOSkpKUnKysqSCRMmpB2pzj3yyCNJRCSVlZVpR6lzK1asSM4+++yke/fuSbNmzZLS0tLkkksuSdasWZN2tDr1xz/+MSktLU2aNm2adO7cORk1alSybNmytGNttg29zldXVyeXXnpp0qlTp6SkpCQZMGBA5v79bmiMt99+++fef/nll6eae1N82RjnzZv3hec7jz/+eNrRN9qXjfGjjz5KjjrqqKRr165J06ZNky5duiSHH3548txzz6Ude6Nt6jl3jx49khtuuCGnGbfUl41x9erVyaBBg5IOHTokxcXFSY8ePZLTTjstWbRoUdqxN8nG/B5vu+22pHfv3kmzZs2S3XbbLXnggQfSC7wZNmaMv/rVr5LmzZtn8vVxQ+NbuHBhMnLkyKRr165Js2bNkj59+iQ/+9nPkurq6nSDb4INjfGmm25KunXrlhQXFyfdu3dP/vu//ztz53Mb8z7/o48+Ss4888ykXbt2SYsWLZKjjjoqWbhwYXqhN8HGjO/yyy/P9GcdGxrjF/07johk3rx5qWbfHNOnT08aN26cPPnkk+vdN2jQoOSQQw7J1N8ZyIqiJDHBIQAAAAAAQENnTR0AAAAAAIAMUNQBAAAAAADIAEUdAAAAAACADFDUAQAAAAAAyABFHQAAAAAAgAxQ1AEAAAAAAMgARR0AAAAAAIAMUNQBAAAAAADIAEUdAAAoIEVFRTF69Oi0YwAAALAZFHUAACBPvPXWW/Ff//VfUVpaGs2aNYvWrVvHfvvtFzfddFN89NFHaccDAABgCzVJOwAAALDlJk2aFN/+9rejpKQkTjzxxNh5551j7dq18dRTT8UFF1wQr732WkyYMCHtmAAAAGwBRR0AAMi4efPmxfDhw6NHjx4xbdq06NKlS819o0aNirlz58akSZO2+HlWrVoVLVu23OLjAAAAsHlMvwYAABl33XXXxcqVK+O2226rVdD5TO/evePss8+ute2BBx6InXfeOUpKSmKnnXaKKVOm1Lr/iiuuiKKionj99dfjO9/5TrRr1y7233//iIj45JNP4sorr4xevXpFSUlJ9OzZM374wx/GmjVrah2jZ8+e8Y1vfCOmT58ee+21VzRv3jx22WWXmD59ekRE3H///bHLLrtEs2bNom/fvvHiiy+ul33atGnxta99LVq2bBlt27aNI444IioqKmrt8+GHH8aYMWOiZ8+eUVJSEh07doyvf/3r8cILL9Ta77777ou+fftG8+bNY5tttonjjz8+3nnnnVr7jBw5Mlq1ahULFiyIb3zjG9GqVav4yle+ErfccktERLzyyitxyCGHRMuWLaNHjx5xzz33rJd52bJlMWbMmNh2222jpKQkevfuHWPHjo3q6ur19gUAANgURUmSJGmHAAAANl+3bt2ipKQk3nrrrQ3uW1RUFLvttlssWbIkzjzzzNhqq63i5ptvjkWLFsWCBQti6623johPizo/+tGPYscdd4ztt98+Dj300EiSJM4888wYOXJk3HnnnfGtb30rDj744Jg5c2bcddddceSRR8bEiRNrnqtnz57RrFmzWLFiRfzXf/1XtGnTJn7605/G8uXLY/z48fHDH/4wzjzzzIiIuOaaa6JDhw5RWVkZjRp9eu3ZY489FkOGDInS0tI49dRT46OPPopx48bFunXr4oUXXoiePXtGRMSIESPiz3/+c4wePTp23HHHeP/99+Opp56KY489NkaMGBEREXfccUecfPLJsffee8d3vvOdWLx4cdx0003RqVOnePHFF6Nt27YR8WlR549//GOUlpbGAQccELvsskvcfffd8fTTT8ftt98el1xySYwYMSK6d+8e48ePjzlz5sSbb74Z2223XURErF69Ovr37x/vvPNO/Nd//Vd07949nn766fjd734XZ511Vtx444118SsHAAAKVQIAAGTW8uXLk4hIjjjiiI3aPyKSpk2bJnPnzq3Z9tJLLyURkYwbN65m2+WXX55ERHLcccfVevzs2bOTiEhOPfXUWtvPP//8JCKSadOm1Wzr0aNHEhHJ008/XbPtkUceSSIiad68eTJ//vya7b/61a+SiEgef/zxmm2777570rFjx+T999+vlbVRo0bJiSeeWLOtTZs2yahRo75wzGvXrk06duyY7LzzzslHH31Us/3hhx9OIiK57LLLaraddNJJSUQkV199dc22Dz74IGnevHlSVFSU/OEPf6jZPmfOnCQikssvv7xm25VXXpm0bNkyeeONN2pluOiii5LGjRsnCxYs+MKcAAAAG2L6NQAAyLAVK1ZERMRWW2210Y8ZOHBg9OrVq+b7XXfdNVq3bh3//Oc/19v3e9/7Xq3vJ0+eHBER5557bq3t5513XkTEemv37LjjjtG/f/+a7/v16xcREYccckh07959ve2fZVi4cGHMnj07Ro4cGe3bt6+V9etf/3pNjoiItm3bxsyZM+Pdd9/93PH+4x//qOlMatasWc32YcOGRVlZ2eeuN3TqqafWOn6fPn2iZcuWccwxx9Rs79OnT7Rt27bWz+2+++6Lr33ta9GuXbt47733am4DBw6MdevWxRNPPPG5GQEAADaGog4AAGRY69atI+LTdWU21r8XUz7Trl27+OCDD9bb/tm0Yp+ZP39+NGrUKHr37l1re+fOnaNt27Yxf/78L32uNm3aRETEtttu+7nbP8vw2XH69OmzXqby8vJ47733YtWqVRHx6ZpCr776amy77baxzz77xBVXXFGr0PJlxyorK1svc7NmzaJDhw7r5evWrVsUFRWtt/3ff25vvvlmTJkyJTp06FDrNnDgwIiIWLJkyXoZAAAANlaTtAMAAACbr3Xr1tG1a9d49dVXN/oxjRs3/tztyecst9m8efPP3fc/ixub+lybkmFDjjnmmPja174WEydOjEcffTSuv/76GDt2bNx///0xZMiQTT7elmSurq6Or3/96/GDH/zgc/fdYYcdNjkPAADAZxR1AAAg477xjW/EhAkT4plnnqk11Vl96NGjR1RXV8ebb74Z5eXlNdsXL14cy5Ytix49etTZ80REVFZWrnffnDlzYptttomWLVvWbOvSpUuceeaZceaZZ8aSJUtizz33jKuuuiqGDBlS61iHHHJIrWNVVlbWWeaIiF69esXKlStrOnMAAADqkunXAAAg437wgx9Ey5Yt49RTT43Fixevd/9bb70VN910U50819ChQyMi4sYbb6y1/ec//3lEfLpOTV3o0qVL7L777nHnnXfGsmXLara/+uqr8eijj9bkWLduXSxfvrzWYzt27Bhdu3aNNWvWRETEXnvtFR07dozx48fXbIuI+Otf/xoVFRV1ljni066hZ555Jh555JH17lu2bFl88skndfZcAABA4dGpAwAAGderV6+455574thjj43y8vI48cQTY+edd461a9fG008/Hffdd1+MHDmyTp5rt912i5NOOikmTJgQy5YtiwMPPDCee+65uPPOO+PII4+Mgw8+uE6eJyLi+uuvjyFDhkT//v3jlFNOiY8++ijGjRsXbdq0iSuuuCIiPl1LqFu3bvGtb30rdtttt2jVqlU89thj8fzzz8fPfvaziIgoLi6OsWPHxsknnxwHHnhgHHfccbF48eK46aabomfPnnHOOefUWeYLLrggHnzwwfjGN74RI0eOjL59+8aqVavilVdeiT//+c/xr3/9K7bZZps6ez4AAKCwKOoAAEAeOPzww+Pll1+O66+/Pv7yl7/ErbfeGiUlJbHrrrvGz372szjttNPq7Ll+85vfRGlpadxxxx0xceLE6Ny5c1x88cVx+eWX19lzREQMHDgwpkyZEpdffnlcdtllUVxcHAceeGCMHTs2tttuu4iIaNGiRZx55pnx6KOPxv333x/V1dXRu3fv+OUvfxlnnHFGzbFGjhwZLVq0iGuvvTYuvPDCaNmyZRx11FExduzYaNu2bZ1lbtGiRcyYMSOuvvrquO++++Kuu+6K1q1bxw477BA/+tGPok2bNnX2XAAAQOEpSjZnJVIAAAAAAAByypo6AAAAAAAAGaCoAwAAAAAAkAGKOgAAAAAAABmgqAMAAAAAAJABijoAAAAAAAAZoKgDAAAAAACQAYo6AAAAAAAAGaCoAwAAAAAAkAGKOgAAAAAAABmgqAMAAAAAAJABijoAAAAAAAAZoKgDAAAAAACQAf8fGNWx5MdR6UkAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Comparison to Known CNVs**\n","\n","- **Known CNAs**\n","  - **Amp/Del Chr Locus Start End**\n","  - Amp\t20\tq11.21\t29.309999\t30.780001\n","  - Del\t6\tp21.32\t32.59\t32.630001\n","  - Del\t7\tq34\t141.210007\t141.259995\n","  - Del\t22\tq11.23\t22.67\t22.710001\n","  - Amp\t1\tq21.3\t149.380005\t149.399994\n","  - Del\t4\tq13.2\t69.270004\t69.310005\n","  - Del\t6\tp21.32\t32.59\t32.630001\n","  - Del\t19\tp12\t20.42\t20.49\n","  - Del\t22\tq11.23\t22.67\t22.710001\n","\n","\n","- **Reference**\n","  - Wu, Hao et al. “Copy number variant analysis of human embryonic stem cells.” Stem cells (Dayton, Ohio) vol. 26,6 (2008): 1484-9. doi:10.1634/stemcells.2007-0993\n","  - https://pmc.ncbi.nlm.nih.gov/articles/PMC3901366/\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"Nkm_CoYNuTm3"}},{"cell_type":"code","source":["def compare_with_known_cnas(\n","    adata,\n","    known_cnas,\n","    cna_col='cnv_regions',\n","    overlap_threshold=0.75,\n","    return_dataframes=True  # Added parameter\n","):\n","    \"\"\"\n","    Compare detected CNAs in an AnnData object with a list of known CNAs.\n","\n","    Parameters\n","    ----------\n","    adata : AnnData\n","        AnnData object with CNA calls\n","    known_cnas : list of dict\n","        List of known CNAs with keys 'type', 'chr', 'start', 'end'\n","    cna_col : str, default='cnv_regions'\n","        Column in adata.obs containing CNA region annotations\n","    overlap_threshold : float, default=0.75\n","        Minimum fraction of overlap required to consider a match\n","    return_dataframes : bool, default=True\n","        Whether to return R-compatible dataframes for the results\n","\n","    Returns\n","    -------\n","    dict\n","        Dictionary containing summary statistics, match information, and (if return_dataframes=True)\n","        pandas DataFrames formatted for export to R\n","    \"\"\"\n","    import pandas as pd\n","    import numpy as np\n","    import re\n","\n","    if cna_col not in adata.obs.columns:\n","        raise ValueError(f\"Column '{cna_col}' not found in adata.obs\")\n","\n","    # Process known CNAs\n","    known_cnas_df = pd.DataFrame(known_cnas)\n","\n","    # Convert 'gain'/'loss' to 'Amp'/'Del' in known_cnas_df\n","    type_mapping = {'gain': 'Amp', 'loss': 'Del'}\n","    if 'type' in known_cnas_df.columns:\n","        known_cnas_df['type'] = known_cnas_df['type'].map(lambda x: type_mapping.get(x, x))\n","\n","    # Extract all detected CNAs\n","    detected_cnas = []\n","\n","    for cell_id, cna_str in adata.obs[cna_col].items():\n","        if pd.isna(cna_str) or cna_str == \"\":\n","            continue\n","\n","        # Split into individual CNA events\n","        cna_events = cna_str.split(\", \")\n","\n","        for event in cna_events:\n","            # Parse the event string\n","            match = re.match(r\"([^:]+):(\\d+)-(\\d+)\\s+\\(([a-z]+)\\)\", event)\n","            if not match:\n","                continue\n","\n","            chrom = match.group(1)\n","            start = int(match.group(2))\n","            end = int(match.group(3))\n","            state = match.group(4)\n","\n","            # Convert state to type (Amp/Del)\n","            cna_type = \"Amp\" if state == \"gain\" else \"Del\" if state == \"loss\" else \"Neutral\"\n","\n","            detected_cnas.append({\n","                'cell_id': cell_id,\n","                'chr': chrom,\n","                'start': start,\n","                'end': end,\n","                'type': cna_type,\n","                'event': event\n","            })\n","\n","    if not detected_cnas:\n","        print(\"No CNAs detected in the dataset\")\n","        results = {'matches': []}\n","\n","        if return_dataframes:\n","            # Create empty match dataframes, but include all known CNAs in cna_by_region_df\n","            cna_by_region_data = []\n","            for _, known in known_cnas_df.iterrows():\n","                k_type = known['type']  # Already converted above\n","                k_chr = str(known['chr'])\n","                k_start = float(known['start'])\n","                k_end = float(known['end'])\n","\n","                cna_by_region_data.append({\n","                    'Type': k_type,\n","                    'Chromosome': k_chr,\n","                    'Start_Position': k_start,\n","                    'End_Position': k_end,\n","                    'Cells_Detected': 0,\n","                    'Percentage': 0.0\n","                })\n","\n","            results['cna_by_region_df'] = pd.DataFrame(cna_by_region_data)\n","            results['cna_summary_df'] = pd.DataFrame(columns=['Metric', 'Value'])\n","            results['cna_by_chr_type_df'] = pd.DataFrame(columns=['Type', 'Chromosome', 'Cells_Detected'])\n","\n","        return results\n","\n","    # Convert to DataFrame for easier processing\n","    detected_df = pd.DataFrame(detected_cnas)\n","\n","    # Find matches between known and detected CNAs\n","    matches = []\n","\n","    for _, known in known_cnas_df.iterrows():\n","        k_chr = str(known['chr'])\n","        k_start = float(known['start'])\n","        k_end = float(known['end'])\n","        k_type = known['type']\n","\n","        # Find matching chromosome and type in detected CNAs\n","        matching_events = detected_df[(detected_df['chr'] == k_chr) &\n","                                      (detected_df['type'] == k_type)]\n","\n","        for _, detected in matching_events.iterrows():\n","            d_start = detected['start']\n","            d_end = detected['end']\n","\n","            # Calculate overlap\n","            overlap_start = max(k_start, d_start)\n","            overlap_end = min(k_end, d_end)\n","\n","            if overlap_end > overlap_start:  # There is overlap\n","                overlap_length = overlap_end - overlap_start\n","                k_length = k_end - k_start\n","                d_length = d_end - d_start\n","\n","                # Calculate overlap fractions\n","                k_overlap_frac = overlap_length / k_length\n","                d_overlap_frac = overlap_length / d_length\n","\n","                # Consider a match if overlap is sufficient\n","                if k_overlap_frac >= overlap_threshold or d_overlap_frac >= overlap_threshold:\n","                    matches.append({\n","                        'cell_id': detected['cell_id'],\n","                        'known_chr': k_chr,\n","                        'known_start': k_start,\n","                        'known_end': k_end,\n","                        'known_type': k_type,\n","                        'detected_chr': detected['chr'],\n","                        'detected_start': d_start,\n","                        'detected_end': d_end,\n","                        'detected_type': detected['type'],\n","                        'overlap_fraction': max(k_overlap_frac, d_overlap_frac),\n","                        'detected_event': detected['event']\n","                    })\n","\n","    # Summarize results\n","    results = {}\n","\n","    if matches:\n","        matches_df = pd.DataFrame(matches)\n","        results['matches'] = matches\n","\n","        # Count unique known CNAs that were matched\n","        unique_known_matches = matches_df[['known_chr', 'known_start', 'known_end', 'known_type']].drop_duplicates()\n","\n","        # Count cells with each known CNA\n","        known_cna_cell_counts = {}\n","        for _, known in unique_known_matches.iterrows():\n","            key = f\"{known['known_type']} {known['known_chr']} {known['known_start']}-{known['known_end']}\"\n","            cells = matches_df[\n","                (matches_df['known_chr'] == known['known_chr']) &\n","                (matches_df['known_start'] == known['known_start']) &\n","                (matches_df['known_end'] == known['known_end']) &\n","                (matches_df['known_type'] == known['known_type'])\n","            ]['cell_id'].unique()\n","            known_cna_cell_counts[key] = len(cells)\n","\n","        # Print summary\n","        print(f\"CNA Match Summary:\")\n","        print(f\"  Total known CNAs: {len(known_cnas_df)}\")\n","        print(f\"  Known CNAs detected: {len(unique_known_matches)} ({len(unique_known_matches)/len(known_cnas_df)*100:.1f}%)\")\n","        print(f\"  Cells with at least one known CNA: {matches_df['cell_id'].nunique()}\")\n","\n","        print(\"\\nDetailed matches:\")\n","        for cna, cell_count in sorted(known_cna_cell_counts.items(), key=lambda x: x[1], reverse=True):\n","            print(f\"  {cna}: found in {cell_count} cells\")\n","\n","        results.update({\n","            'matched_known_count': len(unique_known_matches),\n","            'total_known_count': len(known_cnas_df),\n","            'cells_with_matches': matches_df['cell_id'].nunique(),\n","            'known_cna_cell_counts': known_cna_cell_counts\n","        })\n","\n","        # Create R-compatible dataframes if requested\n","        if return_dataframes:\n","            # 1. Create a dictionary of the CNAs that were found\n","            known_cnas_detected = {}\n","            for key, count in known_cna_cell_counts.items():\n","                parts = key.split()\n","                cna_type = parts[0]\n","                chrom = parts[1]\n","                pos = parts[2].split('-')\n","                start = float(pos[0])\n","                end = float(pos[1])\n","\n","                # Calculate percentage of cells with this CNA\n","                percentage = (count / matches_df['cell_id'].nunique()) * 100 if matches_df['cell_id'].nunique() > 0 else 0\n","\n","                # Store in dictionary with composite key\n","                composite_key = f\"{cna_type}_{chrom}_{start}_{end}\"\n","                known_cnas_detected[composite_key] = {\n","                    'Type': cna_type,\n","                    'Chromosome': chrom,\n","                    'Start_Position': start,\n","                    'End_Position': end,\n","                    'Cells_Detected': count,\n","                    'Percentage': round(percentage, 1)\n","                }\n","\n","            # 2. Add all known CNAs, including ones not detected\n","            cna_by_region_data = []\n","            for _, known in known_cnas_df.iterrows():\n","                k_type = known['type']  # Already converted above\n","                k_chr = str(known['chr'])\n","                k_start = float(known['start'])\n","                k_end = float(known['end'])\n","\n","                # Create composite key to check if this CNA was detected\n","                composite_key = f\"{k_type}_{k_chr}_{k_start}_{k_end}\"\n","\n","                if composite_key in known_cnas_detected:\n","                    # CNA was detected, use the data\n","                    cna_by_region_data.append(known_cnas_detected[composite_key])\n","                else:\n","                    # CNA was not detected, add with zeros\n","                    cna_by_region_data.append({\n","                        'Type': k_type,\n","                        'Chromosome': k_chr,\n","                        'Start_Position': k_start,\n","                        'End_Position': k_end,\n","                        'Cells_Detected': 0,\n","                        'Percentage': 0.0\n","                    })\n","\n","            # Create sorted dataframe\n","            results['cna_by_region_df'] = pd.DataFrame(cna_by_region_data).sort_values(\n","                by='Cells_Detected', ascending=False\n","            ).reset_index(drop=True)\n","\n","            # 2. CNA Match Summary Overall dataframe\n","            # Make sure dataframe has at least one row before accessing iloc[0]\n","            most_common = f\"{results['cna_by_region_df'].iloc[0]['Type']} on Chr {results['cna_by_region_df'].iloc[0]['Chromosome']} ({results['cna_by_region_df'].iloc[0]['Cells_Detected']} cells)\" if len(results['cna_by_region_df']) > 0 and results['cna_by_region_df'].iloc[0]['Cells_Detected'] > 0 else \"None\"\n","\n","            # Get least common with cells > 0, or \"None\" if all 0\n","            detected_cnas = results['cna_by_region_df'][results['cna_by_region_df']['Cells_Detected'] > 0]\n","            least_common = f\"{detected_cnas.iloc[-1]['Type']} on Chr {detected_cnas.iloc[-1]['Chromosome']} ({detected_cnas.iloc[-1]['Cells_Detected']} cells)\" if len(detected_cnas) > 0 else \"None\"\n","\n","            results['cna_summary_df'] = pd.DataFrame({\n","                'Metric': [\n","                    'Total known CNAs',\n","                    'Known CNAs detected',\n","                    'Detection rate',\n","                    'Total cells with at least one known CNA',\n","                    'Total amplification (Amp) regions',\n","                    'Total deletion (Del) regions',\n","                    'Most common CNA',\n","                    'Least common CNA'\n","                ],\n","                'Value': [\n","                    str(len(known_cnas_df)),\n","                    str(len(unique_known_matches)),\n","                    f\"{(len(unique_known_matches)/len(known_cnas_df)*100):.1f}%\",\n","                    str(matches_df['cell_id'].nunique()),\n","                    str(len(results['cna_by_region_df'][results['cna_by_region_df']['Type'] == 'Amp'])),\n","                    str(len(results['cna_by_region_df'][results['cna_by_region_df']['Type'] == 'Del'])),\n","                    most_common,\n","                    least_common\n","                ]\n","            })\n","\n","            # 3. CNA Detection by Chromosome and Type\n","            # Include all chromosomes from known CNAs\n","            chr_types = []\n","            for chrom in known_cnas_df['chr'].unique():\n","                # Check for Amp CNAs on this chromosome\n","                if known_cnas_df[(known_cnas_df['chr'] == chrom) & (known_cnas_df['type'] == 'Amp')].shape[0] > 0:\n","                    # Count cells with this CNA type on this chromosome\n","                    cell_count = matches_df[(matches_df['known_chr'] == str(chrom)) &\n","                                           (matches_df['known_type'] == 'Amp')]['cell_id'].nunique() if len(matches) > 0 else 0\n","                    chr_types.append({\n","                        'Chromosome': str(chrom),\n","                        'Cells_Detected': cell_count,\n","                        'Type': 'Amp'\n","                    })\n","\n","                # Check for Del CNAs on this chromosome\n","                if known_cnas_df[(known_cnas_df['chr'] == chrom) & (known_cnas_df['type'] == 'Del')].shape[0] > 0:\n","                    # Count cells with this CNA type on this chromosome\n","                    cell_count = matches_df[(matches_df['known_chr'] == str(chrom)) &\n","                                           (matches_df['known_type'] == 'Del')]['cell_id'].nunique() if len(matches) > 0 else 0\n","                    chr_types.append({\n","                        'Chromosome': str(chrom),\n","                        'Cells_Detected': cell_count,\n","                        'Type': 'Del'\n","                    })\n","\n","            results['cna_by_chr_type_df'] = pd.DataFrame(chr_types).sort_values(\n","                by=['Type', 'Cells_Detected'], ascending=[True, False]\n","            ).reset_index(drop=True)\n","\n","    else:\n","        print(\"No matches found between detected CNAs and known CNAs\")\n","        results['matches'] = []\n","\n","        if return_dataframes:\n","            # Create empty match dataframes, but include all known CNAs in cna_by_region_df\n","            cna_by_region_data = []\n","            for _, known in known_cnas_df.iterrows():\n","                k_type = known['type']  # Already converted above\n","                k_chr = str(known['chr'])\n","                k_start = float(known['start'])\n","                k_end = float(known['end'])\n","\n","                cna_by_region_data.append({\n","                    'Type': k_type,\n","                    'Chromosome': k_chr,\n","                    'Start_Position': k_start,\n","                    'End_Position': k_end,\n","                    'Cells_Detected': 0,\n","                    'Percentage': 0.0\n","                })\n","\n","            results['cna_by_region_df'] = pd.DataFrame(cna_by_region_data)\n","            results['cna_summary_df'] = pd.DataFrame({\n","                'Metric': [\n","                    'Total known CNAs',\n","                    'Known CNAs detected',\n","                    'Detection rate',\n","                    'Total cells with at least one known CNA',\n","                    'Total amplification (Amp) regions',\n","                    'Total deletion (Del) regions',\n","                    'Most common CNA',\n","                    'Least common CNA'\n","                ],\n","                'Value': [\n","                    str(len(known_cnas_df)),\n","                    \"0\",\n","                    \"0.0%\",\n","                    \"0\",\n","                    str(len(known_cnas_df[known_cnas_df['type'] == 'Amp'])),\n","                    str(len(known_cnas_df[known_cnas_df['type'] == 'Del'])),\n","                    \"None\",\n","                    \"None\"\n","                ]\n","            })\n","\n","            # Create chromosome and type dataframe with zeros for all types\n","            chr_types = []\n","            for chrom in known_cnas_df['chr'].unique():\n","                # Check for Amp CNAs on this chromosome\n","                if known_cnas_df[(known_cnas_df['chr'] == chrom) & (known_cnas_df['type'] == 'Amp')].shape[0] > 0:\n","                    chr_types.append({\n","                        'Chromosome': str(chrom),\n","                        'Cells_Detected': 0,\n","                        'Type': 'Amp'\n","                    })\n","\n","                # Check for Del CNAs on this chromosome\n","                if known_cnas_df[(known_cnas_df['chr'] == chrom) & (known_cnas_df['type'] == 'Del')].shape[0] > 0:\n","                    chr_types.append({\n","                        'Chromosome': str(chrom),\n","                        'Cells_Detected': 0,\n","                        'Type': 'Del'\n","                    })\n","\n","            results['cna_by_chr_type_df'] = pd.DataFrame(chr_types)\n","\n","    return results"],"metadata":{"id":"VqesLXJxxCqQ","executionInfo":{"status":"ok","timestamp":1746672038092,"user_tz":240,"elapsed":105,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["# Define the known CNAs\n","known_cnas = [\n","    {'type': 'Amp', 'chr': '20', 'start': 29309999, 'end': 30780001},\n","    {'type': 'Del', 'chr': '6', 'start': 32590000, 'end': 32630001},\n","    {'type': 'Del', 'chr': '7', 'start': 141210007, 'end': 141259995},\n","    {'type': 'Del', 'chr': '22', 'start': 22670000, 'end': 22710001},\n","    {'type': 'Amp', 'chr': '1', 'start': 149380005, 'end': 149399994},\n","    {'type': 'Del', 'chr': '4', 'start': 69270004, 'end': 69310005},\n","    {'type': 'Del', 'chr': '19', 'start': 20420000, 'end': 20490000}\n","]\n","\n","# Run the comparison\n","results = compare_with_known_cnas(gastruloid_annot_with_calls, known_cnas, cna_col='cnv_regions')\n","\n","# The dataframes are in the results dictionary\n","cna_by_region_df = results['cna_by_region_df']\n","cna_summary_df = results['cna_summary_df']\n","cna_by_chr_type_df = results['cna_by_chr_type_df']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jnj5THygum5S","executionInfo":{"status":"ok","timestamp":1746672041420,"user_tz":240,"elapsed":1674,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"f2489dd9-5c38-4e55-b169-326c52a6f5f6"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["CNA Match Summary:\n","  Total known CNAs: 7\n","  Known CNAs detected: 3 (42.9%)\n","  Cells with at least one known CNA: 700\n","\n","Detailed matches:\n","  Amp 1 149380005.0-149399994.0: found in 673 cells\n","  Amp 20 29309999.0-30780001.0: found in 646 cells\n","  Del 7 141210007.0-141259995.0: found in 1 cells\n"]}]},{"cell_type":"code","source":["cna_by_region_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"lL10ikyQum3i","executionInfo":{"status":"ok","timestamp":1746672042902,"user_tz":240,"elapsed":16,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"9626c4ab-6951-4a6e-8527-cac221b13e0f"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Type Chromosome  Start_Position  End_Position  Cells_Detected  Percentage\n","0  Amp          1     149380005.0   149399994.0             673        96.1\n","1  Amp         20      29309999.0    30780001.0             646        92.3\n","2  Del          7     141210007.0   141259995.0               1         0.1\n","3  Del          6      32590000.0    32630001.0               0         0.0\n","4  Del         22      22670000.0    22710001.0               0         0.0\n","5  Del          4      69270004.0    69310005.0               0         0.0\n","6  Del         19      20420000.0    20490000.0               0         0.0"],"text/html":["\n","  <div id=\"df-4c4c07ce-bf7a-4e11-928e-789e865b55bf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Type</th>\n","      <th>Chromosome</th>\n","      <th>Start_Position</th>\n","      <th>End_Position</th>\n","      <th>Cells_Detected</th>\n","      <th>Percentage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Amp</td>\n","      <td>1</td>\n","      <td>149380005.0</td>\n","      <td>149399994.0</td>\n","      <td>673</td>\n","      <td>96.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Amp</td>\n","      <td>20</td>\n","      <td>29309999.0</td>\n","      <td>30780001.0</td>\n","      <td>646</td>\n","      <td>92.3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Del</td>\n","      <td>7</td>\n","      <td>141210007.0</td>\n","      <td>141259995.0</td>\n","      <td>1</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Del</td>\n","      <td>6</td>\n","      <td>32590000.0</td>\n","      <td>32630001.0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Del</td>\n","      <td>22</td>\n","      <td>22670000.0</td>\n","      <td>22710001.0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Del</td>\n","      <td>4</td>\n","      <td>69270004.0</td>\n","      <td>69310005.0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Del</td>\n","      <td>19</td>\n","      <td>20420000.0</td>\n","      <td>20490000.0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c4c07ce-bf7a-4e11-928e-789e865b55bf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4c4c07ce-bf7a-4e11-928e-789e865b55bf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4c4c07ce-bf7a-4e11-928e-789e865b55bf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-25bf7727-fbcd-44e4-8a0e-9aad71264f82\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25bf7727-fbcd-44e4-8a0e-9aad71264f82')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-25bf7727-fbcd-44e4-8a0e-9aad71264f82 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_dab1822c-1364-4df8-a120-3f97f078f1b6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cna_by_region_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_dab1822c-1364-4df8-a120-3f97f078f1b6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cna_by_region_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cna_by_region_df","summary":"{\n  \"name\": \"cna_by_region_df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Del\",\n          \"Amp\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Chromosome\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"1\",\n          \"20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Start_Position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56326004.23268533,\n        \"min\": 20420000.0,\n        \"max\": 149380005.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          149380005.0,\n          29309999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"End_Position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56164601.29431226,\n        \"min\": 20490000.0,\n        \"max\": 149399994.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          149399994.0,\n          30780001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cells_Detected\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321,\n        \"min\": 0,\n        \"max\": 673,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          646,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percentage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.96823955318549,\n        \"min\": 0.0,\n        \"max\": 96.1,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          92.3,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":[],"metadata":{"id":"zbzMfqOgum0o"},"execution_count":null,"outputs":[]}]}