{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"NcuUMxGgsQyS"},"source":["# **Embryoid Bodies (Example 3)**"]},{"cell_type":"markdown","metadata":{"id":"eBHuDha3sJ7G"},"source":["- **Data File:**\n","  - https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125416\n","  - GSM3573649_D_filtered_gene_bc_matrices_h5.h5\n","  - Human embryonic stem cell (hESC)-derived embryoid body (control sample, e.g. absence of nicotine)\n","- **User Instructions:**\n","  - Link to Google Drive\n","  - Modify file paths as needed\n","- **Steps**\n","  - Setup\n","  - Preprocessing\n","  - CNA Detection Pipeline\n","  - Visualization of Results\n","  - Comparison to Known CNVs"]},{"cell_type":"markdown","metadata":{"id":"t2BDdOqv29Vb"},"source":["# **Setup**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"2nozbHBbzyq_","executionInfo":{"status":"ok","timestamp":1746659963745,"user_tz":240,"elapsed":23511,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"23071e7b-017c-4898-f90e-bcde566a7230"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scanpy\n","  Downloading scanpy-1.11.1-py3-none-any.whl.metadata (9.9 kB)\n","Collecting python-igraph\n","  Downloading python_igraph-0.11.8-py3-none-any.whl.metadata (2.8 kB)\n","Collecting leidenalg\n","  Downloading leidenalg-0.10.2-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.2)\n","Requirement already satisfied: umap-learn in /usr/local/lib/python3.11/dist-packages (0.5.7)\n","Collecting anndata\n","  Downloading anndata-0.11.4-py3-none-any.whl.metadata (9.3 kB)\n","Collecting hmmlearn\n","  Downloading hmmlearn-0.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\n","Collecting mygene\n","  Downloading mygene-3.2.2-py2.py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: h5py>=3.7 in /usr/local/lib/python3.11/dist-packages (from scanpy) (3.13.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from scanpy) (1.4.2)\n","Collecting legacy-api-wrap>=1.4 (from scanpy)\n","  Downloading legacy_api_wrap-1.4.1-py3-none-any.whl.metadata (2.1 kB)\n","Requirement already satisfied: matplotlib>=3.7 in /usr/local/lib/python3.11/dist-packages (from scanpy) (3.10.0)\n","Requirement already satisfied: natsort in /usr/local/lib/python3.11/dist-packages (from scanpy) (8.4.0)\n","Requirement already satisfied: networkx>=2.7 in /usr/local/lib/python3.11/dist-packages (from scanpy) (3.4.2)\n","Requirement already satisfied: numba>=0.57 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.60.0)\n","Requirement already satisfied: numpy>=1.24 in /usr/local/lib/python3.11/dist-packages (from scanpy) (2.0.2)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from scanpy) (24.2)\n","Requirement already satisfied: pandas>=1.5 in /usr/local/lib/python3.11/dist-packages (from scanpy) (2.2.2)\n","Requirement already satisfied: patsy!=1.0.0 in /usr/local/lib/python3.11/dist-packages (from scanpy) (1.0.1)\n","Requirement already satisfied: pynndescent>=0.5 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.5.13)\n","Collecting scikit-learn<1.6.0,>=1.1 (from scanpy)\n","  Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n","Requirement already satisfied: seaborn>=0.13 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.13.2)\n","Collecting session-info2 (from scanpy)\n","  Downloading session_info2-0.1.2-py3-none-any.whl.metadata (2.5 kB)\n","Requirement already satisfied: statsmodels>=0.13 in /usr/local/lib/python3.11/dist-packages (from scanpy) (0.14.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from scanpy) (4.67.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from scanpy) (4.13.2)\n","Collecting igraph==0.11.8 (from python-igraph)\n","  Downloading igraph-0.11.8-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.8 kB)\n","Collecting texttable>=1.6.2 (from igraph==0.11.8->python-igraph)\n","  Downloading texttable-1.7.0-py2.py3-none-any.whl.metadata (9.8 kB)\n","Collecting array-api-compat!=1.5,>1.4 (from anndata)\n","  Downloading array_api_compat-1.11.2-py3-none-any.whl.metadata (1.9 kB)\n","Collecting biothings-client>=0.2.6 (from mygene)\n","  Downloading biothings_client-0.4.1-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: httpx>=0.22.0 in /usr/local/lib/python3.11/dist-packages (from biothings-client>=0.2.6->mygene) (0.28.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.7->scanpy) (2.9.0.post0)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.57->scanpy) (0.43.0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5->scanpy) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5->scanpy) (2025.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<1.6.0,>=1.1->scanpy) (3.6.0)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (4.9.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (2025.4.26)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (1.0.9)\n","Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene) (3.10)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.22.0->biothings-client>=0.2.6->mygene) (0.16.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.7->scanpy) (1.17.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.22.0->biothings-client>=0.2.6->mygene) (1.3.1)\n","Downloading scanpy-1.11.1-py3-none-any.whl (2.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m22.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading python_igraph-0.11.8-py3-none-any.whl (9.1 kB)\n","Downloading igraph-0.11.8-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m31.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading leidenalg-0.10.2-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m17.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading anndata-0.11.4-py3-none-any.whl (144 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.5/144.5 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading hmmlearn-0.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (165 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m165.9/165.9 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading mygene-3.2.2-py2.py3-none-any.whl (5.4 kB)\n","Downloading array_api_compat-1.11.2-py3-none-any.whl (53 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.1/53.1 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading biothings_client-0.4.1-py3-none-any.whl (46 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.7/46.7 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading legacy_api_wrap-1.4.1-py3-none-any.whl (10.0 kB)\n","Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.3/13.3 MB\u001b[0m \u001b[31m15.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading session_info2-0.1.2-py3-none-any.whl (14 kB)\n","Downloading texttable-1.7.0-py2.py3-none-any.whl (10 kB)\n","Installing collected packages: texttable, session-info2, legacy-api-wrap, igraph, array-api-compat, scikit-learn, python-igraph, leidenalg, hmmlearn, biothings-client, anndata, mygene, scanpy\n","  Attempting uninstall: scikit-learn\n","    Found existing installation: scikit-learn 1.6.1\n","    Uninstalling scikit-learn-1.6.1:\n","      Successfully uninstalled scikit-learn-1.6.1\n","Successfully installed anndata-0.11.4 array-api-compat-1.11.2 biothings-client-0.4.1 hmmlearn-0.3.3 igraph-0.11.8 legacy-api-wrap-1.4.1 leidenalg-0.10.2 mygene-3.2.2 python-igraph-0.11.8 scanpy-1.11.1 scikit-learn-1.5.2 session-info2-0.1.2 texttable-1.7.0\n"]}],"source":["!pip install scanpy python-igraph leidenalg scipy umap-learn anndata hmmlearn mygene"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/My Drive/CSCB_Final/\n","%ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27ao3AMT8tFm","executionInfo":{"status":"ok","timestamp":1746660382817,"user_tz":240,"elapsed":954,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"8152e998-f55a-414c-a02f-d318a5492de9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/.shortcut-targets-by-id/1qpaO8CbxA0I0e42G-gASXvodIY9k33pU/CSCB_Final\n"," cna_heatmap.png                        'Paper Draft.gdoc'\n"," cna_task3_test3_embryoids_heatmap.png  'Presentation Draft.gslides'\n"," \u001b[0m\u001b[01;34mData\u001b[0m/                                  \u001b[01;34m'Task 2A'\u001b[0m/\n"," example_package_usage_benchmark         task3_test1_2dGastruloids\n"," Final_Pipeline.ipynb                    task3_test2_neurons.ipynb\n"," nikhil_final.ipynb                      task3_test3_embryoid_bodies\n","\u001b[01;34m'Old Notebooks'\u001b[0m/\n"]}]},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","import os, sys\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import scanpy as sc\n","import anndata as ad\n","from sklearn.metrics import f1_score\n","import seaborn as sns\n","from typing import List, Dict, Optional, Tuple\n","from scipy.stats import zscore\n","from scipy.sparse import csr_matrix, issparse\n","import re\n","from sklearn.cluster import KMeans\n","from hmmlearn import hmm\n","import mygene"],"metadata":{"id":"UU02GlLe8tDD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import data\n","adata_task3 = sc.read_10x_h5('/content/drive/My Drive/CSCB_Final/Data/GSM3573649_D_filtered_gene_bc_matrices_h5.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JQHH2a9ff2uY","executionInfo":{"status":"ok","timestamp":1746660389841,"user_tz":240,"elapsed":2182,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"db577550-eb14-48de-8716-9f42d4c1dd97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/anndata/_core/anndata.py:1758: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n","  utils.warn_names_duplicates(\"var\")\n"]}]},{"cell_type":"code","source":["# Make vars and obs unique\n","adata_task3.var_names_make_unique()\n","adata_task3.obs_names_make_unique()"],"metadata":{"id":"7o94oOzLkFXW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Basic data exploration\n","display(adata_task3.obs)\n","display(adata_task3.var)\n","display(adata_task3.X.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":830},"id":"4FOCEoaRf2rm","executionInfo":{"status":"ok","timestamp":1746660393905,"user_tz":240,"elapsed":56,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"6fd9a3d3-7b41-48aa-e4c3-183d90ad3ac9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [AAACCTGAGCGTAATA-1, AAACCTGAGGCCCTCA-1, AAACCTGAGTTCGATC-1, AAACCTGCAAAGGAAG-1, AAACCTGCATAGAAAC-1, AAACCTGCATTTGCCC-1, AAACCTGGTCGTGGCT-1, AAACCTGTCACATGCA-1, AAACCTGTCAGGCCCA-1, AAACCTGTCATATCGG-1, AAACCTGTCCACGTGG-1, AAACCTGTCCGTCAAA-1, AAACGGGAGAGGACGG-1, AAACGGGAGATGTTAG-1, AAACGGGAGCAATATG-1, AAACGGGAGCTGTCTA-1, AAACGGGAGTCGTTTG-1, AAACGGGAGTGTCCAT-1, AAACGGGGTAAGGGAA-1, AAACGGGGTAGCGTGA-1, AAACGGGGTCACCCAG-1, AAACGGGTCACCTCGT-1, AAACGGGTCATAAAGG-1, AAACGGGTCCTTGCCA-1, AAACGGGTCGAGAGCA-1, AAAGATGCAAATACAG-1, AAAGATGCAAGTCTAC-1, AAAGATGCACCGAAAG-1, AAAGATGCAGCATGAG-1, AAAGATGGTCCGAATT-1, AAAGATGGTCGCATAT-1, AAAGATGTCCAACCAA-1, AAAGCAAAGACTACAA-1, AAAGCAAAGAGTCTGG-1, AAAGCAAAGGCACATG-1, AAAGCAAAGGCATGGT-1, AAAGCAAAGGGTTCCC-1, AAAGCAACAAGCGCTC-1, AAAGCAACAAGTCTAC-1, AAAGCAACACCAGATT-1, AAAGCAACACCGGAAA-1, AAAGCAACACCTATCC-1, AAAGCAACACTAGTAC-1, AAAGCAACATTAGCCA-1, AAAGCAAGTGTGAAAT-1, AAAGCAATCACCTCGT-1, AAAGCAATCATAAAGG-1, AAAGCAATCGAACGGA-1, AAAGCAATCGATCCCT-1, AAAGCAATCTGGTATG-1, AAAGTAGAGAGTGACC-1, AAAGTAGAGCCTCGTG-1, AAAGTAGAGCTTTGGT-1, AAAGTAGAGTCAAGCG-1, AAAGTAGAGTGATCGG-1, AAAGTAGCAAATTGCC-1, AAAGTAGCAGCTTAAC-1, AAAGTAGCATATGAGA-1, AAAGTAGGTGGCAAAC-1, AAAGTAGTCTGCCCTA-1, AAAGTAGTCTTATCTG-1, AAATGCCAGGTAGCTG-1, AAATGCCAGTGGCACA-1, AAATGCCCACTTAACG-1, AAATGCCCAGCTGCAC-1, AAATGCCCAGGGCATA-1, AAATGCCGTAGTGAAT-1, AAATGCCGTCCTAGCG-1, AAATGCCGTCGAATCT-1, AAATGCCGTCTTGCGG-1, AAATGCCGTCTTGTCC-1, AAATGCCGTTATTCTC-1, AAATGCCGTTCGTCTC-1, AAATGCCTCCAGTATG-1, AAATGCCTCCGCAGTG-1, AAATGCCTCGCGATCG-1, AAATGCCTCGGTCCGA-1, AAATGCCTCGTGGTCG-1, AACACGTAGATCCGAG-1, AACACGTAGGGTATCG-1, AACACGTAGTAGGCCA-1, AACACGTAGTCGCCGT-1, AACACGTCAAGCCTAT-1, AACACGTCAAGCTGAG-1, AACACGTCAGGTGGAT-1, AACACGTGTGCAACGA-1, AACACGTGTGCAGTAG-1, AACACGTGTTGTACAC-1, AACACGTTCATCTGTT-1, AACACGTTCCAACCAA-1, AACCATGAGCGGATCA-1, AACCATGCAATTCCTT-1, AACCATGCACGTGAGA-1, AACCATGCACTTAACG-1, AACCATGCAGGTTTCA-1, AACCATGCATTCTTAC-1, AACCATGCATTGCGGC-1, AACCATGGTAGAGCTG-1, AACCATGGTGTAACGG-1, AACCATGGTTATCACG-1, ...]\n","\n","[6847 rows x 0 columns]"],"text/html":["\n","  <div id=\"df-a5ee95cd-e941-4e27-84eb-d3c66e18fc63\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>AAACCTGAGCGTAATA-1</th>\n","    </tr>\n","    <tr>\n","      <th>AAACCTGAGGCCCTCA-1</th>\n","    </tr>\n","    <tr>\n","      <th>AAACCTGAGTTCGATC-1</th>\n","    </tr>\n","    <tr>\n","      <th>AAACCTGCAAAGGAAG-1</th>\n","    </tr>\n","    <tr>\n","      <th>AAACCTGCATAGAAAC-1</th>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","    </tr>\n","    <tr>\n","      <th>TTTGTCAGTTCCGGCA-1</th>\n","    </tr>\n","    <tr>\n","      <th>TTTGTCATCATATCGG-1</th>\n","    </tr>\n","    <tr>\n","      <th>TTTGTCATCCTAGTGA-1</th>\n","    </tr>\n","    <tr>\n","      <th>TTTGTCATCCTATGTT-1</th>\n","    </tr>\n","    <tr>\n","      <th>TTTGTCATCTAACTCT-1</th>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6847 rows × 0 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5ee95cd-e941-4e27-84eb-d3c66e18fc63')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a5ee95cd-e941-4e27-84eb-d3c66e18fc63 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a5ee95cd-e941-4e27-84eb-d3c66e18fc63');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2bc00c6e-2ebd-457a-89b4-66c60a697758\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2bc00c6e-2ebd-457a-89b4-66c60a697758')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2bc00c6e-2ebd-457a-89b4-66c60a697758 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(adata_task3\",\n  \"rows\": 6847,\n  \"fields\": []\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["                     gene_ids\n","RP11-34P13.3  ENSG00000243485\n","FAM138A       ENSG00000237613\n","OR4F5         ENSG00000186092\n","RP11-34P13.7  ENSG00000238009\n","RP11-34P13.8  ENSG00000239945\n","...                       ...\n","AC233755.2    ENSG00000277856\n","AC233755.1    ENSG00000275063\n","AC240274.1    ENSG00000271254\n","AC213203.1    ENSG00000277475\n","FAM231B       ENSG00000268674\n","\n","[33694 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-efa66f9b-bb11-4da2-83eb-aba065d09522\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gene_ids</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>RP11-34P13.3</th>\n","      <td>ENSG00000243485</td>\n","    </tr>\n","    <tr>\n","      <th>FAM138A</th>\n","      <td>ENSG00000237613</td>\n","    </tr>\n","    <tr>\n","      <th>OR4F5</th>\n","      <td>ENSG00000186092</td>\n","    </tr>\n","    <tr>\n","      <th>RP11-34P13.7</th>\n","      <td>ENSG00000238009</td>\n","    </tr>\n","    <tr>\n","      <th>RP11-34P13.8</th>\n","      <td>ENSG00000239945</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>AC233755.2</th>\n","      <td>ENSG00000277856</td>\n","    </tr>\n","    <tr>\n","      <th>AC233755.1</th>\n","      <td>ENSG00000275063</td>\n","    </tr>\n","    <tr>\n","      <th>AC240274.1</th>\n","      <td>ENSG00000271254</td>\n","    </tr>\n","    <tr>\n","      <th>AC213203.1</th>\n","      <td>ENSG00000277475</td>\n","    </tr>\n","    <tr>\n","      <th>FAM231B</th>\n","      <td>ENSG00000268674</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>33694 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efa66f9b-bb11-4da2-83eb-aba065d09522')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-efa66f9b-bb11-4da2-83eb-aba065d09522 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-efa66f9b-bb11-4da2-83eb-aba065d09522');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b98100e4-2f92-47a2-b718-bedb5708a525\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b98100e4-2f92-47a2-b718-bedb5708a525')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b98100e4-2f92-47a2-b718-bedb5708a525 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(adata_task3\",\n  \"rows\": 33694,\n  \"fields\": [\n    {\n      \"column\": \"gene_ids\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 33694,\n        \"samples\": [\n          \"ENSG00000083635\",\n          \"ENSG00000232812\",\n          \"ENSG00000234696\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["(6847, 33694)"]},"metadata":{}}]},{"cell_type":"code","source":["def preprocess_anndata(\n","    ad,\n","    mt_filter=True,\n","    count_filter=True,\n","    normalize=True,\n","    use_pcs=True,\n","    n_pcs=10,\n","    n_neighbors=20,\n","    marker_genes_dict=None,\n","    leiden_resolution=0.1\n","):\n","    \"\"\"\n","    Run a flexible single-cell RNA-seq analysis pipeline with optional QC, normalization, clustering, and plotting.\n","\n","    Parameters:\n","    - ad (AnnData): Input AnnData object.\n","    - mt_filter (bool): Whether to filter cells with high mitochondrial percentage.\n","    - count_filter (bool): Whether to filter cells with too few genes or too many counts.\n","    - normalize (bool): Whether to normalize and log-transform expression values.\n","    - use_pcs (bool): Whether to use PCA for kNN graph construction.\n","    - n_pcs (int): Number of principal components.\n","    - n_neighbors (int): Number of neighbors for graph construction.\n","    - marker_genes_dict (dict): Dictionary of marker genes by cell type for plotting.\n","    - leiden_resolution (float): Resolution parameter for Leiden clustering.\n","\n","    Returns:\n","    - AnnData: Processed and clustered AnnData object.\n","    \"\"\"\n","    print(\"Step 1: Copying AnnData object...\")\n","    ad_analys = ad.copy()\n","\n","    print(\"Step 2: Calculating QC metrics...\")\n","    ad_analys.var['mt'] = ad_analys.var_names.str.upper().str.startswith('MT-')\n","    sc.pp.calculate_qc_metrics(ad_analys, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\n","\n","    adClean = ad_analys.copy()\n","    if mt_filter:\n","        print(\"Step 3: Applying mitochondrial filter (<20%)...\")\n","        adClean = adClean[adClean.obs['pct_counts_mt'] < 20].copy()\n","\n","    if count_filter:\n","        print(\"Step 4: Applying cell count filters (min_genes=500, max_counts=30000)...\")\n","        sc.pp.filter_cells(adClean, min_genes=500)\n","        sc.pp.filter_cells(adClean, max_counts=30000)\n","\n","    print(\"Step 5: Filtering genes expressed in at least 3 cells...\")\n","    sc.pp.filter_genes(adClean, min_cells=3)\n","\n","    print(\"Step 6: Normalizing data and selecting highly variable genes...\")\n","    adNorm = adClean.copy()\n","    if normalize:\n","        sc.pp.normalize_total(adNorm, target_sum=1e4)\n","        sc.pp.log1p(adNorm)\n","        sc.pp.highly_variable_genes(adNorm, min_mean=0.0125, max_mean=6, min_disp=0.25)\n","    else:\n","        print(\"Skipping normalization and HVG selection...\")\n","\n","    print(\"Step 7: Performing PCA...\")\n","    if normalize:\n","        sc.tl.pca(adNorm, use_highly_variable=True)\n","    else:\n","        sc.tl.pca(adNorm)\n","\n","    print(\"Step 8: Building neighborhood graph...\")\n","    if use_pcs:\n","        sc.pp.neighbors(adNorm, n_neighbors=n_neighbors, n_pcs=n_pcs)\n","    else:\n","        sc.pp.neighbors(adNorm, n_neighbors=n_neighbors)\n","\n","    print(\"Step 9: Running Leiden clustering and UMAP embedding...\")\n","    sc.tl.leiden(adNorm, resolution=leiden_resolution)\n","    sc.tl.paga(adNorm)\n","    sc.pl.paga(adNorm, plot=False)\n","    sc.tl.umap(adNorm, init_pos='paga')\n","\n","    print(\"Step 10: Plotting UMAP and Dotplot...\")\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(11, 5), gridspec_kw={'wspace': 0.4})\n","    ax1_dict = sc.pl.umap(adNorm, color=['leiden'], alpha=0.75, s=10, legend_loc='on data', ax=ax1, show=False)\n","    ax2_dict = sc.pl.dotplot(adNorm, marker_genes_dict, 'leiden', dendrogram=True,ax=ax2, show=False)\n","    plt.show()\n","\n","    print(\"Analysis complete.\")\n","    return adNorm\n","\n"],"metadata":{"id":"8tqb1wGRf2oy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","- **Literature for Marker Gene Selection:**\n","  - Kenneth A Barr, Katherine L Rhodes, Yoav Gilad\n","bioRxiv 2022.07.20.500831; doi: https://doi.org/10.1101/2022.07.20.500831\n","  - https://www.biorxiv.org/content/10.1101/2022.07.20.500831v2.full"],"metadata":{"id":"ai3hxdmusIcK"}},{"cell_type":"code","source":["# matches = [gene for gene in adata_task3.var.index if gene.lower().startswith(\"POU5F1\".lower())] # Check if gene exist in var\n","\n","# Set of marker genes\n","marker_genes = {\n","    \"Endoderm\": [\"FOXA2\",\"GATA4\"],\n","    \"Mesoderm\": [\"HAND1\",\"MESP1\"],\n","    \"Ectoderm\": [\"PAX6\",\"OTX2\"],\n","    \"iPSC/Undifferentiated\": [\"POU5F1\"]\n","}"],"metadata":{"id":"rz5BgbUtf2l7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Run proprocessing function on dataset\n","adata_embryoid = preprocess_anndata(\n","    ad=adata_task3,\n","    marker_genes_dict=marker_genes,\n","    leiden_resolution=0.4,\n","    n_pcs=15\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":816},"id":"ivSJ9DnMf2jE","executionInfo":{"status":"ok","timestamp":1746660464362,"user_tz":240,"elapsed":63611,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"69f5f847-dce0-4248-fa1a-86dd2a860722"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Step 1: Copying AnnData object...\n","Step 2: Calculating QC metrics...\n","Step 3: Applying mitochondrial filter (<20%)...\n","Step 4: Applying cell count filters (min_genes=500, max_counts=30000)...\n","Step 5: Filtering genes expressed in at least 3 cells...\n","Step 6: Normalizing data and selecting highly variable genes...\n","Step 7: Performing PCA...\n","Step 8: Building neighborhood graph...\n","Step 9: Running Leiden clustering and UMAP embedding...\n","Step 10: Plotting UMAP and Dotplot...\n","WARNING: dendrogram data not found (using key=dendrogram_leiden). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\n","WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\n","categories: 0, 1, 2, etc.\n","var_group_labels: Endoderm, Mesoderm, Ectoderm, etc.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1100x500 with 8 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Analysis complete.\n"]}]},{"cell_type":"markdown","source":["**Interpretation:**\n","\n","Based on the above results, many of the clusters exhibit expression for marker genes of a distinct cell type, which we can leverage to annotate the cells.\n","\n","Current assignments (Cluster 0-6):\n","- iPSC: 5, 6, 1\n","- Ectoderm: 0, 3\n","- Mesoderm: None\n","- Endoderm: None\n","\n","Clusters to throw:\n","- 2, 4\n","\n","Manual annotation cell typing results will be added to a new column in .obs \"cell_type\"."],"metadata":{"id":"pI7VumQnf2gB"}},{"cell_type":"code","source":["# Define valid clusters to keep\n","tokeep = [\"0\", \"1\", \"3\", \"5\", \"6\"]\n","adata_embryoid_clust = adata_embryoid[adata_embryoid.obs['leiden'].isin(tokeep)].copy()\n","\n","# Define new combined cell type annotations\n","cell_dict = {\n","    'iPSC': ['5', '6', '1'],\n","    'Ectoderm': ['0', '3'],\n","  }\n","\n","\n","# Re-annotate cell types\n","new_obs_name = 'cell_type'\n","adata_embryoid_clust.obs[new_obs_name] = np.nan\n","for cell_type, clusters in cell_dict.items():\n","    ind = adata_embryoid_clust.obs['leiden'].isin(clusters)\n","    adata_embryoid_clust.obs.loc[ind, new_obs_name] = cell_type\n","\n","# Convert to categorical\n","adata_embryoid_clust.obs['cell_type'] = adata_embryoid_clust.obs['cell_type'].astype(\"category\")\n","\n","# Check distribution\n","print(adata_embryoid_clust.obs['cell_type'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0XfcBGGVrPoh","executionInfo":{"status":"ok","timestamp":1746660469261,"user_tz":240,"elapsed":110,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"2185283a-be0e-4b30-d983-c4ceee26d112"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cell_type\n","Ectoderm    2957\n","iPSC        2307\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["# **CNA Detection Pipeline**"],"metadata":{"id":"xTF29hyxs6eQ"}},{"cell_type":"code","source":["# !pip uninstall genecnv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oCHoZhvo7OLu","executionInfo":{"status":"ok","timestamp":1746657954845,"user_tz":240,"elapsed":11690,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"da7d4567-93c7-45c0-8786-96b204dd5170"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found existing installation: genecnv 0.1.0\n","Uninstalling genecnv-0.1.0:\n","  Would remove:\n","    /usr/local/bin/genecnv\n","    /usr/local/lib/python3.11/dist-packages/genecnv-0.1.0.dist-info/*\n","    /usr/local/lib/python3.11/dist-packages/genecnv/*\n","Proceed (Y/n)? Y\n","  Successfully uninstalled genecnv-0.1.0\n"]}]},{"cell_type":"code","source":["!pip install git+https://github.com/nik548/cscbfinalprojectS25.git\n","import genecnv as gcnv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"b5t1bRqLOCH1","executionInfo":{"status":"ok","timestamp":1746660482767,"user_tz":240,"elapsed":6067,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"e15bf53d-34b5-417e-b8a8-9df44f5cc613"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting git+https://github.com/nik548/cscbfinalprojectS25.git\n","  Cloning https://github.com/nik548/cscbfinalprojectS25.git to /tmp/pip-req-build-829xcg3b\n","  Running command git clone --filter=blob:none --quiet https://github.com/nik548/cscbfinalprojectS25.git /tmp/pip-req-build-829xcg3b\n","  Resolved https://github.com/nik548/cscbfinalprojectS25.git to commit f19f6602d4bcc3dd15285ba2e6ffa85e1ddb340e\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy>=1.19 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (2.0.2)\n","Requirement already satisfied: pandas>=1.1 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (2.2.2)\n","Requirement already satisfied: scanpy>=1.9 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (1.11.1)\n","Requirement already satisfied: anndata>=0.7 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.11.4)\n","Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (1.15.2)\n","Requirement already satisfied: scikit-learn>=0.24 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (1.5.2)\n","Requirement already satisfied: hmmlearn>=0.2 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.3.3)\n","Requirement already satisfied: matplotlib>=3.3 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (3.10.0)\n","Requirement already satisfied: seaborn>=0.11 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.13.2)\n","Requirement already satisfied: python-igraph>=0.9 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (0.11.8)\n","Requirement already satisfied: mygene>=3.2 in /usr/local/lib/python3.11/dist-packages (from genecnv==0.1.0) (3.2.2)\n","Requirement already satisfied: array-api-compat!=1.5,>1.4 in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (1.11.2)\n","Requirement already satisfied: h5py>=3.7 in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (3.13.0)\n","Requirement already satisfied: natsort in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (8.4.0)\n","Requirement already satisfied: packaging>=24.2 in /usr/local/lib/python3.11/dist-packages (from anndata>=0.7->genecnv==0.1.0) (24.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3->genecnv==0.1.0) (2.9.0.post0)\n","Requirement already satisfied: biothings-client>=0.2.6 in /usr/local/lib/python3.11/dist-packages (from mygene>=3.2->genecnv==0.1.0) (0.4.1)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1->genecnv==0.1.0) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1->genecnv==0.1.0) (2025.2)\n","Requirement already satisfied: igraph==0.11.8 in /usr/local/lib/python3.11/dist-packages (from python-igraph>=0.9->genecnv==0.1.0) (0.11.8)\n","Requirement already satisfied: texttable>=1.6.2 in /usr/local/lib/python3.11/dist-packages (from igraph==0.11.8->python-igraph>=0.9->genecnv==0.1.0) (1.7.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (1.4.2)\n","Requirement already satisfied: legacy-api-wrap>=1.4 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (1.4.1)\n","Requirement already satisfied: networkx>=2.7 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (3.4.2)\n","Requirement already satisfied: numba>=0.57 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.60.0)\n","Requirement already satisfied: patsy!=1.0.0 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (1.0.1)\n","Requirement already satisfied: pynndescent>=0.5 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.5.13)\n","Requirement already satisfied: session-info2 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.1.2)\n","Requirement already satisfied: statsmodels>=0.13 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.14.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (4.67.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (4.13.2)\n","Requirement already satisfied: umap-learn!=0.5.0,>=0.5 in /usr/local/lib/python3.11/dist-packages (from scanpy>=1.9->genecnv==0.1.0) (0.5.7)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.24->genecnv==0.1.0) (3.6.0)\n","Requirement already satisfied: httpx>=0.22.0 in /usr/local/lib/python3.11/dist-packages (from biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (0.28.1)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.57->scanpy>=1.9->genecnv==0.1.0) (0.43.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.3->genecnv==0.1.0) (1.17.0)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (4.9.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (2025.4.26)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (1.0.9)\n","Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (3.10)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (0.16.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.22.0->biothings-client>=0.2.6->mygene>=3.2->genecnv==0.1.0) (1.3.1)\n","Building wheels for collected packages: genecnv\n","  Building wheel for genecnv (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for genecnv: filename=genecnv-0.1.0-py3-none-any.whl size=12507 sha256=575f31bf1c75a07038e77c71024bc7467801dd455d1a421e46a44475a6041373\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-bx3mlju4/wheels/07/07/23/7aaef129afafd97bc8ace0b5ef55ed4cbc3756a9e062a9db35\n","Successfully built genecnv\n","Installing collected packages: genecnv\n","Successfully installed genecnv-0.1.0\n"]}]},{"cell_type":"code","source":["# Create copy to run through CNA detection steps\n","embryoid_preprocessed = adata_embryoid_clust.copy()"],"metadata":{"id":"jOcMhb9ArQKw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Annotate genes if coordinates missing\n","embryoid_annot = gcnv.annotate_genes_mygene(embryoid_preprocessed)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1xp53bz5WVtx","executionInfo":{"status":"ok","timestamp":1746660538028,"user_tz":240,"elapsed":50424,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"c9b6cb6c-40a4-4703-86fd-bca92f1fd110"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:biothings.client:querying 1-1000 ...\n"]},{"output_type":"stream","name":"stdout","text":["Preparing to query 20073 gene identifiers...\n","Querying MyGene.info for 19516 unique gene identifiers...\n"]},{"output_type":"stream","name":"stderr","text":["INFO:biothings.client:querying 1001-2000 ...\n","INFO:biothings.client:querying 2001-3000 ...\n","INFO:biothings.client:querying 3001-4000 ...\n","INFO:biothings.client:querying 4001-5000 ...\n","INFO:biothings.client:querying 5001-6000 ...\n","INFO:biothings.client:querying 6001-7000 ...\n","INFO:biothings.client:querying 7001-8000 ...\n","INFO:biothings.client:querying 8001-9000 ...\n","INFO:biothings.client:querying 9001-10000 ...\n","INFO:biothings.client:querying 10001-11000 ...\n","INFO:biothings.client:querying 11001-12000 ...\n","INFO:biothings.client:querying 12001-13000 ...\n","INFO:biothings.client:querying 13001-14000 ...\n","INFO:biothings.client:querying 14001-15000 ...\n","INFO:biothings.client:querying 15001-16000 ...\n","INFO:biothings.client:querying 16001-17000 ...\n","INFO:biothings.client:querying 17001-18000 ...\n","INFO:biothings.client:querying 18001-19000 ...\n","INFO:biothings.client:querying 19001-19516 ...\n","INFO:biothings.client:Finished.\n","WARNING:biothings.client:221 input query terms found dup hits:\t[('LINC00115', 2), ('LINC01355', 3), ('NFYC-AS1', 2), ('KDM4A-AS1', 2), ('CYP4A22-AS1', 2), ('RTCA-A\n","WARNING:biothings.client:3756 input query terms found no hit:\t['RP11-34P13', 'FO538757', 'AP006222', 'RP4-669L17', 'RP11-206L10', 'RP11-54O7', 'RP11-465B22', 'FAM\n"]},{"output_type":"stream","name":"stdout","text":["Annotation summary:\n","  Total genes: 20073\n","  Successfully annotated: 15726 (78.3%)\n","  Standard chromosomes (1-22,X,Y): 15521 (77.3%)\n","Returning filtered AnnData with 15521 genes\n"]}]},{"cell_type":"code","source":["# Run the full CNV pipeline\n","embryoid_annot_with_calls, bins, centers, calls = gcnv.run_adaptive_cnv_pipeline(\n","    embryoid_annot,\n","    cell_type_key=\"cell_type\",\n","    target_genes_per_bin=100,\n","    decay_scale=1e6,\n","    decay_radius=10,\n","    reference_frac=0.15,\n","    min_run=2,\n","    n_cells=500\n",")"],"metadata":{"id":"LfYdeLxkXHFp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Annotate .obs of AnnData object with CNA calls\n","gcnv.annotate_cnv_calls(embryoid_annot_with_calls, calls, bins, centers)"],"metadata":{"id":"1BU17QFbV0_o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now, we can see our CNA call present in the \"cnv_regions\" column!\n","embryoid_annot_with_calls.obs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"an5Sf1XjN5Ak","executionInfo":{"status":"ok","timestamp":1746660698391,"user_tz":240,"elapsed":55,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"ce4054bd-c484-4f06-d4cd-e794ea8cd8f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    n_genes_by_counts  total_counts  total_counts_mt  \\\n","ACTGAACTCATGTGGT-1               2059        6727.0            222.0   \n","CCCAGTTTCTCAAGTG-1               2446        7770.0            220.0   \n","GTCACAAGTCTAGTCA-1               3128       20575.0           1105.0   \n","CGTTCTGGTCAAGCGA-1               2486        9220.0            175.0   \n","TGATTTCGTCGAACAG-1               3384       15668.0            378.0   \n","...                               ...           ...              ...   \n","TCGGTAAGTACACCGC-1               1914        7044.0              7.0   \n","AGTTGGTTCCAATGGT-1               2947       12609.0            453.0   \n","ACCTTTAGTACAGTGG-1               2816       10500.0             15.0   \n","AGCAGCCCACCCATTC-1               3119       19040.0            428.0   \n","CCGGTAGCAACGATGG-1               4455       23547.0            928.0   \n","\n","                    pct_counts_mt  n_genes  n_counts leiden cell_type  \\\n","ACTGAACTCATGTGGT-1       3.300134     2059    6727.0      0  Ectoderm   \n","CCCAGTTTCTCAAGTG-1       2.831403     2446    7770.0      3  Ectoderm   \n","GTCACAAGTCTAGTCA-1       5.370595     3128   20575.0      1      iPSC   \n","CGTTCTGGTCAAGCGA-1       1.898048     2486    9220.0      3  Ectoderm   \n","TGATTTCGTCGAACAG-1       2.412560     3384   15668.0      1      iPSC   \n","...                           ...      ...       ...    ...       ...   \n","TCGGTAAGTACACCGC-1       0.099375     1914    7044.0      5      iPSC   \n","AGTTGGTTCCAATGGT-1       3.592672     2947   12609.0      0  Ectoderm   \n","ACCTTTAGTACAGTGG-1       0.142857     2816   10500.0      5      iPSC   \n","AGCAGCCCACCCATTC-1       2.247899     3119   19040.0      0  Ectoderm   \n","CCGGTAGCAACGATGG-1       3.941054     4455   23547.0      1      iPSC   \n","\n","                                                          cnv_regions  \n","ACTGAACTCATGTGGT-1  6:138088505-166342576 (loss), 6:497258-1705846...  \n","CCCAGTTTCTCAAGTG-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","GTCACAAGTCTAGTCA-1  1:9588911-20196050 (loss), 1:20482391-27604431...  \n","CGTTCTGGTCAAGCGA-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","TGATTTCGTCGAACAG-1  5:291630-181261150 (gain), 6:21665003-34426071...  \n","...                                                               ...  \n","TCGGTAAGTACACCGC-1  1:9588911-20196050 (loss), 1:20482391-27604431...  \n","AGTTGGTTCCAATGGT-1                                                     \n","ACCTTTAGTACAGTGG-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","AGCAGCCCACCCATTC-1  1:20482391-27604431 (loss), 1:27666064-3630535...  \n","CCGGTAGCAACGATGG-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","\n","[500 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-ec43265c-a36d-4102-99df-b3956d55ea3b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>n_genes_by_counts</th>\n","      <th>total_counts</th>\n","      <th>total_counts_mt</th>\n","      <th>pct_counts_mt</th>\n","      <th>n_genes</th>\n","      <th>n_counts</th>\n","      <th>leiden</th>\n","      <th>cell_type</th>\n","      <th>cnv_regions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>ACTGAACTCATGTGGT-1</th>\n","      <td>2059</td>\n","      <td>6727.0</td>\n","      <td>222.0</td>\n","      <td>3.300134</td>\n","      <td>2059</td>\n","      <td>6727.0</td>\n","      <td>0</td>\n","      <td>Ectoderm</td>\n","      <td>6:138088505-166342576 (loss), 6:497258-1705846...</td>\n","    </tr>\n","    <tr>\n","      <th>CCCAGTTTCTCAAGTG-1</th>\n","      <td>2446</td>\n","      <td>7770.0</td>\n","      <td>220.0</td>\n","      <td>2.831403</td>\n","      <td>2446</td>\n","      <td>7770.0</td>\n","      <td>3</td>\n","      <td>Ectoderm</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>GTCACAAGTCTAGTCA-1</th>\n","      <td>3128</td>\n","      <td>20575.0</td>\n","      <td>1105.0</td>\n","      <td>5.370595</td>\n","      <td>3128</td>\n","      <td>20575.0</td>\n","      <td>1</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (loss), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>CGTTCTGGTCAAGCGA-1</th>\n","      <td>2486</td>\n","      <td>9220.0</td>\n","      <td>175.0</td>\n","      <td>1.898048</td>\n","      <td>2486</td>\n","      <td>9220.0</td>\n","      <td>3</td>\n","      <td>Ectoderm</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>TGATTTCGTCGAACAG-1</th>\n","      <td>3384</td>\n","      <td>15668.0</td>\n","      <td>378.0</td>\n","      <td>2.412560</td>\n","      <td>3384</td>\n","      <td>15668.0</td>\n","      <td>1</td>\n","      <td>iPSC</td>\n","      <td>5:291630-181261150 (gain), 6:21665003-34426071...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>TCGGTAAGTACACCGC-1</th>\n","      <td>1914</td>\n","      <td>7044.0</td>\n","      <td>7.0</td>\n","      <td>0.099375</td>\n","      <td>1914</td>\n","      <td>7044.0</td>\n","      <td>5</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (loss), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>AGTTGGTTCCAATGGT-1</th>\n","      <td>2947</td>\n","      <td>12609.0</td>\n","      <td>453.0</td>\n","      <td>3.592672</td>\n","      <td>2947</td>\n","      <td>12609.0</td>\n","      <td>0</td>\n","      <td>Ectoderm</td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>ACCTTTAGTACAGTGG-1</th>\n","      <td>2816</td>\n","      <td>10500.0</td>\n","      <td>15.0</td>\n","      <td>0.142857</td>\n","      <td>2816</td>\n","      <td>10500.0</td>\n","      <td>5</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>AGCAGCCCACCCATTC-1</th>\n","      <td>3119</td>\n","      <td>19040.0</td>\n","      <td>428.0</td>\n","      <td>2.247899</td>\n","      <td>3119</td>\n","      <td>19040.0</td>\n","      <td>0</td>\n","      <td>Ectoderm</td>\n","      <td>1:20482391-27604431 (loss), 1:27666064-3630535...</td>\n","    </tr>\n","    <tr>\n","      <th>CCGGTAGCAACGATGG-1</th>\n","      <td>4455</td>\n","      <td>23547.0</td>\n","      <td>928.0</td>\n","      <td>3.941054</td>\n","      <td>4455</td>\n","      <td>23547.0</td>\n","      <td>1</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>500 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec43265c-a36d-4102-99df-b3956d55ea3b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ec43265c-a36d-4102-99df-b3956d55ea3b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ec43265c-a36d-4102-99df-b3956d55ea3b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-3491fbec-4186-4921-ad6f-1b1fa8800b18\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3491fbec-4186-4921-ad6f-1b1fa8800b18')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-3491fbec-4186-4921-ad6f-1b1fa8800b18 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"embryoid_annot_with_calls\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"n_genes_by_counts\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 454,\n        \"samples\": [\n          1145,\n          3934,\n          1493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_counts\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 493,\n        \"samples\": [\n          17875.0,\n          19005.0,\n          6378.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_counts_mt\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 379,\n        \"samples\": [\n          1350.0,\n          1417.0,\n          194.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pct_counts_mt\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 500,\n        \"samples\": [\n          2.8440284729003906,\n          7.4243621826171875,\n          6.653074264526367\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_genes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 854,\n        \"min\": 1104,\n        \"max\": 5003,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          1145,\n          3934,\n          1493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_counts\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 493,\n        \"samples\": [\n          17875.0,\n          19005.0,\n          6378.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"leiden\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"3\",\n          \"5\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cell_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"iPSC\",\n          \"Ectoderm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnv_regions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 356,\n        \"samples\": [\n          \"1:9588911-20196050 (gain), 1:20482391-27604431 (gain), 1:27666064-36305357 (gain), 1:36306368-44767767 (gain), 1:44775251-55064852 (gain), 1:55066359-87169198 (gain), 1:87328880-110346681 (gain), 1:110362851-147773362 (gain), 1:147928393-153986358 (gain), 1:153990762-160215376 (gain), 1:160215715-173824883 (gain), 1:173824653-202006147 (gain), 1:202007945-212992037 (gain), 11:66510606-74493724 (gain), 11:74493851-103479863 (gain), 11:103907189-119093834 (gain), 11:66767-134412242 (gain), 12:1970772-9845007 (gain), 12:9898673-31591136 (gain), 12:31671142-51271362 (gain), 12:51281038-57028883 (gain), 12:57055643-80937934 (gain), 12:80936414-108731526 (gain), 12:108778191-120498493 (gain), 12:120503279-133063304 (gain), 12:19633659-133214832 (gain), 13:39655627-75482169 (gain), 13:75525214-113864076 (gain), 13:20256558-114346533 (gain), 14:26443090-54902826 (gain), 14:54938949-70535015 (gain), 14:70581257-91510554 (gain), 14:91779746-105021083 (gain), 14:22773063-105530198 (gain), 15:41493393-52791078 (gain), 15:53513741-69448427 (gain), 15:69452814-80755621 (gain), 15:81159575-100651701 (gain), 15:22845-101652391 (gain), 16:2475051-15153671 (gain), 16:15037854-29454351 (gain), 16:29454533-50649249 (gain), 16:50693588-67416833 (gain), 16:67430652-77435034 (gain), 16:142789-90019890 (gain), 17:212389-6651634 (gain), 17:6651762-13601929 (gain), 17:14069490-28724359 (gain), 17:28724348-39402523 (gain), 17:39404285-43610338 (gain), 17:43527844-49789180 (gain), 17:49788624-63776351 (gain), 17:63773603-75896951 (gain), 17:75898644-82034204 (gain), 17:158383-83095122 (gain), 18:23689453-58986480 (gain), 18:281040-80247514 (gain), 19:1753506-5784746 (gain), 19:5784832-10339661 (gain), 19:10350528-14085875 (gain), 19:14087851-18929189 (gain), 19:18929201-35267964 (gain), 19:35268962-38852347 (gain), 19:38867830-43639850 (gain), 19:43646095-48004854 (gain), 19:48047843-50725708 (gain), 19:50819146-55180289 (gain), 19:55181247-58558954 (gain), 19:270863-58605223 (gain), 20:17969018-35284985 (gain), 20:35302566-45972203 (gain), 20:46008908-62861822 (gain), 20:14216130-64100643 (gain), 21:16637040-46665685 (gain), 22:18906028-29259597 (gain), 22:29259872-38214778 (gain), 22:38200767-45601135 (gain), 22:276322-50783667 (gain)\",\n          \"1:9588911-20196050 (gain), 1:20482391-27604431 (gain), 1:27666064-36305357 (gain), 1:36306368-44767767 (gain), 1:44775251-55064852 (gain), 1:55066359-87169198 (gain), 6:497258-170584692 (gain), 7:16646131-43807342 (gain), 7:43866558-74851605 (gain), 7:75092573-99394816 (gain), 7:99392048-107202522 (gain), 7:107201372-134459284 (gain), 7:134527567-151520120 (gain), 7:232137-159144867 (gain), 8:22219703-40897833 (gain), 8:41261962-73048123 (gain), 8:73064543-100953388 (gain), 8:101177878-142403182 (gain), 8:214854-145066685 (gain), 9:5334930-35610041 (gain), 9:35609982-86100173 (gain), 9:86220265-109498313 (gain), 9:110243810-127445372 (gain), 9:127447674-133376166 (gain), 9:46888-141143444 (gain), 10:4786629-28821672 (gain), 10:29409618-68343193 (gain), 10:68341107-84219621 (gain), 10:84230666-99394330 (gain), 10:99396870-114046904 (gain), 10:114120862-133424625 (gain), 10:126990-133561220 (gain), 11:6621330-26997087 (gain), 11:27040725-47767443 (gain), 11:47778087-63976543 (gain), 11:63985853-66509657 (gain), 11:66510606-74493724 (gain), 11:74493851-103479863 (gain), 11:103907189-119093834 (gain), 11:66767-134412242 (gain), 12:1970772-9845007 (gain), 12:9898673-31591136 (gain), 12:31671142-51271362 (gain), 12:51281038-57028883 (gain), 12:57055643-80937934 (gain), 12:80936414-108731526 (gain), 12:108778191-120498493 (gain), 12:120503279-133063304 (gain), 12:19633659-133214832 (gain), 13:39655627-75482169 (gain), 13:75525214-113864076 (gain), 13:20256558-114346533 (gain), 14:26443090-54902826 (gain), 14:54938949-70535015 (gain), 14:70581257-91510554 (gain), 14:91779746-105021083 (gain), 14:22773063-105530198 (gain), 15:41493393-52791078 (gain), 15:53513741-69448427 (gain), 15:69452814-80755621 (gain), 15:81159575-100651701 (gain), 15:22845-101652391 (gain), 16:2475051-15153671 (gain), 16:15037854-29454351 (gain), 16:29454533-50649249 (gain), 16:50693588-67416833 (gain), 16:67430652-77435034 (gain), 16:142789-90019890 (gain), 17:212389-6651634 (gain), 17:6651762-13601929 (gain), 17:14069490-28724359 (gain), 17:28724348-39402523 (gain), 17:39404285-43610338 (gain), 17:43527844-49789180 (gain), 17:49788624-63776351 (gain), 17:63773603-75896951 (gain), 17:75898644-82034204 (gain), 17:158383-83095122 (gain), 18:23689453-58986480 (gain), 18:281040-80247514 (gain), 19:1753506-5784746 (gain), 19:5784832-10339661 (gain), 19:10350528-14085875 (gain), 19:14087851-18929189 (gain), 19:18929201-35267964 (gain), 19:35268962-38852347 (gain), 19:38867830-43639850 (gain), 19:43646095-48004854 (gain), 19:48047843-50725708 (gain), 19:50819146-55180289 (gain), 19:55181247-58558954 (gain), 19:270863-58605223 (gain), 20:17969018-35284985 (gain), 20:35302566-45972203 (gain), 20:46008908-62861822 (gain), 20:14216130-64100643 (gain), 21:16637040-46665685 (gain), 22:18906028-29259597 (gain), 22:29259872-38214778 (gain), 22:38200767-45601135 (gain), 22:276322-50783667 (gain)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# Create copy and save data files\n","adata_copy = embryoid_annot_with_calls.copy()\n","# Convert problematic .var columns to strings\n","for col in ['gene_ids', 'start', 'end', 'genomic_pos']:\n","    if col in adata_copy.var.columns:\n","        adata_copy.var[col] = adata_copy.var[col].astype(str)\n","# Save the modified copy to file\n","adata_copy.write(r'/content/drive/My Drive/CSCB_Final/Data/embryoid_annot_with_calls_cleaned.h5ad')"],"metadata":{"id":"fYYOwRH7-PVt","executionInfo":{"status":"ok","timestamp":1746661875121,"user_tz":240,"elapsed":534,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["embryoid_annot_with_calls"],"metadata":{"id":"e4UEbg7g-PTe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746665722932,"user_tz":240,"elapsed":39,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"2957e628-e13b-4d30-d5f9-0f7ee8811f1b"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AnnData object with n_obs × n_vars = 500 × 15521\n","    obs: 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'n_genes', 'n_counts', 'leiden', 'cell_type', 'cnv_regions'\n","    var: 'gene_ids', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'chromosome', 'start', 'end', 'genomic_pos'\n","    uns: 'log1p', 'hvg', 'pca', 'neighbors', 'leiden', 'paga', 'leiden_sizes', 'umap', 'leiden_colors', 'dendrogram_leiden'\n","    obsm: 'X_pca', 'X_umap', 'cnv_calls'\n","    varm: 'PCs'\n","    obsp: 'distances', 'connectivities'"]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","source":["# **Visualization of Results**"],"metadata":{"id":"7tumAjHJ-PDy"}},{"cell_type":"code","source":["def plot_cna_heatmap(\n","    adata,\n","    cna_col='cnv_regions',  # Updated column name\n","    figsize=(16, 10),\n","    chromosomes=None,\n","    sort_cells=True,\n","    cluster_cells=False,\n","    group_by=None,\n","    cmap='coolwarm',\n","    title='Copy Number Alterations Across Cells',\n","    show_chromosome_labels=True,\n","    min_cells_for_chrom=1,\n","    max_cells=1000  # Added parameter to limit visualization for very large datasets\n","):\n","    \"\"\"\n","    Generate a heatmap visualization of CNAs across cells from an AnnData object.\n","\n","    Parameters\n","    ----------\n","    adata : AnnData\n","        AnnData object with CNA calls\n","    cna_col : str, default='cnv_regions'\n","        Column in adata.obs containing CNA region annotations\n","    figsize : tuple, default=(16, 10)\n","        Figure size (width, height)\n","    chromosomes : list, optional\n","        List of chromosomes to include, in display order. If None, will be inferred from data\n","    sort_cells : bool, default=True\n","        Whether to sort cells by CNA pattern similarity\n","    cluster_cells : bool, default=False\n","        Whether to hierarchically cluster cells by CNA pattern\n","    group_by : str, optional\n","        Column in adata.obs to group cells by (e.g., 'leiden', 'cell_type')\n","    cmap : str, default='coolwarm'\n","        Colormap for heatmap (blue=loss, red=gain)\n","    title : str, default='Copy Number Alterations Across Cells'\n","        Plot title\n","    show_chromosome_labels : bool, default=True\n","        Whether to show chromosome labels\n","    min_cells_for_chrom : int, default=1\n","        Minimum number of cells with CNAs on a chromosome to include it in the heatmap\n","    max_cells : int, default=1000\n","        Maximum number of cells to include in the heatmap (randomly sampled if exceeded)\n","\n","    Returns\n","    -------\n","    fig : matplotlib.figure.Figure\n","        Figure containing the heatmap\n","    ax : matplotlib.axes.Axes\n","        Axes containing the heatmap\n","    cna_matrix : pd.DataFrame\n","        DataFrame with the CNA matrix used for plotting\n","    \"\"\"\n","    import matplotlib.pyplot as plt\n","    import pandas as pd\n","    import numpy as np\n","    import re\n","    from scipy.cluster.hierarchy import linkage, dendrogram\n","    import seaborn as sns\n","\n","    if cna_col not in adata.obs.columns:\n","        raise ValueError(f\"Column '{cna_col}' not found in adata.obs. Available columns: {adata.obs.columns.tolist()}\")\n","\n","    # Check if there are any non-empty CNA annotations\n","    non_empty = adata.obs[cna_col].astype(str).str.strip() != \"\"\n","    if non_empty.sum() == 0:\n","        print(f\"No CNA data found in '{cna_col}' column. All entries are empty.\")\n","        return None, None, None\n","\n","    print(f\"Found {non_empty.sum()} cells with non-empty CNA annotations\")\n","\n","    # Extract CNA information from annotations\n","    # Initialize dictionaries to store CNA data\n","    cell_chrom_cna = {}  # {cell_id: {chrom: value}}\n","    all_chroms = set()\n","\n","    # Parse CNA region strings\n","    print(\"Parsing CNA annotations...\")\n","    for cell_id, cna_str in adata.obs[cna_col].items():\n","        if pd.isna(cna_str) or cna_str == \"\":\n","            continue\n","\n","        cell_chrom_cna.setdefault(cell_id, {})\n","\n","        # Split into individual CNA events\n","        cna_events = cna_str.split(\", \")\n","\n","        for event in cna_events:\n","            # Parse the event string using regex\n","            # Format: \"1:9588911-20196050 (gain)\" or \"X:12500000-15000000 (loss)\"\n","            match = re.match(r\"([^:]+):(\\d+)-(\\d+)\\s+\\(([a-z]+)\\)\", event)\n","            if not match:\n","                continue\n","\n","            chrom = match.group(1)\n","            start = int(match.group(2))\n","            end = int(match.group(3))\n","            state = match.group(4)\n","\n","            all_chroms.add(chrom)\n","\n","            # Assign CNA value\n","            cna_value = 1 if state == \"gain\" else -1 if state == \"loss\" else 0\n","\n","            # Store the CNA value for this chromosome\n","            # For simplicity, we'll use the dominant state (most events)\n","            current_value = cell_chrom_cna[cell_id].get(chrom, 0)\n","            if abs(cna_value) > abs(current_value):\n","                cell_chrom_cna[cell_id][chrom] = cna_value\n","\n","    # Prepare chromosomes list if not provided\n","    if chromosomes is None:\n","        # Sort chromosomes numerically then X, Y, others\n","        def chrom_key(c):\n","            if c.isdigit():\n","                return (0, int(c))\n","            elif c == 'X':\n","                return (1, 0)\n","            elif c == 'Y':\n","                return (1, 1)\n","            else:\n","                return (2, c)\n","        chromosomes = sorted(all_chroms, key=chrom_key)\n","\n","    # Create CNA matrix\n","    cells_with_cna = list(cell_chrom_cna.keys())\n","\n","    if not cells_with_cna:\n","        print(\"No CNAs found in the dataset. Check your annotations format.\")\n","        return None, None, None\n","\n","    print(f\"Found CNAs in {len(cells_with_cna)} cells across {len(all_chroms)} chromosomes\")\n","\n","    # Limit the number of cells for visualization if needed\n","    if len(cells_with_cna) > max_cells:\n","        print(f\"Limiting visualization to {max_cells} randomly selected cells (out of {len(cells_with_cna)})\")\n","        np.random.seed(42)  # For reproducibility\n","        cells_with_cna = np.random.choice(cells_with_cna, max_cells, replace=False).tolist()\n","\n","    # Create DataFrame of CNA values\n","    # Note: using objects as indices to avoid numeric conversion issues\n","    cna_matrix = pd.DataFrame(0, index=pd.Index(cells_with_cna, dtype=object), columns=chromosomes)\n","\n","    # Fill in CNA values\n","    for cell, chrom_dict in cell_chrom_cna.items():\n","        if cell in cna_matrix.index:  # Only process cells that are in our matrix (if we sampled)\n","            for chrom, value in chrom_dict.items():\n","                if chrom in chromosomes:\n","                    cna_matrix.at[cell, chrom] = value\n","\n","    # Filter chromosomes with insufficient cells\n","    if min_cells_for_chrom > 1:\n","        chrom_counts = (cna_matrix != 0).sum(axis=0)\n","        keep_chroms = chrom_counts[chrom_counts >= min_cells_for_chrom].index.tolist()\n","        if len(keep_chroms) < len(chromosomes):\n","            print(f\"Filtering out {len(chromosomes) - len(keep_chroms)} chromosomes with < {min_cells_for_chrom} cells\")\n","            cna_matrix = cna_matrix[keep_chroms]\n","            chromosomes = keep_chroms\n","\n","    # Handle grouping by a column in obs\n","    if group_by is not None and group_by in adata.obs.columns:\n","        # Get group for each cell\n","        cell_groups = {}\n","        for cell in cells_with_cna:\n","            if cell in adata.obs_names:\n","                group = adata.obs.at[cell, group_by]\n","                cell_groups[cell] = group\n","\n","        # Sort by group\n","        if cell_groups:\n","            # Convert to Series for sorting\n","            grouping = pd.Series(cell_groups)\n","            # Sort cells by group\n","            cna_matrix = cna_matrix.loc[cna_matrix.index.intersection(grouping.index)]\n","            grouping = grouping.loc[cna_matrix.index]\n","            cna_matrix = cna_matrix.loc[grouping.sort_values().index]\n","\n","            # For plotting group labels later\n","            groups = grouping.loc[cna_matrix.index]\n","            group_positions = {}\n","            current_pos = 0\n","\n","            # Calculate position for each group\n","            for group in groups.unique():\n","                group_cells = groups[groups == group].index\n","                group_positions[group] = (current_pos, current_pos + len(group_cells) - 1)\n","                current_pos += len(group_cells)\n","\n","    # Handle cell ordering (clustering/sorting) if not grouped\n","    elif cna_matrix.shape[0] > 1:  # Only if we have multiple cells\n","        if cluster_cells:\n","            try:\n","                # Hierarchical clustering\n","                Z = linkage(cna_matrix.values, method='ward')\n","                # Get the order of cells from clustering\n","                leaves = dendrogram(Z, no_plot=True)['leaves']\n","                cna_matrix = cna_matrix.iloc[leaves]\n","            except Exception as e:\n","                print(f\"Error during clustering: {e}. Falling back to sorting.\")\n","                sort_cells = True\n","\n","        if sort_cells:\n","            # Sort cells by similarity (sum of CNAs across chromosomes)\n","            try:\n","                cna_matrix = cna_matrix.iloc[cna_matrix.sum(axis=1).sort_values().index]\n","            except Exception as e:\n","                print(f\"Error during sorting: {e}. Using original order.\")\n","\n","    # Create plot\n","    fig, ax = plt.subplots(figsize=figsize)\n","\n","    # Plot heatmap\n","    sns.heatmap(cna_matrix, cmap=cmap, center=0, vmin=-1, vmax=1,\n","                cbar_kws={'label': 'Copy Number State', 'shrink': 0.5},\n","                yticklabels=False, ax=ax)\n","\n","    # Add group labels if grouping was applied\n","    if group_by is not None and 'group_positions' in locals():\n","        # Add horizontal lines at group boundaries\n","        for group, (start, end) in group_positions.items():\n","            if start > 0:  # Don't draw line at the top\n","                ax.axhline(y=start, color='black', linewidth=1)\n","\n","            # Add group labels at the midpoint of each group\n","            midpoint = (start + end) / 2\n","            ax.text(-0.05, midpoint, str(group),\n","                   verticalalignment='center', horizontalalignment='right',\n","                   transform=ax.get_yaxis_transform(), fontsize=10, fontweight='bold')\n","\n","    # Customize appearance\n","    ax.set_title(title, fontsize=14)\n","    ax.set_xlabel('Chromosome', fontsize=12)\n","    ax.set_ylabel('Cells', fontsize=12)\n","\n","    if not show_chromosome_labels:\n","        ax.set_xticklabels([])\n","\n","    # Add additional information\n","    plt.tight_layout()\n","\n","    # Calculate summary statistics\n","    total_cells = len(adata)\n","    cells_with_cna_count = len(cell_chrom_cna)\n","    cells_in_plot = len(cna_matrix)\n","\n","    print(f\"CNA Summary:\")\n","    print(f\"  Cells with CNAs: {cells_with_cna_count}/{total_cells} ({cells_with_cna_count/total_cells*100:.1f}%)\")\n","    if cells_in_plot < cells_with_cna_count:\n","        print(f\"  Showing {cells_in_plot}/{cells_with_cna_count} cells in plot (sampling applied)\")\n","\n","    # Count chromosomes with CNAs\n","    chrom_counts = (cna_matrix != 0).sum(axis=0)\n","    print(f\"  Chromosomes with CNAs (showing top 5):\")\n","    for chrom, count in chrom_counts.nlargest(5).items():\n","        print(f\"    Chromosome {chrom}: {count} cells ({count/cells_in_plot*100:.1f}%)\")\n","\n","    return fig, ax, cna_matrix"],"metadata":{"id":"W3k1Woy1-Ouj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Basic usage\n","fig, ax, cna_matrix = plot_cna_heatmap(embryoid_annot_with_calls, cna_col='cnv_regions')\n","\n","# If you want to group by cell type or cluster\n","if 'cell_type' in embryoid_annot_with_calls.obs.columns:\n","    fig, ax, cna_matrix = plot_cna_heatmap(\n","        embryoid_annot_with_calls,\n","        cna_col='cnv_regions',\n","        group_by='cell_type',\n","        figsize=(18, 12)\n","    )\n","\n","# Save the figure\n","fig.savefig('cna_task3_test3_embryoids_heatmap.png', dpi=300, bbox_inches='tight')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6k62zNye-UI5","executionInfo":{"status":"ok","timestamp":1746660712404,"user_tz":240,"elapsed":3916,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"df05d0bf-850d-4fcc-d22d-4a835c454bbb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 479 cells with non-empty CNA annotations\n","Parsing CNA annotations...\n","Found CNAs in 479 cells across 23 chromosomes\n","Error during sorting: invalid literal for int() with base 10: 'AGACGTTCAGCCTATA-1'. Using original order.\n","CNA Summary:\n","  Cells with CNAs: 479/500 (95.8%)\n","  Chromosomes with CNAs (showing top 5):\n","    Chromosome 1: 373 cells (77.9%)\n","    Chromosome 17: 355 cells (74.1%)\n","    Chromosome 19: 350 cells (73.1%)\n","    Chromosome 2: 343 cells (71.6%)\n","    Chromosome 6: 336 cells (70.1%)\n","Found 479 cells with non-empty CNA annotations\n","Parsing CNA annotations...\n","Found CNAs in 479 cells across 23 chromosomes\n","CNA Summary:\n","  Cells with CNAs: 479/500 (95.8%)\n","  Chromosomes with CNAs (showing top 5):\n","    Chromosome 1: 373 cells (77.9%)\n","    Chromosome 17: 355 cells (74.1%)\n","    Chromosome 19: 350 cells (73.1%)\n","    Chromosome 2: 343 cells (71.6%)\n","    Chromosome 6: 336 cells (70.1%)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1000 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABawAAAPdCAYAAABm8C9jAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAsX1JREFUeJzs3XmcVXX9P/D3HZYBTFBEQERZBgX8qmCgiGG4kBBEmWZqFosLlbkgmkrf3DXcI800ClH8uqVpRRimpBRFmpr7wPcL4oIJroiCss35/eGPyWkAZ4Z7PefeeT4fj3ko5577mdedO3Pumfe87/vkkiRJAgAAAAAAUlaWdgAAAAAAAIhQsAYAAAAAICMUrAEAAAAAyAQFawAAAAAAMkHBGgAAAACATFCwBgAAAAAgExSsAQAAAADIBAVrAAAAAAAyQcEaAAAAAIBMULAGAEpa165do2vXrmnHyJsxY8ZELpeLF198Me0oeVNqzxGF9+KLL0Yul4sxY8bU2F6KPx8AAI2NgjUAFMDjjz8exx13XOyyyy6x1VZbRcuWLaOioiK+9a1vxQMPPJB2vAa56aabIpfLRS6Xi0mTJm10n0svvTRyuVzcdNNNn264EnDhhRdGLpeLZs2axdKlS+t134cffjhyuVycf/75hQm3hRpDEfHPf/5z9c/HXXfdlXacTHjnnXfi4osvjoEDB8Z2220XzZo1i+233z6GDBkS1157bbz//vtpRwQAIIMUrAEgj6qqqmLChAnRv3//mD59enTv3j2+853vxKmnnhr9+vWLmTNnxiGHHBIXXXRR2lG3yGWXXRZvv/122jFKRpIkMW3atMjlcrFu3bq4+eab0470qZo9e3bMnj077RhbZOrUqRERkcvl4sYbb0w5Tfpmz54dPXr0iHPOOSfefffdOOKII+LMM8+Mww8/PP71r3/FKaecEn369Ek7JgAAGdQ07QAAUEp++MMfxo9//OPo27dv3H333VFRUVHj9g8++CB++tOfxltvvZVSwi1XUVERixYtiksuuSSuuuqqtOOUhNmzZ8eLL74Y48aNizvuuCNuvPHGOOuss9KO9an5z5+TYrNixYq4++67Y88994wOHTrEH//4x3jllVdip512SjtaKp566qkYOXJkRET8z//8TxxzzDG19nn44Ydj4sSJn3Y0AACKgA5rAMiThQsXxuWXXx7bbbddzJo1a6NFuJYtW8b3v//9uOCCC2psf/PNN2P8+PHRrVu3KC8vj/bt28fXv/71ePbZZ2utsWG8wgsvvBCXX3557LLLLtGiRYvo1q1bXHjhhbF27drqfR988MHI5XJx4oknbjTzokWLoqysLIYOHVrnxzlmzJjo0aNHXHfddfHyyy9/4v6bmjW7QS6XiwMOOKDGtgMOOCByuVysXr06fvCDH8TOO+8cLVu2jH79+sWDDz4YERHvvvtufO9734tOnTpFixYtYuDAgfHoo49uMsfy5cvj29/+dnTs2DFatGgRe+21V9x+++0b3TdJkrjxxhvjc5/7XLRu3TpatWoV/fv332jn7Pnnnx+5XC4efvjhuOmmm+Kzn/1stGrVqtZj2pwN3bnjxo2LI444Iv73f/83/vKXv9Tpvueff34ceOCBERFxwQUXVI+l+M8RHGvWrImrr746PvvZz8ZWW20VW2+9dey///7xu9/9rtaaH/8eu+qqq2K33XaL8vLy6ufwX//6V5x33nmx7777Rvv27aO8vDy6du0aJ554Yrz++us11uratWt1x3i3bt2qs33867OpGdYrV66M8847L3r16hUtWrSItm3bxogRI+Kvf/3rRr8OG56H2267Lfr27RstW7aMHXbYIU499dT44IMPat3n17/+dQwePDjat28fLVq0iE6dOsWQIUPi17/+9Sd92Wu4/fbbY9WqVTFq1KgYNWpUVFVVbXYszuuvvx6nn3569OzZM1q2bBlt27aNAQMGxJVXXlm9z8d/biorK+OrX/1qbLfddjWe13Xr1sXVV18dffr0iZYtW0abNm3iwAMPjBkzZtT6nFVVVfHLX/4y9tlnn2jbtm20bNkyOnfuHCNHjoyHH344r1+XU045JT744IO49tprN1qsjvjoZ/w/P2/ER6NVRo4cGe3atYvy8vLYZZdd4oc//GGsWrWqTp97U/L1XAMAUHg6rAEgT2666aZYv359fPvb344OHTpsdt/y8vLq/3/jjTdi4MCBsWjRojjggAPiqKOOisWLF8fdd98dM2fOjPvvvz8GDRpUa43x48fHX//61/j6178en/nMZ2LGjBlx3nnnxdNPPx133313REQcfPDBUVFREbfddltceeWV0apVqxpr/PKXv4wkSeKEE06o8+Ns2rRpXHLJJXHkkUfGOeecU9DxFUceeWQ888wz8eUvfzk++OCDuPXWW+NLX/pS/PWvf41x48bFmjVr4ogjjog33ngj7rzzzhg2bFgsXrw42rRpU2OdNWvWxJAhQ+L999+Pb33rW7Fy5cr41a9+Fd/4xjfizTffjJNPPrl63yRJ4phjjonbb789dtlll/jGN74RzZs3jwceeCCOO+64eP7552sUFje44oor4qGHHoqvfOUrccghh0STJk3q9BjffvvtuPfee2O33XaLfv36xahRo2Lq1KkxderU2H///T/x/gcccEC8+OKLcfPNN8fgwYNrFIK32WabiIhYvXp1DBs2LB5++OHo27dvHHfccbF27dqYOXNmfOUrX4lrr702TjrppFprn3zyyfH3v/89RowYESNHjoz27dtHxEdFxauuuioOPvjgGDBgQDRr1iz++c9/xvXXXx/3339/PPHEE9XPwfjx4+Omm26Kp556Kk499dTqTJ90kcUPP/wwDjrooHj00Ufjs5/9bIwfPz6WLVsWd955Z9x///1x++23xxFHHFHrfj/96U9j1qxZ8ZWvfCUOOuigmDVrVlxzzTXx5ptvxq233lq93/XXXx8nnnhi7LDDDtXF4KVLl8ajjz4a9957bxx++OGf+LXfYOrUqdGkSZM45phjonXr1vHd7343pk2bFj/84Q8jl8vV2HfBggVx4IEHxmuvvRaDBg2KQw89NFauXBnPPfdc/OhHP4ozzjijxv4LFy6MfffdN/bYY48YM2ZMvPXWW9G8efNIkiS+9rWvxW9/+9vYdddd43vf+16sXLky7rzzzvjyl78cV199dZx22mnV60ycODEuv/zyqKioiG984xux9dZbx6uvvhpz586NBx98sPr7Zku/LgsXLow///nPsdNOO8XYsWM3u+/Hj4MbPvf3vve92Gabbaq/3x577LG45JJL4qGHHoqHHnoomjdv/klPRy35fK4BAPgUJABAXhxwwAFJRCQPPvhgve43duzYJCKSiRMn1tg+c+bMJCKSHj16JOvXr6/ePnr06CQiku233z555ZVXqrevXr06+fznP59ERHL33XdXb7/sssuSiEhuuummGuuvXbs22WGHHZL27dsna9as+cSc06ZNSyIimTRpUlJVVZXsvffeSVlZWfLUU09V7zNp0qQkIpJp06ZVb1u8eHESEcno0aM3um5EJIMHD66xbfDgwUlEJIMGDUref//96u133nlnEhHJNttskxxxxBHJ2rVraz3Oq666qsZaXbp0SSIi+fznP5+sXr26evsrr7yStGvXLikvL0+WLFlSvX3KlClJRCRjx46t8XVZvXp1MnLkyCQikscee6x6+3nnnZdERLLVVlslTz/99Oa/iBtxzTXXVH9dkyRJqqqqkq5duyatWrVK3n333Vr7b3j+Fy9eXL3toYceSiIiOe+88zb6OX7wgx8kEZGcc845SVVVVfX2FStWJP3790+aN2+evPrqq7U+R+fOnZOXXnqp1nrLli1L3nvvvVrbb7755iQikosvvvgTM39cly5dki5dutTYdsEFFyQRkRxzzDE1Mj/xxBNJ8+bNk2222SZZsWJF9fYNz0ObNm2S+fPnV29ftWpVsuuuuyZlZWU1HuNnP/vZpHnz5smyZctq5XnzzTc3mnNjnn766SQikqFDh1ZvGzVq1CaPBf37908iIpkyZUqt2z7+87zh5yYiknPPPbfWvhu+1oMHD67xff3SSy8l7dq1S5o2bZosWrSoenvbtm2TTp06JStXrqy11ltvvVX9/1v6dbnpppuSiEi++c1vfuK+H/fcc88lTZs2Tfr06VPr82w4rlx55ZXV2zZ1XNnY91q+nmsAAD4dRoIAQJ4sXbo0IiI6d+5c5/usWbMmbr/99thuu+3ihz/8YY3bhg8fHl/4whdi4cKFGx2BcOqpp9b4XM2bN49LLrkkIqLGOIKxY8dG8+bN45e//GWN+8+cOTNee+21GD16dDRr1qzOmSM+GuNx2WWXRVVVVZx99tn1um99XHLJJbHVVltV//trX/taNGvWLJYvXx5XXnllNG367zeLHX300RHx0fzcjfnRj35Uozuzc+fOceqpp8bq1avjjjvuqN7+05/+NLbaaqu47rrranxdPv713dgokXHjxsUee+xR78c4derUKCsri29+85sR8dHX9pvf/GasWrWqRq6Gqqqqiuuvvz4qKiqqR4ZssPXWW8e5554ba9asiXvuuafWfb///e/HzjvvXGt7+/bt4zOf+Uyt7d/61reidevW1WNbtsTNN98czZo1i0svvbRG5r322itGjx4dy5cvj9/85je17nfqqadGz549q//dsmXLOProo6Oqqioef/zxGvs2a9Zso9/72223XZ1zbhjnMmrUqOptG/5/w20bPProo/HYY4/F5z//+Y2+q2Fjx46OHTvGf//3f9favuGdDZdffnmN7+udd945TjvttFi3bl2NjvKIj76HN9b537Zt2xr/3pKvS0OOgxERP//5z2PdunVx7bXX1vo8Z555Zmy//fabHOFTF/l4rgEA+HQYCQIAKZo/f358+OGHceCBB9Ya1xERceCBB8YDDzwQTz75ZK3xEBsbFzFw4MBo2rRp/POf/6zetv3228dhhx0Wd9xxR8yfPz969eoVEVFdwD7++OMblP3AAw+MYcOGxR/+8IeYM2dODB48uEHrbE7fvn1r/LusrCzat28fq1atqlVI3WGHHSLio/nK/6lp06YxcODAWts3fA03fL1WrVoVzzzzTHTq1Ckuu+yyWvtvmA8+f/78Wrfts88+dXhENT322GPx1FNPxcEHH1yjwDdq1Ki4+OKLY+rUqTFu3Lh6r/txCxYsiHfeeSc6depUa3Z6xEcjaSLq/5juueee+PnPfx5PPPFEvPPOO7F+/frq2zb2HNTHihUr4oUXXojevXtvtPB54IEHxi9+8Yt48skn41vf+laN2/r161dr/w1rLF++vHrbUUcdFWeeeWbsvvvu8Y1vfCMOPPDAGDRoULRu3brOOVevXh3/8z//E1tvvXV89atfrZFvp512invvvTfeeeed2HbbbSMiqmesH3LIIXX+HH369NnoGIx//vOf0apVq40+Rxtmmj/55JPV24466qj42c9+FrvvvnscddRRceCBB8bAgQOjZcuWNe6bj69LQ/z973+PiIj7778/Zs+eXev2Zs2abfR7tC7SekwAADSMgjUA5EnHjh1j/vz58eqrr9bo8NycFStWRERscub1hiLshv0+bmP3adKkSWy33Xbx7rvv1tj+7W9/O+6444745S9/GVdeeWX861//ij/84Q8xePDg2HXXXeuUdWMuvfTS+OMf/xhnnnlmPPLIIw1eZ1M2VlBq2rTpJrdHRI2LTm7Qrl27KCur/cayDV/DDV+vd955J5IkiVdffXWjxd0NVq5cucm16mNj3bkREbvsskvsu+++8fe//z2ee+65+K//+q96r73B22+/HRERzz33XDz33HOb3K8+j+mqq66KM844I7bffvs45JBDonPnztWFz8mTJ8fq1asbnDdiy34uNve98fGi+hlnnBHbbbddXH/99XHVVVdVd+yPGDEifvzjH0e3bt0+MedvfvObeOutt2Ls2LE1Cr9lZWVxzDHHxKWXXhq33XZbfO9734uIf3+f7bjjjp+49gab+hqsWLEidtppp43etrGvz09+8pPo1q1bTJs2LS6++OK4+OKLo0WLFvH1r389rrrqqmjXrl1EbPnXpWPHjhER8eqrr9b5MUb8+/t0w7sY8ikfzzUAAJ8eI0EAIE8+97nPRURstDtwUzYU15YtW7bR2ze8vX5jRbiN3Wf9+vXx1ltv1bro4AEHHBC9evWK6dOnx5o1a2LatGmxfv36el1scWP69OkTxxxzTDz66KNx1113bXSfDYXidevW1brtPwvrhfLmm29GVVVVre0bvoYbvl4bvs79+vWLJEk2+fHQQw/VWus/L673ST744IPqEQejR4+OXC5X42NDx+l/jpWorw2P6fDDD9/sY5o2bVqdHtO6devioosuih122CGeffbZuPXWW+Oyyy6L888/P84777xYs2bNFuX9eOaG/FzUVS6Xi2OPPTb+8Y9/xBtvvBH33ntvHHbYYfHb3/42vvSlL9Uobm/Khudm2rRptZ6/Sy+9tMY+Ef++CGZ9irmb+r5q3bp1vP766xu9bWNfn6ZNm8YZZ5wRzz33XLz66qtx2223xf777x/Tp0+PY445psbn25Kvy4bj4MMPP7zRn7lN2ZB1xYoVm/0+bYh8PNcAAHx6FKwBIE/GjBkTTZo0iSlTplSPWdiUDR2ovXr1ihYtWsQ//vGPWLVqVa39Hn744YioPRojIuIvf/lLrW3z5s2LdevWxV577VXrtnHjxsUbb7wRv/nNb+LGG2+MbbfdNg4//PA6PLLNu+iii6K8vDz++7//e6NF6c0V6T4+uqSQ1q1bF/Pmzau1fcPXcMPXa+utt47evXtHZWVljfERhXD33XfHu+++G3379o3jjjtuox8tWrSIW2655ROLwBvmEm+s8Na7d+9o3bp1PPbYYxvtPq+vN998M959990YOHBgtG/fvsZtjz32WHzwwQf1yrcxrVu3ju7du8fChQs3+n2zuZ+Lhthuu+3i0EMPjTvvvDMOOuigeP7552PhwoWbvc9LL70Us2fPjg4dOmzy+evWrVv885//rP4+3zC+449//OMWZ95rr71i1apV1WNGPu6Tvj6dOnWKo48+OmbNmhU9evSIBx98cKPPW0O+Lj169IjPf/7z8corr1TP2d6Uj3fiDxgwICL+PRqkUBrymAAA+HQpWANAnvTo0SPOPPPMePPNN+OLX/xiLF68uNY+H374YVx99dVx/vnnR8RHF0E7+uij480334xJkybV2HfWrFlx//33R48ePaq7Fj/uJz/5SSxZsqT632vWrKm+ONuYMWNq7T969Oho0aJFnHbaafHCCy/Et771rWjRosUWPOKPdOnSJU488cT4v//7vxoXe9ygdevW0bNnz5g7d26NwtB7770XEydO3OLPX1c/+MEPahR+lyxZEj/5yU+ivLw8jjrqqOrtp5xySqxatSpOOOGEjY7JWLx4cbz44otbnGdD5+3VV18dv/zlLzf68dWvfjXefPPN+N3vfrfZtTZcNO+VV16pdVvTpk3ju9/9brz00ktxxhlnbLRo/eyzz26yW/c/tW/fPlq2bBlPPPFEjT+yvPPOO3HyySfXO9+mjB49OtauXRsTJ06s0Vn79NNPx0033RRt2rSJQw89tM7r/aeHH364Vsfu2rVrq0dTfNLPxrRp06Kqqiq+/e1vb/L523BB0g3P9d577x177713/PnPf45f/OIXtdasT+f16NGjIyJi4sSJNZ7TV155Ja6++upo2rRpdef06tWr429/+1utNVauXBnvv/9+NGvWrPqdEFv6dYn46NjUsmXLOOmkk+LOO+/c6D5/+ctf4qCDDqr+94knnhhNmzaNk08+OV5++eVa+y9fvrzBf+DKx2MCAODTY4Y1AOTRxRdfHB9++GH8+Mc/jp49e8ZBBx0Uu+++ezRr1iwWL14cDz74YLz11ltx8cUXV9/nsssuizlz5sTFF18cf/vb32LAgAHx4osvxl133RWtWrWKadOmbXT+8r777ht9+vSJI488MrbaaquYMWNGLFiwIA477LCNdk63bds2jjjiiLjlllsiIrZ4HMjH/fd//3fceOONsWjRoo3efvrpp8e4ceNi4MCBccQRR0RVVVX84Q9/iL333jtvGTZnhx12iJUrV8aee+4ZI0eOjJUrV8avfvWreOutt+Kaa66pMVP429/+dvz973+Pm2++Of7617/GkCFDolOnTrFs2bKYP39+PPLII3HbbbdF165dG5xn4cKF8ec//zm6du0aBxxwwCb3Gzt2bNx+++0xderU+NrXvrbJ/Xr16hWdOnWKO+64I8rLy6Nz586Ry+Xi5JNPjjZt2sQFF1wQTzzxRFxzzTUxc+bM+PznPx/t27ePV199NZ555pl46qmnYt68ebU6pjemrKwsTjzxxLjqqquiT58+MXLkyFixYkX84Q9/iC5dukSnTp1q3eeggw6KK6+8MsaNGxeHH354bLXVVtGlS5daF0z8uDPPPDNmzpwZt9xyS1RWVsbBBx8cr7/+etx5552xbt26+MUvfhFbb731J+bdlEMPPTRat24d++67b3Tp0iXWrl0bDzzwQDz//PPxta99Lbp06bLJ+1ZVVVWPAdnYH4c2OPLII2P8+PFx6623xpVXXhktWrSIW2+9NQ444IAYN25c3HLLLTFw4MD48MMP47nnnot//vOf8dZbb9Up/7e+9a2455574re//W3sueee8aUvfSlWrlwZd955Z7z99ttx1VVXRffu3SPio/Ezn/vc52LXXXeNfv36xc477xzvv/9+/P73v4+lS5fGGWecEeXl5Vv8ddmgb9++MWPGjPj6178eRx11VFx44YXx+c9/Ptq2bRtvv/12/PWvf41nnnkmevToUX2f3XffPX72s5/Fd7/73ejZs2cMHz48Kioq4r333osXXngh5syZE2PGjIkbbrihTl+fj8vHYwIA4FOUAAB5949//CM59thjkx49eiQtW7ZMysvLk65duybf+MY3kgceeKDW/m+88UZyyimnJF26dEmaNWuWtGvXLvna176WPPPMM7X2HT16dBIRyaJFi5JLL7006dGjR9K8efOkS5cuyfnnn5+sXr16k7kefPDBJCKSfffdt96Padq0aUlEJJMmTdro7T/60Y+SiEgiIpk2bVqt26+77rpkl112SZo1a5bsvPPOybnnnpusWbMmiYhk8ODBNfYdPHhwsqnTlC5duiRdunTZ6G0bW2vD/m+//XYybty4pEOHDkl5eXnSp0+f5Lbbbtvk473zzjuTIUOGJNtuu23SrFmzZMcdd0wOOOCA5KqrrkreeOON6v3OO++8JCKShx56aJNr/aeJEycmEZGcd955m91v/fr1yU477ZSUlZUlL7/8cpIk/37+Fy9eXGPfv//978ngwYOTrbfeuvp5+Pg+69atS37+858nn/vc55LWrVsn5eXlyc4775wMGzYsuf7665P333+/et9NfY4N1qxZk1xyySXJLrvsUr3O6aefnrz33nubfH4uv/zy6uf/P5+nTd3n/fffT84555xk1113TZo3b55ss802yRe/+MXkL3/5S619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DwrDzxbQ2JVqt6TuOygMP1tAffh9q7iU6nmhGdb119hGdxTKq6++Gj169Ki1vaqqKtauXdvgdRv87Jx55plx5513Vv978eLF8dWvfjUWL14cERETJkyIKVNcSBEAAAAAoNTstttu8Ze//KXW9rvvvjv22muvBq/b4A7rp556Kr7//e9X/3v69OnRpEmT+Oc//xnt2rWLI488Mm644YYYN25cndYr1b9yAQAUgnMnAABomCSXSztCSTj33HNj9OjR8eqrr0ZVVVXcc889sWDBgpg+fXr8/ve/b/C6De6wfvfdd2O77bar/vd9990XX/jCF6Jdu3YREfGFL3whFi5c2OBgAAAAAABk01e+8pWYMWNGPPjgg7HVVlvFueeeG5WVlTFjxoz4whe+0OB1G9xhvcMOO0RlZWVERLz22mvx+OOPx9ixY6tvf//996OszDwYgMbOLFDSphOZLHAsBADIjiR0WOfL/vvvHw888EBe12xwwforX/lKXHvttfHhhx/GI488EuXl5fHVr361+vannnoqunfvnpeQAAAAAAD54KKL+fXYY49VNzbvtttu0a9fvy1ar8EF64svvjjeeOONuOWWW2KbbbaJm266KTp06BAREStWrIi77747vve9721ROLJJhxBA6arsNTztCHk3Me0A1Evv+felHQEgdaX4egwUTve1C9KOQCO1ZMmSOProo+Ovf/1rbLPNNhERsXz58thvv/3ijjvuiM6dG1ZDbHDB+jOf+Uzceuutm7xtyZIl0apVq4YuDwAAAACQd0aC5Mfxxx8fa9eujcrKyujZs2dERCxYsCDGjh0bxx9/fMyaNatB6+aSJEnyGbShZjbrmXYEGrlS7ejSnQHUR6keC0uR4ztZUIrHDD9bABSbETqs6+3l/6ss2No779K7YGtnTcuWLeNvf/tb7LXXXjW2P/7447H//vvHqlWrGrRunTusL7zwwnovnsvl4pxzzqn3/SANfjkBcCwE6scxAwAoRmZY58dOO+0Ua9eurbV9/fr10alTpwavW+cO67Ky+j+RuVwu1q9fX6d9dVgDAAAAQP3osK6/lxYW7mvWpUfjqXH+9re/jR/96Edx3XXXRf/+/SPiowswnnzyyXHWWWfFoYce2qB1MzMS5IVFi9KOABQRHV1AXZXiyIJS5vgOAFA/Ctb19+LC/y3Y2l177FqwtbNg2223jVzu3zPAV65cGevWrYumTT8a5LHh/7faaqt4++23G/Q5GnzRRQAAAAAAGo/JkycX/HNkpsN60Mg5aUcAAAAAgKIyd8bgtCMUncWLFhZs7W4VPeq1/3XXXRdXXHFFLF26NPr06RPXXntt7LPPPpvc/6677opzzjknXnzxxdhll13isssui+HD//0uxSRJ4rzzzotf/OIXsXz58vjc5z4X119/feyyyy4Nfkyftjp3WHfr1q1Gu3dd5HK5WGTUBwAAAACQEUnUr8ZZKHfeeWdMmDAhbrjhhhgwYEBMnjw5hg4dGgsWLIj27dvX2v9vf/tbHH300TFp0qT40pe+FLfddlsceuih8cQTT8Tuu+8eERGXX355XHPNNXHzzTdHt27d4pxzzomhQ4fG888/Hy1atCjI43j99dfj9ddfj6qqqhrb99xzzwatV+cO6zFjxtS7YB0RMW3atDrtp8O6eEyf3DntCBCjxi9JOwIANHrOC4uHcyeA0qXDuv4KeS29HTt3jtWrV9fYVl5eHuXl5bX2HTBgQOy9997x05/+NCIiqqqqYqeddoqTTz45zj777Fr7H3nkkbFy5cr4/e9/X71t3333jb59+8YNN9wQSZJEp06d4vTTT48zzjgjIiLefffd6NChQ9x0001x1FFH5fOhxuOPPx6jR4+OysrK+M8Scy6Xi/Xr1zdo3Tp3WN90000N+gQAAAAAAFmRNKApt64mTZoUF1xwQY1t5513Xpx//vk1tq1ZsyYef/zxmDhxYvW2srKyGDJkSMybN2+ja8+bNy8mTJhQY9vQoUPjN7/5TURELF68OJYuXRpDhgypvr1NmzYxYMCAmDdvXt4L1scee2zsuuuuMXXq1OjQoUODmp03JjMXXSzF7oxS7WIo1ccFAED9OC8EAKhp4sSJtYrKG+uufvPNN2P9+vXRoUOHGts7dOgQ8+fP3+jaS5cu3ej+S5curb59w7ZN7ZNPL7zwQvz617+OHj3qN7f7k5RtyZ1XrFgRl156aQwdOjT22muvePTRRyMi4u23346rr746Fi4s3ABzAAAAAID6SpJcwT7Ky8ujdevWNT42VrAuBQcffHA89dRTeV+3wR3WS5YsicGDB8crr7wSu+yyS8yfPz/ef//9iIho27Zt/PznP4+XXnopfvKTn9RpPd0ZAKWpFN9BU8q8HgONndet4uJ1C4Bi1a5du2jSpEksW7asxvZly5ZFx44dN3qfjh07bnb/Df9dtmxZ7LDDDjX26du3bx7Tf+SXv/xljB49Op599tnYfffdo1mzZjVu//KXv9ygdRtcsP7+978f7733Xjz55JPRvn37WleuPPTQQ2sMAAcAAAAASFuyZUMn8qJ58+bRr1+/mD17dhx66KER8dFFF2fPnh0nnXTSRu8zcODAmD17dowfP7562wMPPBADBw6MiIhu3bpFx44dY/bs2dUF6hUrVsQjjzwS3/3ud/P+GObNmxd//etf4w9/+EOt2z6Viy7+pz/+8Y9x2mmnxW677RZvvfVWrdu7d+8er7zySp3X08kAAOnzelw8dBUClO7rlmM8QGElUbiLLtbHhAkTYvTo0dG/f//YZ599YvLkybFy5coYO3ZsRESMGjUqdtxxx5g0aVJERJx66qkxePDguOqqq2LEiBFxxx13xGOPPRZTpkyJiI+KxOPHj4+LL744dtlll+jWrVucc8450alTp+qieD6dfPLJ8c1vfjPOOeecWnOzt0SDC9YffPBBbL/99pu8/b333mvo0gAAAAAAJe3II4+MN954I84999xYunRp9O3bN2bNmlVd/H355ZejrOzf3eD77bdf3HbbbfHDH/4wfvCDH8Quu+wSv/nNb2L33Xev3ufMM8+MlStXxrhx42L58uUxaNCgmDVrVrRo0SLv+d9666047bTT8lqsjojIJUmSNOSO/fv3j549e8att94ab731Vmy//fbx4IMPxkEHHRQREYMGDYomTZrEnDlz6rTeoJF124/0lWoXAwAAQBbosAbqY+6MwWlHKDoLFtV9KkR99azYqWBrZ83o0aNj//33j+OPPz6v6za4w3r8+PExevTo2HPPPeOII46IiI/mrCxcuDAuuOCCmDdvXvz617/OW1CAj3MSDzR2/oAMULoc4wEoBrvuumtMnDgx5s6dG3vssUetiy6ecsopDVq3wR3WERGXXHJJnH/++ZEkSVRVVUVZWVkkSRJlZWVx8cUXx1lnnVXntXRYFw8nT2SBgjXQ2Hk9BgAgIqJ7RUXaEYrO/EWFqyn0qmg85+ndunXb5G25XC5eeOGFBq27RQXriI9mqfz617+OhQsXRlVVVVRUVMRhhx0W3bt3r9c6LyxatCUxMklBDUBRjfSV6uuxny2gPip7DU87ApSk3vPvSzsC9VCq54VGgtSfgnW21WskyIcffhjjx4+P//qv/4qTTz45IiJ23nnnOO2002rsd80118T8+fPjJz/5Sa1WcAAAAACAtCSRSzsCm1GvDutrrrkmzjzzzHj++ec320G9aNGi+K//+q/48Y9/HN/97nfrtLaRIAAAAABQPzqs6+/5hf8q2Nq79ehUsLWz5thjj93s7TfeeGOD1q1Xh/WvfvWrOPzwwz9x3EdFRUUcccQRcfvtt9e5YA0AAAAAQHF45513avx77dq18eyzz8by5cvjoIMOavC69SpYP/PMM3HMMcfUad/99tsvZsyYUee1S3EOY6nORgIKoxSPgwB8xHkhFIbzJwAawkiQ/Lj33ntrbauqqorvfve7UbEFFwMtq8/Oa9asiebNm9dp3+bNm8fq1asbFAoAAAAAgOJSVlYWEyZMiB//+McNXqNeHdadOnWKZ599tk77Pvvss9GpU91ntpTiVaunu1owFEwpdqqV4mMCqK9S7ZYs1cdViufwFBu/cwFQfzqsC2vRokWxbt26Bt+/XgXrIUOGxPTp02PixInRvn37Te73+uuvx/Tp0+OII45ocDAAAAAAALJpwoQJNf6dJEm89tprMXPmzBg9enSD180lSZLUdecXXngh9thjj+jWrVtMnTo1BgwYUGufRx55JI4//vh44YUX4umnn67zvJKZzXrWPTWp6q1zvKjofAIaO69bAM4JyQavyVAY3bdgVnBj9czCZQVbe48eHQq2dtYceOCBNf5dVlYW22+/fRx00EFx7LHHRtOm9eqVrlave3Xv3j1+9atfxdFHHx377bdfdO/ePfbYY4/Yeuut47333otnn302Fi1aFK1atYo77rhji4ZrAwAAAADkW5IYCZIPDz30UEHWrVeH9QYvvvhiXHbZZfH73/8+Xn311ertnTp1ii996Utx5plnRvfu3eu15qCRc+obI/MmzhqXdgQAADJAV2Hx0IkMQLEZsXZB2hGKztP/93rB1t5zl02PUaZuGtSX3bVr17j++uvj+uuvj/feey9WrFgRrVu3jq233jrf+QAAAAAA8qbKRRe3yIEHHhi53Oa/hrlcLmbPnt2g9Rs2SORjtt56a4XqTZg0bEraEaBkTZ/cOe0IAEAJ0g1fXEaNX5J2BIDUjUg7AI1O3759N3nbe++9F7fddlusXr26wetvccEaIA1+OQEau1L9w53jO0Dp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ZpvqYnVExJAhQ6KsrCweeeSROq/z7rvvRuvWrauL1Rt873vfi3bt2sU+++wTN954Y9S1v7mqqiqaNWtWa3uzZs2iqqqqzrn+U2ZGggAAQKkq1fFIQGEYCQJQvCZOnBgTJkyosW1LuqsjIpYuXRrt27evsa1p06bRtm3bWLp0aZ3WePPNN+Oiiy6KcePG1dh+4YUXxkEHHRStWrWKP/7xj3HiiSfG+++/H6eccsonrnnQQQfFqaeeGrfffnt1l/err74ap512Whx88MF1fHS1KVgDAAAAAI1GkhRuhnV5efM6F6jPPvvsuOyyyza7T2Vl5RZnWrFiRYwYMSJ22223OP/882vcds4551T//1577RUrV66MK664ok4F65/+9Kfx5S9/Obp27Ro77bRTRES88sorsfvuu8f//M//NDhvZgrWE2eN++SdAACgCFX2SjsBUEwmph0AKDIL0g5AA51++ukxZsyYze7TvXv36NixY7z++us1tq9bty7efvvt6Nix42bv/95778WwYcNi6623jnvvvXejIzw+bsCAAXHRRRfF6tWrP7HwvtNOO8UTTzwRDz74YMyfPz8iInr37h1DhgzZ7P0+SWYK1gAAAAAAhVbHEc0Ft/3228f222//ifsNHDgwli9fHo8//nj069cvIiL+9Kc/RVVVVQwYMGCT91uxYkUMHTo0ysvL43e/+120aNHiEz/Xk08+Gdtuu22du8RzuVx84QtfiC984Qt12r8uMlOwnjRsStoRaOTMlgTqw2xJAOdPUCjOM6AwvG5RrHr37h3Dhg2LE044IW644YZYu3ZtnHTSSXHUUUfVmB198MEHx/Tp02OfffaJFStWxCGHHBKrVq2K//mf/4kVK1bEihUrIuKjQnmTJk1ixowZsWzZsth3332jRYsW8cADD8SPfvSjOOOMMzab509/+lOcdNJJ8fe//z1at25d47Z333039ttvv7jhhhti//33b9DjzUzBGgAAAACg0KqicDOsC+XWW2+Nk046KQ4++OAoKyuLww8/PK655prq29euXRsLFiyIVatWRUTEE088EY888khERPTo0aPGWosXL46uXbtGs2bN4rrrrovTTjstkiSJHj16xNVXXx0nnHDCZrNMnjw5TjjhhFrF6oiINm3axLe//e24+uqrG1ywziVJNprgB42ck3YEAAAAoEB0t0JhdK+o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AACA1pbpYZ1ruVmwnjWtb+oIQIG4KgNah+NxcdgPAjhuQWsxzwBSys2CNQAAAABAa8syPazzrCLLslzUwM+tHJw6AgAAAAAUytgN9akjFM4hR/2h1Z77D787pFWe9wc/+EHMnTs3Fi1aFO3bt481a9Zs8XeyLIspU6bET3/601izZk0cfPDBcd1118Xuu+/e+JhXX301zj777JgzZ060adMmjj322Jg+fXrsuOOOrTKO5miT7JUBAAAAANiid999N4477rg488wzm/07l19+eVx99dUxY8aMWLhwYXTu3DmOOOKIePvttxsfM378+PjLX/4S8+fPjzvuuCMefPDBOOOMM1pjCM2mwhoAAAAACkqFdcsNG1fXas+9YM7wVnvuiIgbb7wxamtrt1hhnWVZVFVVxTe+8Y0477zzIiJi7dq1seuuu8aNN94YJ554YixZsiT23HPPePTRR2P//fePiIh58+bFmDFjYsWKFVFVVdWqY/kguelhfemomakjAAAAAEChjE0dgCbeeeedeOedd5ps69ChQ3To0GGb5li+fHmsWrUqRowY0bitW7duccABB8TDDz8cJ554Yjz88MPRvXv3xsXqiIgRI0ZEmzZtYuHChXHMMcds08zvyc2CNQAAAABAa2vNKuiLLroovv/97zfZNmXKlLjooota7TXfz6pVqyIiYtddd22yfdddd2382apVq6JXr15Nft6uXbvo0aNH42NSyM2C9axpfVNHAEhqSc2Y1BEAoEWGLL0zdQSayTwDoJxpCZInF1xwQXz9619vsu2Dqqu//e1vx9SpUzf7fEuWLImampqS5SuC3CxYAwAAAAAUWUvaf3zjG9+IiRMnbvYxAwcO/FA5evfuHRERq1evjj59+jRuX716dXzsYx9rfMxLL73U5Pf++te/xquvvtr4+ylYsAbICVVqABSNql2gJcx3AZrq2bNn9OzZs1Wee7fddovevXvHvffe27hAvW7duli4cGGceeaZERFx4IEHxpo1a+Kxxx6L/fbbLyIi7rvvvmhoaIgDDjigVXI1R5tkrwwAAAAAwBY9//zzsWjRonj++edj48aNsWjRoli0aFG88cYbjY+pqamJ2bNnR0RERUVF1NbWxr/+67/G7bffHosXL44JEyZEVVVVHH300RERMWTIkBg1alScfvrp8cgjj8R//ud/xuTJk+PEE0+M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lK1y0UUXRUVFRZM/NTU1qWOVxAsvvBBf/OIXY+edd45OnTrFPvvsE3/6059Sx9oqAwYM2OT9qqioiEmTJqWOtlU2btwYF154Yey2227RqVOnqK6ujosvvjiKfk/h119/PWpra6N///7RqVOnOOigg+LRRx9NHatFtnTszbIsvve970WfPn2iU6dOMWLEiHj66afThG2BLY3r1ltvjZEjR8bOO+8cFRUVsWjRoiQ5W2pz49qwYUN861vfin322Sc6d+4cVVVVMWHChFi5cmW6wM20pffroosuipqamujcuXPstNNOMWLEiFi4cGGasM3UknntV7/61aioqIhp06Zts3wf1pbGNXHixE2OYaNGjUoTtgWa834tWbIkjjzyyOjWrVt07tw5PvnJT8bzzz+/7cO2wJbG9X5zjoqKirjiiivSBG6mLY3rjTfeiMmTJ0ffvn2jU6dOseeee8aMGTPShG2mLY1p9erVMXHixKiqqooddtghRo0aVYjjcXPOh99+++2YNGlS7LzzzrHjjjvGscceG6tXr06UeMuaM6aZM2fGP/3TP0XXrl2joqIi1qxZkyZsC2xpXK+++mqcffbZMXjw4OjUqVP069cvvva1r8XatWsTpm6ZjRs3xkEHHRSf//znm2xfu3ZtfPSjH43vfve7iZJBMW03C9ZvvvlmDB06NK699trUUUqmrq4uJk2aFH/84x9j/vz5sWHDhhg5cmS8+eabqaNtlb59+8Zll10Wjz32WPzpT3+Kww47LI466qj4y1/+kjpaSTz66KPxk5/8JPbdd9/UUUpir732ihdffLHxz4IFC1JH2mqvvfZaHHzwwVFZWRm///3v47//+7/jyiuvjJ122il1tK3y6KOPNnmv5s+fHxERxx13XOJkW2fq1Klx3XXXxb/927/FkiVLYurUqXH55ZfHNddckzraVjnttNNi/vz58fOf/zwWL14cI0eOjBEjRsQLL7yQOlqzbenYe/nll8fVV18dM2bMiIULF0bnzp3jiCOOiLfffnsbJ22ZLY3rzTffjGHDhsXUqVO3cbKts7lxrV+/Ph5//PG48MIL4/HHH49bb7016uvr48gjj0yQtGW29H7tscce8W//9m+xePHiWLBgQQwYMCBGjhwZ/+///b9tnLT5mjuvnT17dvzxj3+MqqqqbZRs6zRnXKNGjWpyLPvVr361DRN+OFsa17Jly2LYsGFRU1MTDzzwQPz5z3+OCy+8MDp27LiNk7bMlsb19+/Tiy++GD/72c+ioqIijj322G2ctGW2NK6vf/3rMW/evPjFL34RS5Ysidra2pg8eXLcfvvt2zhp821uTFmWxdFHHx3PPvts/O53v4snnngi+vfvHyNGjMj9eWVzzofPPffcmDNnTtxyyy1RV1cXK1eu3GRBMU+aM6b169fHqFGj4jvf+U7CpC2zpXGtXLkyVq5cGT/84Q/jySefjBtvvDHmzZsXp556auLkzde2bdvG3L/85S8bt5999tnRo0ePmDJlSsJ0UEDZdigistmzZ6eOUXIvvfRSFhFZXV1d6iglt9NOO2X//u//njrGVnv99dez3XffPZs/f342fPjw7JxzzkkdaatMmTIlGzp0aOoYJfetb30rGzZsWOoYre6cc87Jqqurs4aGhtRRtsrYsWOzU045pcm2z3/+89n48eMTJdp669evz9q2bZvdcccdTbZ/4hOfyL773e8mSrV1/vHY29DQkPXu3Tu74oorGretWbMm69ChQ/arX/0qQcIPZ3NziuXLl2cRkT3xxBPbNFMpNGeu9Mgjj2QRkT333HPbJlQJNGdca9euzSIiu+eee7ZNqK30QWNasWJF9pGPfCR78skns/79+2c/+tGPtnm2rfF+4zr55JOzo446KkmeUnm/cZ1wwgnZF7/4xTSBSqQ5n62jjjoqO+yww7ZNoBJ5v3Httdde2b/8y7802Vak4/M/jqm+vj6LiOzJJ59s3LZx48asZ8+e2U9/+tMECT+8fzwfXrNmTVZZWZndcsstjY9ZsmRJFhHZww8/nCpmi2zuHP/+++/PIiJ77bXXtn2wrdSctYvf/OY3Wfv27bMNGzZsw2Rbb/r06dlOO+2UrVy5MrvtttuyysrKbNGiRaljQeFsNxXW24P3Lpfp0aNH4iSls3Hjxvj1r38db775Zhx44IGp42y1SZMmxdixY2PEiBGpo5TM008/HVVVVTFw4MAYP3587i9fbY7bb7899t9//zjuuOOiV69e8fGPfzx++tOfpo5VUu+++2784he/iFNOOSUqKipSx9kqBx10UNx7773x1FNPRUTEf/3Xf8WCBQti9OjRiZN9eH/9619j48aNm1TXderUqSyuYoiIWL58eaxatarJ/rBbt25xwAEHxMMPP5wwGc21du3aqKioiO7du6eOUjLvvvtuzJw5M7p16xZDhw5NHedDa2hoiC996Utx/vnnx1577ZU6Tkk98MAD0atXrxg8eHCceeaZ8corr6SOtFUaGhpi7ty5sccee8QRRxwRvXr1igMOOKAs2hf+vdWrV8fcuXMLVS35QQ466KC4/fbb44UXXogsy+L++++Pp556KkaOHJk62ofyzjvvREQ0mXO0adMmOnToULg5xz+eDz/22GOxYcOGJnONmpqa6NevX2HmGuV4jh/RvHGtXbs2unbtGu3atdtWsUri7LPPjqFDh8aXvvSlOOOMM+J73/teoecUkIoF6zLR0NAQtbW1cfDBB8fee++dOs5WW7x4cey4447RoUOH+OpXvxqzZ8+OPffcM3WsrfLrX/86Hn/88bj00ktTRymZAw44oPGyp+uuuy6WL18ehxxySLz++uupo22VZ599Nq677rrYfffd46677oozzzwzvva1r8VNN92UOlrJ3HbbbbFmzZqYOHFi6ihb7dvf/naceOKJUVNTE5WVlfHxj388amtrY/z48amjfWhdunSJAw88MC6++OJYuXJlbNy4MX7xi1/Eww8/HC+++GLqeCWxatWqiIjYddddm2zfddddG39Gfr399tvxrW99K0466aTo2rVr6jhb7Y477ogdd9wxOnbsGD/60Y9i/vz5scsuu6SO9aFNnTo12rVrF1/72tdSRympUaNGxaxZs+Lee++NqVOnRl1dXYwePTo2btyYOtqH9tJLL8Ubb7wRl112WYwaNSruvvvuOOaYY+Lzn/981NXVpY5XMjfddFN06dIl160Ymuuaa66JPffcM/r27Rvt27ePUaNGxbXXXhuf+cxnUkf7UN5bwL3gggvitddei3fffTemTp0aK1asKNSc4/3Oh1etWhXt27ff5IvVosw1yu0c/z3NGdfLL78cF198cZxxxhnbON3Wq6ioiOuuuy7uvffe2HXXXePb3/526khQSMX6qooPNGnSpHjyyScL9y34Bxk8eHAsWrQo1q5dG7/97W/j5JNPjrq6usIuWv/P//xPnHPOOTF//vzc9yNsib+vYN13333jgAMOiP79+8dvfvObQlfQNDQ0xP777x+XXHJJRER8/OMfjyeffDJmzJgRJ598cuJ0pXH99dfH6NGjC9PXdHN+85vfxC9/+cu4+eabY6+99opFixZFbW1tVFVVFfr9+vnPfx6nnHJKfOQjH4m2bdvGJz7xiTjppJPiscceSx2N7dyGDRvi+OOPjyzL4rrrrksdpyQOPfTQWLRoUbz88svx05/+NI4//vhYuHBh9OrVK3W0Fnvsscdi+vTp8fjjjxf+Cpp/dOKJJzb+9z777BP77rtvVFdXxwMPPBCHH354wmQfXkNDQ0REHHXUUXHuuedGRMTHPvaxeOihh2LGjBkxfPjwlPFK5mc/+1mMHz++LObB11xzTfzxj3+M22+/Pfr37x8PPvhgTJo0Kaqqqgp5FWVlZWXceuutceqpp0aPHj2ibdu2MWLEiBg9enShbmBdbufDEeU5pogtj2vdunUxduzY2HPPPeOiiy7atuFK5Gc/+1nssMMOsXz58lixYkUMGDAgdSQoHBXWZWDy5Mlxxx13xP333x99+/ZNHack2rdvH4MGDYr99tsvLr300hg6dGhMnz49dawP7bHHHouXXnopPvGJT0S7du2iXbt2UVdXF1dffXW0a9eu0JVBf6979+6xxx57xDPPPJM6ylbp06fPJl+ODBkypCzanUREPPfcc3HPPffEaaedljpKSZx//vmNVdb77LNPfOlLX4pzzz238FczVFdXR11dXbzxxhvxP//zP/HII4/Ehg0bYuDAgamjlUTv3r0j4m+Xif+91atXN/6M/Hlvsfq5556L+fPnl0V1dURE586dY9CgQfHpT386rr/++mjXrl1cf/31qWN9KH/4wx/ipZdein79+jXOOZ577rn4xje+UXYnzAMHDoxddtml0POOXXbZJdq1a1fW844//OEPUV9fXxbzjrfeeiu+853vxFVXXRXjxo2LfffdNyZPnhwnnHBC/PCHP0wd70Pbb7/9YtGiRbFmzZp48cUXY968efHKK68UZs7xQefDvXv3jnfffTfWrFnT5PFFmGuU4zl+xJbH9frrr8eoUaOiS5cuMXv27KisrEyQcus89NBD8aMf/SjuuOOO+NSnPhWnnnpqob78gbywYF1gWZbF5MmTY/bs2XHffffFbrvtljpSq2loaGjsr1ZEhx9+eCxevDgWLVrU+Gf//feP8ePHx6JFi6Jt27apI5bEG2+8EcuWLYs+ffqkjrJVDj744Kivr2+y7amnnor+/fsnSlRaN9xwQ/Tq1SvGjh2bOkpJrF+/Ptq0aXo4a9u2bWPVWtF17tw5+vTpE6+99lrcddddcdRRR6WOVBK77bZb9O7dO+69997GbevWrYuFCxeWxT0LytF7i9VPP/103HPPPbHzzjunjtRqijzv+NKXvhR//vOfm8w5qqqq4vzzz4+77rordbySWrFiRbzyyiuFnne0b98+PvnJT5b1vOP666+P/fbbryx6uG7YsCE2bNhQtvOObt26Rc+ePePpp5+OP/3pT7mfc2zpfHi//faLysrKJnON+vr6eP7553M71yjXc/zmjGvdunUxcuTIaN++fdx+++2FvCJj/fr1MXHixDjzzDPj0EMPjeuvvz4eeeSRmDFjRupoUDjbTUuQN954o0n1xfLly2PRokXRo0eP6NevX8JkH96kSZPi5ptvjt/97nfRpUuXxj5c3bp1i06dOiVO9+FdcMEFMXr06OjXr1+8/vrrcfPNN8cDDzxQ6JOsLl26bNKfq3PnzrHzzjsXuh/ZeeedF+PGjYv+/fvHypUrY8qUKdG2bds46aSTUkfbKueee24cdNBBcckll8Txxx8fjzzySMycOTNmzpyZOtpWa2hoiBtuuCFOPvnkwt3A5IOMGzcufvCDH0S/fv1ir732iieeeCKuuuqqOOWUU1JH2yp33XVXZFkWgwcPjmeeeSbOP//8qKmpiS9/+cupozXblo69tbW18a//+q+x++67x2677RYXXnhhVFVVxdFHH50udDNsaVyvvvpqPP/887Fy5cqIiMaFqN69e+e6omtz4+rTp0984QtfiMcffzzuuOOO2LhxY+O8o0ePHtG+fftUsbdoc+Paeeed4wc/+EEceeSR0adPn3j55Zfj2muvjRdeeCGOO+64hKk3b0v/Bv/xy4TKysro3bt3DB48eFtHbZHNjatHjx7x/e9/P4499tjo3bt3LFu2LL75zW/GoEGD4ogjjkiYesu29H6df/75ccIJJ8RnPvOZOPTQQ2PevHkxZ86ceOCBB9KFbobmnF+tW7cubrnllrjyyitTxWyxLY1r+PDhcf7550enTp2if//+UVdXF7NmzYqrrroqYerN29KYbrnllujZs2f069cvFi9eHOecc04cffTRub+R5JbOh7t16xannnpqfP3rX48ePXpE165d4+yzz44DDzwwPv3pTydO//6ac46/atWqWLVqVeN7unjx4ujSpUv069cvtzdn3NK43lusXr9+ffziF7+IdevWxbp16yIiomfPnoUp8Lrgggsiy7K47LLLIiJiwIAB8cMf/jDOO++8GD16dNld6QStKttO3H///VlEbPLn5JNPTh3tQ3u/8UREdsMNN6SOtlVOOeWUrH///ln79u2znj17Zocffnh29913p45VcsOHD8/OOeec1DG2ygknnJD16dMna9++ffaRj3wkO+GEE7JnnnkmdaySmDNnTrb33ntnHTp0yGpqarKZM2emjlQSd911VxYRWX19feooJbNu3brsnHPOyfr165d17NgxGzhwYPbd7343e+edd1JH2yr/8R//kQ0cODBr37591rt372zSpEnZmjVrUsdqkS0dexsaGrILL7ww23XXXbMOHTpkhx9+eCH+bW5pXDfccMP7/nzKlClJc2/J5sa1fPnyD5x33H///amjb9bmxvXWW29lxxxzTFZVVZW1b98+69OnT3bkkUdmjzzySOrYm9XSeW3//v2zH/3oR9s044exuXGtX78+GzlyZNazZ8+ssrIy69+/f3b66adnq1atSh17i5rzfl1//fXZoEGDso4dO2ZDhw7NbrvttnSBm6k54/rJT36SderUqVDHry2N68UXX8wmTpyYVVVVZR07dswGDx6cXXnllVlDQ0Pa4JuxpTFNnz4969u3b1ZZWZn169cv+z//5/8UYh7VnPPht956KzvrrLOynXbaKdthhx2yY445JnvxxRfThd6C5oxpypQphVsH2NK4PujfaERky5cvT5q9uR544IGsbdu22R/+8IdNfjZy5MjssMMOy/V+AvKmIss00wEAAAAAID09rAEAAAAAyAUL1gAAAAAA5IIFawAAAAAAcsGCNQAAAAAAuWDBGgAAAACAXLBgDQAAAABALliwBgAAAAAgFyxYAwAAAACQCxasAQASqaioiMmTJ6eOAQAAkBsWrAEAWsGyZcviK1/5SgwcODA6duwYXbt2jYMPPjimT58eb731Vup4AAAAudQudQAAgHIzd+7cOO6446JDhw4xYcKE2HvvvePdd9+NBQsWxPnnnx9/+ctfYubMmaljAgAA5I4FawCAElq+fHmceOKJ0b9//7jvvvuiT58+jT+bNGlSPPPMMzF37tytfp0333wzOnfuvNXPAwAAkCdaggAAlNDll18eb7zxRlx//fVNFqvfM2jQoDjnnHOabLvtttti7733jg4dOsRee+0V8+bNa/Lziy66KCoqKuK///u/45//+Z9jp512imHDhkVExF//+te4+OKLo7q6Ojp06BADBgyI73znO/HOO+80eY4BAwbE5z73uXjggQdi//33j06dOsU+++wTDzzwQERE3HrrrbHPPvtEx44dY7/99osnnnhik+z33XdfHHLIIdG5c+fo3r17HHXUUbFkyZImj3n99dejtrY2BgwYEB06dIhevXrFZz/72Xj88cebPO6WW26J/fbbLzp16hS77LJLfPGLX4wXXnihyWMmTpwYO+64Yzz//PPxuc99Lnbcccf4yEc+Etdee21ERCxevDgOO+yw6Ny5c/Tv3z9uvvnmTTKvWbMmamtr46Mf/Wh06NAhBg0aFFOnTo2GhoZNHgsAAKRXkWVZljoEAEC56Nu3b3To0CGWLVu2xcdWVFTE0KFD46WXXoqzzjorunTpEldffXWsWrUqnn/++dh5550j4m8L1t///vdjzz33jN133z2OOOKIyLIszjrrrJg4cWLcdNNN8YUvfCEOPfTQWLhwYcyaNSuOPvromD17duNrDRgwIDp27Bjr1q2Lr3zlK9GtW7f44Q9/GGvXro0ZM2bEd77znTjrrLMiIuLSSy+Nnj17Rn19fbRp87f6hnvuuSdGjx4dAwcOjNNOOy3eeuutuOaaa2Ljxo3x+OOPx4ABAyIiYvz48fHb3/42Jk+eHHvuuWe88sorsWDBgjjhhBNi/PjxERFx4403xpe//OX45Cc/Gf/8z/8cq1evjunTp8euu+4aTzzxRHTv3j0i/rZg/R//8R8xcODA+MxnPhP77LNP/PKXv4yHHnoobrjhhvjud78b48ePj379+sWMGTNi6dKl8fTTT8duu+0WERHr16+PAw88MF544YX4yle+Ev369YuHHnoofv7zn8fXvva1mDZtWinecgAAoJQyAABKYu3atVlEZEcddVSzHh8RWfv27bNnnnmmcdt//dd/ZRGRXXPNNY3bpkyZkkVEdtJJJzX5/UWLFmURkZ122mlNtp933nlZRGT33Xdf47b+/ftnEZE99NBDjdvuuuuuLCKyTp06Zc8991zj9p/85CdZRGT3339/47aPfexjWa9evbJXXnmlSdY2bdpkEyZMaNzWrVu3bNKkSR845nfffTfr1atXtvfee2dvvfVW4/Y77rgji4jse9/7XuO2k08+OYuI7JJLLmnc9tprr2WdOnXKKioqsl//+teN25cuXZpFRDZlypTGbRdffHHWuXPn7KmnnmqS4dvf/nbWtm3b7Pnnn//AnAAAQBpaggAAlMi6desiIqJLly7N/p0RI0ZEdXV149/33Xff6Nq1azz77LObPParX/1qk7/feeedERHx9a9/vcn2b3zjGxERm/TK3nPPPePAAw9s/PsBBxwQERGHHXZY9OvXb5Pt72V48cUXY9GiRTFx4sTo0aNHk6yf/exnG3NERHTv3j0WLlwYK1eufN/x/ulPf2qsKO/YsWPj9rFjx0ZNTc379vc+7bTTmjz/4MGDo3PnznH88cc3bh88eHB07969yf+3W265JQ455JDYaaed4uWXX278M2LEiNi4cWM8+OCD75sRAABIx4I1AECJdO3aNSL+1se5uf5+ofg9O+20U7z22mubbH+v1cV7nnvuuWjTpk0MGjSoyfbevXtH9+7d47nnntvsa3Xr1i0iIj760Y++7/b3Mrz3PIMHD94k05AhQ+Lll1+ON998MyL+1sP7ySefjI9+9KPxqU99Ki666KImi8ibe66amppNMnfs2DF69uy5Sb6+fftGRUXFJtv//v/b008/HfPmzYuePXs2+TNixIiIiHjppZc2yQAAAKTVLnUAAIBy0bVr16iqqoonn3yy2b/Ttm3b992evc9tRjp16vS+j/3HhduWvlZLMmzJ8ccfH4ccckjMnj077r777rjiiiti6tSpceutt8bo0aNb/Hxbk7mhoSE++9nPxje/+c33fewee+zR4jwAAEDrsmANAFBCn/vc52LmzJnx8MMPN2m/0Rr69+8fDQ0N8fTTT8eQIUMat69evTrWrFkT/fv3L9nrRETU19dv8rOlS5fGLrvsEp07d27c1qdPnzjrrLPirLPOipdeeik+8YlPxA9+8IMYPXp0k+c67LDDmjxXfX19yTJHRFRXV8cbb7zRWFENAADkn5YgAAAl9M1vfjM6d+4cp512WqxevXqTny9btiymT59ektcaM2ZMRERMmzatyfarrroqIv7WF7oU+vTpEx/72MfipptuijVr1jRuf/LJJ+Puu+9uzLFx48ZYu3Ztk9/t1atXVFVVxTvvvBMREfvvv3/06tUrZsyY0bgtIuL3v/99LFmypGSZI/5W7f3www/HXXfdtcnP1qxZE3/9619L9loAAEBpqLAGACih6urquPnmm+OEE06IIUOGxIQJE2LvvfeOd999Nx566KG45ZZbYuLEiSV5raFDh8bJJ58cM2fOjDVr1sTw4cPjkUceiZtuuimOPvroOPTQQ0vyOhERV1xxRYwePToOPPDAOPXUU+Ott96Ka665Jrp16xYXXXRRRPytd3ffvn3jC1/4QgwdOjR23HHHuOeee+LRRx+NK6+8MiIiKisrY+rUqfHlL385hg8fHieddFKsXr06pk+fHgMGDIhzzz23ZJnPP//8uP322+Nzn/tcTJw4Mfbbb7948803Y/HixfHb3/42/u///b+xyy67lOz1AACArWfBGgCgxI488sj485//HFdccUX87ne/i+uuuy46dOgQ++67b1x55ZVx+umnl+y1/v3f/z0GDhwYN954Y8yePTt69+4dF1xwQUyZMqVkrxERMWLEiJg3b15MmTIlvve970VlZWUMHz48pk6d2ngzyB122CHOOuusuPvuu+PWW2+NhoaGGDRoUPz4xz+OM888s/G5Jk6cGDvssENcdtll8a1vfSs6d+4cxxxzTEydOjW6d+9essw77LBD1NXVxSWXXBK33HJLzJo1K7p27Rp77LFHfP/732+8uSQAAJAfFdmHuZsOAAAAAACUmB7WAAAAAADkggVrAAAAAABywYI1AAAAAAC5YMEaAAAAAIBcsGANAAAAAEAuWLAGAAAAACAXLFgDAAAAAJALFqwBAAAAAMgFC9YAAAAAAOSCBWsAAAAAAHLBgjUAAAAAALlgwRoAAAAAgFz4//jLabxdHVh4AAAAAElFTkSuQmCC\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x1200 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["embryoid_annot_with_calls.obs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"5jmLXmZh-UHJ","executionInfo":{"status":"ok","timestamp":1746660716362,"user_tz":240,"elapsed":56,"user":{"displayName":"Elizabeth Zuerblis","userId":"16545116572669519017"}},"outputId":"e1a71f90-4f19-4c1b-d6e1-570f23980689"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    n_genes_by_counts  total_counts  total_counts_mt  \\\n","ACTGAACTCATGTGGT-1               2059        6727.0            222.0   \n","CCCAGTTTCTCAAGTG-1               2446        7770.0            220.0   \n","GTCACAAGTCTAGTCA-1               3128       20575.0           1105.0   \n","CGTTCTGGTCAAGCGA-1               2486        9220.0            175.0   \n","TGATTTCGTCGAACAG-1               3384       15668.0            378.0   \n","...                               ...           ...              ...   \n","TCGGTAAGTACACCGC-1               1914        7044.0              7.0   \n","AGTTGGTTCCAATGGT-1               2947       12609.0            453.0   \n","ACCTTTAGTACAGTGG-1               2816       10500.0             15.0   \n","AGCAGCCCACCCATTC-1               3119       19040.0            428.0   \n","CCGGTAGCAACGATGG-1               4455       23547.0            928.0   \n","\n","                    pct_counts_mt  n_genes  n_counts leiden cell_type  \\\n","ACTGAACTCATGTGGT-1       3.300134     2059    6727.0      0  Ectoderm   \n","CCCAGTTTCTCAAGTG-1       2.831403     2446    7770.0      3  Ectoderm   \n","GTCACAAGTCTAGTCA-1       5.370595     3128   20575.0      1      iPSC   \n","CGTTCTGGTCAAGCGA-1       1.898048     2486    9220.0      3  Ectoderm   \n","TGATTTCGTCGAACAG-1       2.412560     3384   15668.0      1      iPSC   \n","...                           ...      ...       ...    ...       ...   \n","TCGGTAAGTACACCGC-1       0.099375     1914    7044.0      5      iPSC   \n","AGTTGGTTCCAATGGT-1       3.592672     2947   12609.0      0  Ectoderm   \n","ACCTTTAGTACAGTGG-1       0.142857     2816   10500.0      5      iPSC   \n","AGCAGCCCACCCATTC-1       2.247899     3119   19040.0      0  Ectoderm   \n","CCGGTAGCAACGATGG-1       3.941054     4455   23547.0      1      iPSC   \n","\n","                                                          cnv_regions  \n","ACTGAACTCATGTGGT-1  6:138088505-166342576 (loss), 6:497258-1705846...  \n","CCCAGTTTCTCAAGTG-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","GTCACAAGTCTAGTCA-1  1:9588911-20196050 (loss), 1:20482391-27604431...  \n","CGTTCTGGTCAAGCGA-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","TGATTTCGTCGAACAG-1  5:291630-181261150 (gain), 6:21665003-34426071...  \n","...                                                               ...  \n","TCGGTAAGTACACCGC-1  1:9588911-20196050 (loss), 1:20482391-27604431...  \n","AGTTGGTTCCAATGGT-1                                                     \n","ACCTTTAGTACAGTGG-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","AGCAGCCCACCCATTC-1  1:20482391-27604431 (loss), 1:27666064-3630535...  \n","CCGGTAGCAACGATGG-1  1:9588911-20196050 (gain), 1:20482391-27604431...  \n","\n","[500 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-ec450e88-cb11-4e81-a589-87415ad99edf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>n_genes_by_counts</th>\n","      <th>total_counts</th>\n","      <th>total_counts_mt</th>\n","      <th>pct_counts_mt</th>\n","      <th>n_genes</th>\n","      <th>n_counts</th>\n","      <th>leiden</th>\n","      <th>cell_type</th>\n","      <th>cnv_regions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>ACTGAACTCATGTGGT-1</th>\n","      <td>2059</td>\n","      <td>6727.0</td>\n","      <td>222.0</td>\n","      <td>3.300134</td>\n","      <td>2059</td>\n","      <td>6727.0</td>\n","      <td>0</td>\n","      <td>Ectoderm</td>\n","      <td>6:138088505-166342576 (loss), 6:497258-1705846...</td>\n","    </tr>\n","    <tr>\n","      <th>CCCAGTTTCTCAAGTG-1</th>\n","      <td>2446</td>\n","      <td>7770.0</td>\n","      <td>220.0</td>\n","      <td>2.831403</td>\n","      <td>2446</td>\n","      <td>7770.0</td>\n","      <td>3</td>\n","      <td>Ectoderm</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>GTCACAAGTCTAGTCA-1</th>\n","      <td>3128</td>\n","      <td>20575.0</td>\n","      <td>1105.0</td>\n","      <td>5.370595</td>\n","      <td>3128</td>\n","      <td>20575.0</td>\n","      <td>1</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (loss), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>CGTTCTGGTCAAGCGA-1</th>\n","      <td>2486</td>\n","      <td>9220.0</td>\n","      <td>175.0</td>\n","      <td>1.898048</td>\n","      <td>2486</td>\n","      <td>9220.0</td>\n","      <td>3</td>\n","      <td>Ectoderm</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>TGATTTCGTCGAACAG-1</th>\n","      <td>3384</td>\n","      <td>15668.0</td>\n","      <td>378.0</td>\n","      <td>2.412560</td>\n","      <td>3384</td>\n","      <td>15668.0</td>\n","      <td>1</td>\n","      <td>iPSC</td>\n","      <td>5:291630-181261150 (gain), 6:21665003-34426071...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>TCGGTAAGTACACCGC-1</th>\n","      <td>1914</td>\n","      <td>7044.0</td>\n","      <td>7.0</td>\n","      <td>0.099375</td>\n","      <td>1914</td>\n","      <td>7044.0</td>\n","      <td>5</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (loss), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>AGTTGGTTCCAATGGT-1</th>\n","      <td>2947</td>\n","      <td>12609.0</td>\n","      <td>453.0</td>\n","      <td>3.592672</td>\n","      <td>2947</td>\n","      <td>12609.0</td>\n","      <td>0</td>\n","      <td>Ectoderm</td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>ACCTTTAGTACAGTGG-1</th>\n","      <td>2816</td>\n","      <td>10500.0</td>\n","      <td>15.0</td>\n","      <td>0.142857</td>\n","      <td>2816</td>\n","      <td>10500.0</td>\n","      <td>5</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","    <tr>\n","      <th>AGCAGCCCACCCATTC-1</th>\n","      <td>3119</td>\n","      <td>19040.0</td>\n","      <td>428.0</td>\n","      <td>2.247899</td>\n","      <td>3119</td>\n","      <td>19040.0</td>\n","      <td>0</td>\n","      <td>Ectoderm</td>\n","      <td>1:20482391-27604431 (loss), 1:27666064-3630535...</td>\n","    </tr>\n","    <tr>\n","      <th>CCGGTAGCAACGATGG-1</th>\n","      <td>4455</td>\n","      <td>23547.0</td>\n","      <td>928.0</td>\n","      <td>3.941054</td>\n","      <td>4455</td>\n","      <td>23547.0</td>\n","      <td>1</td>\n","      <td>iPSC</td>\n","      <td>1:9588911-20196050 (gain), 1:20482391-27604431...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>500 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec450e88-cb11-4e81-a589-87415ad99edf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ec450e88-cb11-4e81-a589-87415ad99edf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ec450e88-cb11-4e81-a589-87415ad99edf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-7f5e50b3-657d-46af-b5b5-19249160b484\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f5e50b3-657d-46af-b5b5-19249160b484')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-7f5e50b3-657d-46af-b5b5-19249160b484 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"embryoid_annot_with_calls\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"n_genes_by_counts\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 454,\n        \"samples\": [\n          1145,\n          3934,\n          1493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_counts\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 493,\n        \"samples\": [\n          17875.0,\n          19005.0,\n          6378.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_counts_mt\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 379,\n        \"samples\": [\n          1350.0,\n          1417.0,\n          194.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pct_counts_mt\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 500,\n        \"samples\": [\n          2.8440284729003906,\n          7.4243621826171875,\n          6.653074264526367\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_genes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 854,\n        \"min\": 1104,\n        \"max\": 5003,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          1145,\n          3934,\n          1493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_counts\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 493,\n        \"samples\": [\n          17875.0,\n          19005.0,\n          6378.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"leiden\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"3\",\n          \"5\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cell_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"iPSC\",\n          \"Ectoderm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnv_regions\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 356,\n        \"samples\": [\n          \"1:9588911-20196050 (gain), 1:20482391-27604431 (gain), 1:27666064-36305357 (gain), 1:36306368-44767767 (gain), 1:44775251-55064852 (gain), 1:55066359-87169198 (gain), 1:87328880-110346681 (gain), 1:110362851-147773362 (gain), 1:147928393-153986358 (gain), 1:153990762-160215376 (gain), 1:160215715-173824883 (gain), 1:173824653-202006147 (gain), 1:202007945-212992037 (gain), 11:66510606-74493724 (gain), 11:74493851-103479863 (gain), 11:103907189-119093834 (gain), 11:66767-134412242 (gain), 12:1970772-9845007 (gain), 12:9898673-31591136 (gain), 12:31671142-51271362 (gain), 12:51281038-57028883 (gain), 12:57055643-80937934 (gain), 12:80936414-108731526 (gain), 12:108778191-120498493 (gain), 12:120503279-133063304 (gain), 12:19633659-133214832 (gain), 13:39655627-75482169 (gain), 13:75525214-113864076 (gain), 13:20256558-114346533 (gain), 14:26443090-54902826 (gain), 14:54938949-70535015 (gain), 14:70581257-91510554 (gain), 14:91779746-105021083 (gain), 14:22773063-105530198 (gain), 15:41493393-52791078 (gain), 15:53513741-69448427 (gain), 15:69452814-80755621 (gain), 15:81159575-100651701 (gain), 15:22845-101652391 (gain), 16:2475051-15153671 (gain), 16:15037854-29454351 (gain), 16:29454533-50649249 (gain), 16:50693588-67416833 (gain), 16:67430652-77435034 (gain), 16:142789-90019890 (gain), 17:212389-6651634 (gain), 17:6651762-13601929 (gain), 17:14069490-28724359 (gain), 17:28724348-39402523 (gain), 17:39404285-43610338 (gain), 17:43527844-49789180 (gain), 17:49788624-63776351 (gain), 17:63773603-75896951 (gain), 17:75898644-82034204 (gain), 17:158383-83095122 (gain), 18:23689453-58986480 (gain), 18:281040-80247514 (gain), 19:1753506-5784746 (gain), 19:5784832-10339661 (gain), 19:10350528-14085875 (gain), 19:14087851-18929189 (gain), 19:18929201-35267964 (gain), 19:35268962-38852347 (gain), 19:38867830-43639850 (gain), 19:43646095-48004854 (gain), 19:48047843-50725708 (gain), 19:50819146-55180289 (gain), 19:55181247-58558954 (gain), 19:270863-58605223 (gain), 20:17969018-35284985 (gain), 20:35302566-45972203 (gain), 20:46008908-62861822 (gain), 20:14216130-64100643 (gain), 21:16637040-46665685 (gain), 22:18906028-29259597 (gain), 22:29259872-38214778 (gain), 22:38200767-45601135 (gain), 22:276322-50783667 (gain)\",\n          \"1:9588911-20196050 (gain), 1:20482391-27604431 (gain), 1:27666064-36305357 (gain), 1:36306368-44767767 (gain), 1:44775251-55064852 (gain), 1:55066359-87169198 (gain), 6:497258-170584692 (gain), 7:16646131-43807342 (gain), 7:43866558-74851605 (gain), 7:75092573-99394816 (gain), 7:99392048-107202522 (gain), 7:107201372-134459284 (gain), 7:134527567-151520120 (gain), 7:232137-159144867 (gain), 8:22219703-40897833 (gain), 8:41261962-73048123 (gain), 8:73064543-100953388 (gain), 8:101177878-142403182 (gain), 8:214854-145066685 (gain), 9:5334930-35610041 (gain), 9:35609982-86100173 (gain), 9:86220265-109498313 (gain), 9:110243810-127445372 (gain), 9:127447674-133376166 (gain), 9:46888-141143444 (gain), 10:4786629-28821672 (gain), 10:29409618-68343193 (gain), 10:68341107-84219621 (gain), 10:84230666-99394330 (gain), 10:99396870-114046904 (gain), 10:114120862-133424625 (gain), 10:126990-133561220 (gain), 11:6621330-26997087 (gain), 11:27040725-47767443 (gain), 11:47778087-63976543 (gain), 11:63985853-66509657 (gain), 11:66510606-74493724 (gain), 11:74493851-103479863 (gain), 11:103907189-119093834 (gain), 11:66767-134412242 (gain), 12:1970772-9845007 (gain), 12:9898673-31591136 (gain), 12:31671142-51271362 (gain), 12:51281038-57028883 (gain), 12:57055643-80937934 (gain), 12:80936414-108731526 (gain), 12:108778191-120498493 (gain), 12:120503279-133063304 (gain), 12:19633659-133214832 (gain), 13:39655627-75482169 (gain), 13:75525214-113864076 (gain), 13:20256558-114346533 (gain), 14:26443090-54902826 (gain), 14:54938949-70535015 (gain), 14:70581257-91510554 (gain), 14:91779746-105021083 (gain), 14:22773063-105530198 (gain), 15:41493393-52791078 (gain), 15:53513741-69448427 (gain), 15:69452814-80755621 (gain), 15:81159575-100651701 (gain), 15:22845-101652391 (gain), 16:2475051-15153671 (gain), 16:15037854-29454351 (gain), 16:29454533-50649249 (gain), 16:50693588-67416833 (gain), 16:67430652-77435034 (gain), 16:142789-90019890 (gain), 17:212389-6651634 (gain), 17:6651762-13601929 (gain), 17:14069490-28724359 (gain), 17:28724348-39402523 (gain), 17:39404285-43610338 (gain), 17:43527844-49789180 (gain), 17:49788624-63776351 (gain), 17:63773603-75896951 (gain), 17:75898644-82034204 (gain), 17:158383-83095122 (gain), 18:23689453-58986480 (gain), 18:281040-80247514 (gain), 19:1753506-5784746 (gain), 19:5784832-10339661 (gain), 19:10350528-14085875 (gain), 19:14087851-18929189 (gain), 19:18929201-35267964 (gain), 19:35268962-38852347 (gain), 19:38867830-43639850 (gain), 19:43646095-48004854 (gain), 19:48047843-50725708 (gain), 19:50819146-55180289 (gain), 19:55181247-58558954 (gain), 19:270863-58605223 (gain), 20:17969018-35284985 (gain), 20:35302566-45972203 (gain), 20:46008908-62861822 (gain), 20:14216130-64100643 (gain), 21:16637040-46665685 (gain), 22:18906028-29259597 (gain), 22:29259872-38214778 (gain), 22:38200767-45601135 (gain), 22:276322-50783667 (gain)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["# **Comparison to Known CNVs**"],"metadata":{"id":"SepUkrUCbJr3"}},{"cell_type":"markdown","source":["- **Known CNAs**\n","  - **Amp/Del Chr Locus Start End**\n","  - Amp\t20\tq11.21\t29.309999\t30.780001\n","  - Del\t6\tp21.32\t32.59\t32.630001\n","  - Del\t7\tq34\t141.210007\t141.259995\n","  - Del\t22\tq11.23\t22.67\t22.710001\n","  - Amp\t1\tq21.3\t149.380005\t149.399994\n","  - Del\t4\tq13.2\t69.270004\t69.310005\n","  - Del\t6\tp21.32\t32.59\t32.630001\n","  - Del\t19\tp12\t20.42\t20.49\n","  - Del\t22\tq11.23\t22.67\t22.710001\n","\n","\n","- **Reference**\n","  - Wu, Hao et al. “Copy number variant analysis of human embryonic stem cells.” Stem cells (Dayton, Ohio) vol. 26,6 (2008): 1484-9. doi:10.1634/stemcells.2007-0993\n","  - https://pmc.ncbi.nlm.nih.gov/articles/PMC3901366/\n"],"metadata":{"id":"yINYGrQvl1k1"}},{"cell_type":"code","source":["def compare_with_known_cnas(\n","    adata,\n","    known_cnas,\n","    cna_col='cnv_regions',\n","    overlap_threshold=0.75,\n","    return_dataframes=True  # Added parameter\n","):\n","    \"\"\"\n","    Compare detected CNAs in an AnnData object with a list of known CNAs.\n","\n","    Parameters\n","    ----------\n","    adata : AnnData\n","        AnnData object with CNA calls\n","    known_cnas : list of dict\n","        List of known CNAs with keys 'type', 'chr', 'start', 'end'\n","    cna_col : str, default='cnv_regions'\n","        Column in adata.obs containing CNA region annotations\n","    overlap_threshold : float, default=0.3\n","        Minimum fraction of overlap required to consider a match\n","    return_dataframes : bool, default=True\n","        Whether to return R-compatible dataframes for the results\n","\n","    Returns\n","    -------\n","    dict\n","        Dictionary containing summary statistics, match information, and (if return_dataframes=True)\n","        pandas DataFrames formatted for export to R\n","    \"\"\"\n","    import pandas as pd\n","    import numpy as np\n","    import re\n","\n","    if cna_col not in adata.obs.columns:\n","        raise ValueError(f\"Column '{cna_col}' not found in adata.obs\")\n","\n","    # Process known CNAs\n","    known_cnas_df = pd.DataFrame(known_cnas)\n","\n","    # Extract all detected CNAs\n","    detected_cnas = []\n","\n","    for cell_id, cna_str in adata.obs[cna_col].items():\n","        if pd.isna(cna_str) or cna_str == \"\":\n","            continue\n","\n","        # Split into individual CNA events\n","        cna_events = cna_str.split(\", \")\n","\n","        for event in cna_events:\n","            # Parse the event string\n","            match = re.match(r\"([^:]+):(\\d+)-(\\d+)\\s+\\(([a-z]+)\\)\", event)\n","            if not match:\n","                continue\n","\n","            chrom = match.group(1)\n","            start = int(match.group(2))\n","            end = int(match.group(3))\n","            state = match.group(4)\n","\n","            # Convert state to type (Amp/Del)\n","            cna_type = \"Amp\" if state == \"gain\" else \"Del\" if state == \"loss\" else \"Neutral\"\n","\n","            detected_cnas.append({\n","                'cell_id': cell_id,\n","                'chr': chrom,\n","                'start': start,\n","                'end': end,\n","                'type': cna_type,\n","                'event': event\n","            })\n","\n","    if not detected_cnas:\n","        print(\"No CNAs detected in the dataset\")\n","        return {'matches': []}\n","\n","    # Convert to DataFrame for easier processing\n","    detected_df = pd.DataFrame(detected_cnas)\n","\n","    # Find matches between known and detected CNAs\n","    matches = []\n","\n","    for _, known in known_cnas_df.iterrows():\n","        k_chr = str(known['chr'])\n","        k_start = float(known['start'])\n","        k_end = float(known['end'])\n","        k_type = known['type']\n","\n","        # Find matching chromosome and type in detected CNAs\n","        matching_events = detected_df[(detected_df['chr'] == k_chr) &\n","                                      (detected_df['type'] == k_type)]\n","\n","        for _, detected in matching_events.iterrows():\n","            d_start = detected['start']\n","            d_end = detected['end']\n","\n","            # Calculate overlap\n","            overlap_start = max(k_start, d_start)\n","            overlap_end = min(k_end, d_end)\n","\n","            if overlap_end > overlap_start:  # There is overlap\n","                overlap_length = overlap_end - overlap_start\n","                k_length = k_end - k_start\n","                d_length = d_end - d_start\n","\n","                # Calculate overlap fractions\n","                k_overlap_frac = overlap_length / k_length\n","                d_overlap_frac = overlap_length / d_length\n","\n","                # Consider a match if overlap is sufficient\n","                if k_overlap_frac >= overlap_threshold or d_overlap_frac >= overlap_threshold:\n","                    matches.append({\n","                        'cell_id': detected['cell_id'],\n","                        'known_chr': k_chr,\n","                        'known_start': k_start,\n","                        'known_end': k_end,\n","                        'known_type': k_type,\n","                        'detected_chr': detected['chr'],\n","                        'detected_start': d_start,\n","                        'detected_end': d_end,\n","                        'detected_type': detected['type'],\n","                        'overlap_fraction': max(k_overlap_frac, d_overlap_frac),\n","                        'detected_event': detected['event']\n","                    })\n","\n","    # Summarize results\n","    results = {}\n","\n","    if matches:\n","        matches_df = pd.DataFrame(matches)\n","        results['matches'] = matches\n","\n","        # Count unique known CNAs that were matched\n","        unique_known_matches = matches_df[['known_chr', 'known_start', 'known_end', 'known_type']].drop_duplicates()\n","\n","        # Count cells with each known CNA\n","        known_cna_cell_counts = {}\n","        for _, known in unique_known_matches.iterrows():\n","            key = f\"{known['known_type']} {known['known_chr']} {known['known_start']}-{known['known_end']}\"\n","            cells = matches_df[\n","                (matches_df['known_chr'] == known['known_chr']) &\n","                (matches_df['known_start'] == known['known_start']) &\n","                (matches_df['known_end'] == known['known_end']) &\n","                (matches_df['known_type'] == known['known_type'])\n","            ]['cell_id'].unique()\n","            known_cna_cell_counts[key] = len(cells)\n","\n","        # Print summary\n","        print(f\"CNA Match Summary:\")\n","        print(f\"  Total known CNAs: {len(known_cnas_df)}\")\n","        print(f\"  Known CNAs detected: {len(unique_known_matches)} ({len(unique_known_matches)/len(known_cnas_df)*100:.1f}%)\")\n","        print(f\"  Cells with at least one known CNA: {matches_df['cell_id'].nunique()}\")\n","\n","        print(\"\\nDetailed matches:\")\n","        for cna, cell_count in sorted(known_cna_cell_counts.items(), key=lambda x: x[1], reverse=True):\n","            print(f\"  {cna}: found in {cell_count} cells\")\n","\n","        results.update({\n","            'matched_known_count': len(unique_known_matches),\n","            'total_known_count': len(known_cnas_df),\n","            'cells_with_matches': matches_df['cell_id'].nunique(),\n","            'known_cna_cell_counts': known_cna_cell_counts\n","        })\n","\n","        # Create R-compatible dataframes if requested\n","        if return_dataframes:\n","            # 1. CNA Match Summary by Region dataframe\n","            cna_by_region_data = []\n","            for key, count in known_cna_cell_counts.items():\n","                parts = key.split()\n","                cna_type = parts[0]\n","                chrom = parts[1]\n","                pos = parts[2].split('-')\n","                start = float(pos[0])\n","                end = float(pos[1])\n","\n","                # Calculate percentage of cells with this CNA\n","                percentage = (count / matches_df['cell_id'].nunique()) * 100\n","\n","                cna_by_region_data.append({\n","                    'Type': cna_type,\n","                    'Chromosome': chrom,\n","                    'Start_Position': start,\n","                    'End_Position': end,\n","                    'Cells_Detected': count,\n","                    'Percentage of Cells with CNA': round(percentage, 1)\n","                })\n","\n","            # Create sorted dataframe\n","            results['cna_by_region_df'] = pd.DataFrame(cna_by_region_data).sort_values(\n","                by='Cells_Detected', ascending=False\n","            ).reset_index(drop=True)\n","\n","            # 2. CNA Match Summary Overall dataframe\n","            results['cna_summary_df'] = pd.DataFrame({\n","                'Metric': [\n","                    'Total known CNAs',\n","                    'Known CNAs detected',\n","                    'Detection rate',\n","                    'Total cells with at least one known CNA',\n","                    'Total amplification (Amp) regions',\n","                    'Total deletion (Del) regions',\n","                    'Most common CNA',\n","                    'Least common CNA'\n","                ],\n","                'Value': [\n","                    str(len(known_cnas_df)),\n","                    str(len(unique_known_matches)),\n","                    f\"{(len(unique_known_matches)/len(known_cnas_df)*100):.1f}%\",\n","                    str(matches_df['cell_id'].nunique()),\n","                    str(len(results['cna_by_region_df'][results['cna_by_region_df']['Type'] == 'Amp'])),\n","                    str(len(results['cna_by_region_df'][results['cna_by_region_df']['Type'] == 'Del'])),\n","                    f\"{results['cna_by_region_df'].iloc[0]['Type']} on Chr {results['cna_by_region_df'].iloc[0]['Chromosome']} ({results['cna_by_region_df'].iloc[0]['Cells_Detected']} cells)\",\n","                    f\"{results['cna_by_region_df'].iloc[-1]['Type']} on Chr {results['cna_by_region_df'].iloc[-1]['Chromosome']} ({results['cna_by_region_df'].iloc[-1]['Cells_Detected']} cells)\"\n","                ]\n","            })\n","\n","            # 3. CNA Detection by Chromosome and Type\n","            amp_matches = matches_df[matches_df['known_type'] == 'Amp'].groupby('known_chr')['cell_id'].nunique().reset_index()\n","            amp_matches.columns = ['Chromosome', 'Cells_Detected']\n","            amp_matches['Type'] = 'Amp'\n","\n","            del_matches = matches_df[matches_df['known_type'] == 'Del'].groupby('known_chr')['cell_id'].nunique().reset_index()\n","            del_matches.columns = ['Chromosome', 'Cells_Detected']\n","            del_matches['Type'] = 'Del'\n","\n","            results['cna_by_chr_type_df'] = pd.concat([amp_matches, del_matches]).reset_index(drop=True)\n","\n","    else:\n","        print(\"No matches found between detected CNAs and known CNAs\")\n","        results['matches'] = []\n","\n","        if return_dataframes:\n","            # Create empty dataframes\n","            results['cna_by_region_df'] = pd.DataFrame(columns=[\n","                'Type', 'Chromosome', 'Start_Position', 'End_Position', 'Cells_Detected', 'Percentage'\n","            ])\n","            results['cna_summary_df'] = pd.DataFrame(columns=['Metric', 'Value'])\n","            results['cna_by_chr_type_df'] = pd.DataFrame(columns=['Type', 'Chromosome', 'Cells_Detected'])\n","\n","    return results"],"metadata":{"id":"A8PsCWtFN49_","executionInfo":{"status":"ok","timestamp":1746667100786,"user_tz":240,"elapsed":2,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# Define the known CNAs\n","known_cnas = [\n","    {'type': 'Amp', 'chr': '20', 'start': 29309999, 'end': 30780001},\n","    {'type': 'Del', 'chr': '6', 'start': 32590000, 'end': 32630001},\n","    {'type': 'Del', 'chr': '7', 'start': 141210007, 'end': 141259995},\n","    {'type': 'Del', 'chr': '22', 'start': 22670000, 'end': 22710001},\n","    {'type': 'Amp', 'chr': '1', 'start': 149380005, 'end': 149399994},\n","    {'type': 'Del', 'chr': '4', 'start': 69270004, 'end': 69310005},\n","    {'type': 'Del', 'chr': '19', 'start': 20420000, 'end': 20490000}\n","]\n","\n","# Run the comparison\n","results = compare_with_known_cnas(embryoid_annot_with_calls, known_cnas, cna_col='cnv_regions')\n","\n","# The dataframes are in the results dictionary\n","cna_by_region_df = results['cna_by_region_df']\n","cna_summary_df = results['cna_summary_df']\n","cna_by_chr_type_df = results['cna_by_chr_type_df']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AvqzReNWmZzG","executionInfo":{"status":"ok","timestamp":1746667108620,"user_tz":240,"elapsed":1056,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"1b9b0138-ad22-4ac7-d9a3-4a57ad22b564"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["CNA Match Summary:\n","  Total known CNAs: 7\n","  Known CNAs detected: 7 (100.0%)\n","  Cells with at least one known CNA: 429\n","\n","Detailed matches:\n","  Del 4 69270004.0-69310005.0: found in 234 cells\n","  Del 6 32590000.0-32630001.0: found in 226 cells\n","  Del 7 141210007.0-141259995.0: found in 201 cells\n","  Del 22 22670000.0-22710001.0: found in 187 cells\n","  Del 19 20420000.0-20490000.0: found in 178 cells\n","  Amp 20 29309999.0-30780001.0: found in 142 cells\n","  Amp 1 149380005.0-149399994.0: found in 128 cells\n"]}]},{"cell_type":"code","source":["cna_by_region_df"],"metadata":{"id":"kSW63BBHN46S","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1746667112403,"user_tz":240,"elapsed":6,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"71510f68-337b-458f-e0d4-14389a987735"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Type Chromosome  Start_Position  End_Position  Cells_Detected  \\\n","0  Del          4      69270004.0    69310005.0             234   \n","1  Del          6      32590000.0    32630001.0             226   \n","2  Del          7     141210007.0   141259995.0             201   \n","3  Del         22      22670000.0    22710001.0             187   \n","4  Del         19      20420000.0    20490000.0             178   \n","5  Amp         20      29309999.0    30780001.0             142   \n","6  Amp          1     149380005.0   149399994.0             128   \n","\n","   Percentage of Cells with CNA  \n","0                          54.5  \n","1                          52.7  \n","2                          46.9  \n","3                          43.6  \n","4                          41.5  \n","5                          33.1  \n","6                          29.8  "],"text/html":["\n","  <div id=\"df-fc8dcca6-1337-43a8-8bbd-7d8d99314bda\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Type</th>\n","      <th>Chromosome</th>\n","      <th>Start_Position</th>\n","      <th>End_Position</th>\n","      <th>Cells_Detected</th>\n","      <th>Percentage of Cells with CNA</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Del</td>\n","      <td>4</td>\n","      <td>69270004.0</td>\n","      <td>69310005.0</td>\n","      <td>234</td>\n","      <td>54.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Del</td>\n","      <td>6</td>\n","      <td>32590000.0</td>\n","      <td>32630001.0</td>\n","      <td>226</td>\n","      <td>52.7</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Del</td>\n","      <td>7</td>\n","      <td>141210007.0</td>\n","      <td>141259995.0</td>\n","      <td>201</td>\n","      <td>46.9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Del</td>\n","      <td>22</td>\n","      <td>22670000.0</td>\n","      <td>22710001.0</td>\n","      <td>187</td>\n","      <td>43.6</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Del</td>\n","      <td>19</td>\n","      <td>20420000.0</td>\n","      <td>20490000.0</td>\n","      <td>178</td>\n","      <td>41.5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Amp</td>\n","      <td>20</td>\n","      <td>29309999.0</td>\n","      <td>30780001.0</td>\n","      <td>142</td>\n","      <td>33.1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Amp</td>\n","      <td>1</td>\n","      <td>149380005.0</td>\n","      <td>149399994.0</td>\n","      <td>128</td>\n","      <td>29.8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc8dcca6-1337-43a8-8bbd-7d8d99314bda')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fc8dcca6-1337-43a8-8bbd-7d8d99314bda button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fc8dcca6-1337-43a8-8bbd-7d8d99314bda');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-7bdf47eb-8f44-47ca-9016-f5f919529518\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7bdf47eb-8f44-47ca-9016-f5f919529518')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-7bdf47eb-8f44-47ca-9016-f5f919529518 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_06b4e65e-a1fb-48dd-a3b7-1174cc0a8861\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cna_by_region_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_06b4e65e-a1fb-48dd-a3b7-1174cc0a8861 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cna_by_region_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cna_by_region_df","summary":"{\n  \"name\": \"cna_by_region_df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Amp\",\n          \"Del\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Chromosome\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"4\",\n          \"6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Start_Position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56326004.232685335,\n        \"min\": 20420000.0,\n        \"max\": 149380005.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          69270004.0,\n          32590000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"End_Position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56164601.29431225,\n        \"min\": 20490000.0,\n        \"max\": 149399994.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          69310005.0,\n          32630001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cells_Detected\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39,\n        \"min\": 128,\n        \"max\": 234,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          234,\n          226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percentage of Cells with CNA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.275749231707582,\n        \"min\": 29.8,\n        \"max\": 54.5,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          54.5,\n          52.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["cna_summary_df"],"metadata":{"id":"3GtwQ8vtbN_k","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1746666859417,"user_tz":240,"elapsed":2,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"0e609487-f8fa-4268-e1bc-a1fb464c3498"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                    Metric                     Value\n","0                         Total known CNAs                         7\n","1                      Known CNAs detected                         7\n","2                           Detection rate                    100.0%\n","3  Total cells with at least one known CNA                       429\n","4        Total amplification (Amp) regions                         2\n","5             Total deletion (Del) regions                         5\n","6                          Most common CNA  Del on Chr 4 (234 cells)\n","7                         Least common CNA  Amp on Chr 1 (128 cells)"],"text/html":["\n","  <div id=\"df-f5b0e984-db87-4159-9bd3-cfbadb746fe0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Metric</th>\n","      <th>Value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Total known CNAs</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Known CNAs detected</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Detection rate</td>\n","      <td>100.0%</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Total cells with at least one known CNA</td>\n","      <td>429</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Total amplification (Amp) regions</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Total deletion (Del) regions</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Most common CNA</td>\n","      <td>Del on Chr 4 (234 cells)</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Least common CNA</td>\n","      <td>Amp on Chr 1 (128 cells)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5b0e984-db87-4159-9bd3-cfbadb746fe0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f5b0e984-db87-4159-9bd3-cfbadb746fe0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f5b0e984-db87-4159-9bd3-cfbadb746fe0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c1d85b46-de03-4e03-b3c5-eb4e9d58a8cf\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1d85b46-de03-4e03-b3c5-eb4e9d58a8cf')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c1d85b46-de03-4e03-b3c5-eb4e9d58a8cf button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_183c9ed4-b276-4571-a741-8a3f5790d51d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cna_summary_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_183c9ed4-b276-4571-a741-8a3f5790d51d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cna_summary_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cna_summary_df","summary":"{\n  \"name\": \"cna_summary_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Metric\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Known CNAs detected\",\n          \"Total deletion (Del) regions\",\n          \"Total known CNAs\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"7\",\n          \"100.0%\",\n          \"Del on Chr 4 (234 cells)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["cna_by_chr_type_df"],"metadata":{"id":"ldNom09-bN9D","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1746666867447,"user_tz":240,"elapsed":47,"user":{"displayName":"Dhruv Dubey","userId":"08570735172682146816"}},"outputId":"55dff83b-9304-482b-bef2-188d3a24272a"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Chromosome  Cells_Detected Type\n","0          1             128  Amp\n","1         20             142  Amp\n","2         19             178  Del\n","3         22             187  Del\n","4          4             234  Del\n","5          6             226  Del\n","6          7             201  Del"],"text/html":["\n","  <div id=\"df-e4c58e1b-9c68-40e0-ad42-9f3dae7ef91f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Chromosome</th>\n","      <th>Cells_Detected</th>\n","      <th>Type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>128</td>\n","      <td>Amp</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20</td>\n","      <td>142</td>\n","      <td>Amp</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19</td>\n","      <td>178</td>\n","      <td>Del</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>22</td>\n","      <td>187</td>\n","      <td>Del</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>234</td>\n","      <td>Del</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>226</td>\n","      <td>Del</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>201</td>\n","      <td>Del</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4c58e1b-9c68-40e0-ad42-9f3dae7ef91f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e4c58e1b-9c68-40e0-ad42-9f3dae7ef91f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e4c58e1b-9c68-40e0-ad42-9f3dae7ef91f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-480a1602-5e68-4267-8538-71059b545e2e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-480a1602-5e68-4267-8538-71059b545e2e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-480a1602-5e68-4267-8538-71059b545e2e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_d2a90c08-d65e-491e-a9cf-afa329327acf\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cna_by_chr_type_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d2a90c08-d65e-491e-a9cf-afa329327acf button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cna_by_chr_type_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cna_by_chr_type_df","summary":"{\n  \"name\": \"cna_by_chr_type_df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Chromosome\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"1\",\n          \"20\",\n          \"6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cells_Detected\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39,\n        \"min\": 128,\n        \"max\": 234,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          128,\n          142,\n          226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Del\",\n          \"Amp\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":[],"metadata":{"id":"WrH65HG3bN6W"},"execution_count":null,"outputs":[]}]}